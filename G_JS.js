/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var G_JS = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,4],$V2=[1,5],$V3=[1,6],$V4=[2,5,7,15,16],$V5=[1,19],$V6=[1,25],$V7=[1,20],$V8=[1,21],$V9=[1,28],$Va=[1,26],$Vb=[1,27],$Vc=[1,29],$Vd=[1,30],$Ve=[1,34],$Vf=[1,33],$Vg=[7,9,12,15,16,28,76,77,78,79],$Vh=[1,43],$Vi=[52,55],$Vj=[2,43],$Vk=[1,44],$Vl=[1,45],$Vm=[9,19,54,72,73,74,75],$Vn=[2,9,12],$Vo=[1,48],$Vp=[25,52,55],$Vq=[1,62],$Vr=[1,57],$Vs=[1,56],$Vt=[1,58],$Vu=[1,59],$Vv=[1,60],$Vw=[1,61],$Vx=[2,9,12,15,16,28,35,39,40,43,49,76,77,78,79,80,81,82],$Vy=[2,7,9,12,15,16,19,28,35,39,40,43,49,54,62,72,73,74,75,76,77,78,79,80,81,82],$Vz=[1,73],$VA=[1,74],$VB=[1,75],$VC=[1,76],$VD=[1,77],$VE=[21,25,53,54,55,60,61,63,64,65,66,67,68,69,70,71],$VF=[2,46],$VG=[21,25,53,54,55,60,61,63,64,65,66,67,68],$VH=[21,25,53,54,55,60,61,63,64,65,66,67,68,69,70],$VI=[21,55],$VJ=[1,120],$VK=[1,118],$VL=[1,119],$VM=[1,113],$VN=[1,114],$VO=[1,115],$VP=[1,122],$VQ=[1,121],$VR=[1,142],$VS=[21,25],$VT=[21,25,60,61],$VU=[2,88],$VV=[1,163],$VW=[1,164];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"TIPO_INSTRUCCION":6,"tk_public":7,"tk_class":8,"identificador":9,"llave_izq":10,"LISTA_METODO_FUNCION":11,"llave_der":12,"tk_interface":13,"SUB_INSTRUCCION_INTERFACE":14,"cm_multiple":15,"cm_simple":16,"METODO_FUNCION":17,"tk_void":18,"parentesis_izq":19,"PARAMETROS_METODO_FUNCION":20,"parentesis_der":21,"LISTA_SUBINSTRUCCION":22,"TIPO_DATO":23,"SENTENCIA_RETURN":24,"punto_coma":25,"tk_static":26,"tk_main":27,"tk_String":28,"corchete_izq":29,"corchete_der":30,"tk_args":31,"DECLARACION":32,"LLAMADA_METODO":33,"SUB_INSTRUCCION":34,"tk_for":35,"EXP_LOGICA":36,"DECLARACION_CONTADOR":37,"SENTENCIA_BC":38,"tk_while":39,"tk_do":40,"SENTENCIA_CONTROL":41,"SENTENCIA_IMPRIMIR":42,"tk_System":43,"punto":44,"tk_out":45,"tk_println":46,"EXP_NUMERICA":47,"tk_print":48,"tk_if":49,"tk_else":50,"LISTA_VARIABLES":51,"igual":52,"mas":53,"MENOS":54,"coma":55,"L_PARAMETROS_METODO_FUNCION":56,"LLAMADA_PARAMETRO":57,"LISTA_LLAMADA_PARAMETRO":58,"EXP_RELACIONAL":59,"op_and":60,"op_or":61,"op_not":62,"mayor":63,"menor":64,"op_mayorigual":65,"op_menor_igual":66,"op_igual_igual":67,"op_not_igual":68,"por":69,"dividido":70,"op_xor":71,"entero":72,"decimal":73,"CADENA":74,"Caracter":75,"tk_int":76,"tk_double":77,"tk_boolean":78,"tk_char":79,"tk_return":80,"tk_break":81,"tk_continue":82,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"tk_public",8:"tk_class",9:"identificador",10:"llave_izq",12:"llave_der",13:"tk_interface",15:"cm_multiple",16:"cm_simple",18:"tk_void",19:"parentesis_izq",21:"parentesis_der",25:"punto_coma",26:"tk_static",27:"tk_main",28:"tk_String",29:"corchete_izq",30:"corchete_der",31:"tk_args",35:"tk_for",39:"tk_while",40:"tk_do",43:"tk_System",44:"punto",45:"tk_out",46:"tk_println",48:"tk_print",49:"tk_if",50:"tk_else",52:"igual",53:"mas",54:"MENOS",55:"coma",60:"op_and",61:"op_or",62:"op_not",63:"mayor",64:"menor",65:"op_mayorigual",66:"op_menor_igual",67:"op_igual_igual",68:"op_not_igual",69:"por",70:"dividido",71:"op_xor",72:"entero",73:"decimal",74:"CADENA",75:"Caracter",76:"tk_int",77:"tk_double",78:"tk_boolean",79:"tk_char",80:"tk_return",81:"tk_break",82:"tk_continue"},
productions_: [0,[3,2],[4,2],[4,1],[6,6],[6,6],[6,1],[6,1],[6,2],[11,2],[11,1],[17,9],[17,11],[17,13],[17,1],[17,1],[17,1],[14,2],[14,1],[22,2],[22,1],[34,1],[34,1],[34,12],[34,8],[34,10],[34,1],[34,1],[34,1],[34,1],[42,9],[42,9],[41,7],[41,11],[41,9],[32,3],[32,5],[32,4],[32,4],[32,4],[37,2],[37,2],[51,3],[51,1],[20,3],[20,2],[20,0],[56,4],[56,3],[33,5],[33,2],[57,2],[57,1],[57,0],[58,3],[58,2],[36,3],[36,3],[36,2],[36,1],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,1],[47,3],[47,3],[47,3],[47,3],[47,2],[47,3],[47,3],[47,1],[47,1],[47,1],[47,1],[47,1],[23,1],[23,1],[23,1],[23,1],[23,1],[24,2],[24,1],[38,2],[38,2],[38,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$=`${$$[$0-1]}`; return this.$; 
break;
case 2:
this.$ =`${$$[$0-1]}${$$[$0]}`; 
break;
case 3: case 6: case 7: case 14: case 15: case 28: case 29:
this.$ =`${$$[$0]}`; 
break;
case 4:
 this.$ = `${$$[$0-4]} ${$$[$0-3]} ${$$[$0-2]} \t\n${$$[$0-1]} \n${$$[$0]}`;
break;
case 5:
 
break;
case 8: case 50:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 9:
  this.$ =`${$$[$0-1]}${$$[$0]}`;
break;
case 10: case 20:
this.$ =`${$$[$0]}`;
break;
case 11:
this.$=`${$$[$0-6]}${$$[$0-5]}${$$[$0-4]}${$$[$0-3]}\n${$$[$0-2]}\n${$$[$0-1]}`;
break;
case 12:
this.$=`function ${$$[$0-8]}${$$[$0-7]}${$$[$0-6]}${$$[$0-5]}${$$[$0-4]}\n${$$[$0-3]}${$$[$0-2]};\n${$$[$0]}`;
break;
case 13: case 46:
this.$=``;
break;
case 16: case 78:
 this.$ =`${$$[$0]}`; 
break;
case 17:
	
break;
case 19:
 this.$ =`${$$[$0-1]}\n${$$[$0]}`;
break;
case 21: case 22: case 43: case 52: case 66:
this.$ = `${$$[$0]}`;
break;
case 23:
this.$=`for${$$[$0-10]}${$$[$0-9]}${$$[$0-8]}${$$[$0-7]}${$$[$0-6]}${$$[$0-5]}${$$[$0-4]}${$$[$0-3]}\n${$$[$0-2]}\n${$$[$0-1]}\n${$$[$0]}`;
break;
case 24:
this.$=`while(${$$[$0-5]})${$$[$0-3]}\n${$$[$0-2]}\n${$$[$0-1]}\n${$$[$0]}`;
break;
case 25:
this.$ = `do${$$[$0-8]}\n${$$[$0-7]}\n${$$[$0-6]}\n${$$[$0-5]}while${$$[$0-3]}${$$[$0-2]}${$$[$0-1]};`;
break;
case 26: case 45:
this.$=`${$$[$0]}`;
break;
case 27:
this.$= `${$$[$0]}`;
break;
case 30: case 31:
this.$ = `console.log(${$$[$0-2]});`;
break;
case 32:
 this.$=`if${$$[$0-5]}${$$[$0-4]}${$$[$0-3]}${$$[$0-2]}\n${$$[$0-1]}\n${$$[$0]}`;
break;
case 33:
this.$=`if${$$[$0-9]}${$$[$0-8]}${$$[$0-7]}${$$[$0-6]}\n${$$[$0-5]}\n${$$[$0-4]}else${$$[$0-2]}\n${$$[$0-1]}\n${$$[$0]}`;
break;
case 34:
this.$=`if${$$[$0-7]}${$$[$0-6]}${$$[$0-5]}${$$[$0-4]}\n${$$[$0-3]}\n${$$[$0-2]}else${$$[$0]}`;
break;
case 35:
this.$ = `let ${$$[$0-1]};`;
break;
case 36:
 this.$ =`let ${$$[$0-3]}${$$[$0-2]}${$$[$0-1]}${$$[$0]}`;
break;
case 37:
this.$ = `${$$[$0-3]}${$$[$0-2]}${$$[$0-1]}${$$[$0]}`;
break;
case 38: case 39:
 this.$=`${$$[$0-3]}${$$[$0-2]}${$$[$0-1]}${$$[$0]}`;
break;
case 40:
 this.$ = `++`; 
break;
case 41:
 this.$ = `--`; 
break;
case 42:
this.$ =`${$$[$0-2]}${$$[$0-1]}${$$[$0]}`;
break;
case 44:
 this.$=`${$$[$0-1]}${$$[$0]}${$$[$01]}`; 
break;
case 47:
this.$=`${$$[$0-3]}${$$[$0-2]}${$$[$0]}`; 
break;
case 48:
this.$=`${$$[$0-2]}${$$[$0]}` ; 
break;
case 49:
 `this.${$$[$0-4]}${$$[$0-3]}${$$[$0-2]}${$$[$0-1]}${$$[$0]}`;
break;
case 51:
 this.$ = `${$$[$0-1]}${$$[$0]}`;  
break;
case 53: case 88:
this.$ = ``;
break;
case 54:
 this.$ =`${$$[$0-2]}${$$[$0-1]}${$$[$0]}`;
break;
case 55:
this.$ = `,${$$[$0]}`;
break;
case 56:
this.$ = `${$$[$0-2]}${$$[$0-1]}${$$[$0]}`; 
break;
case 57:
this.$ = `${$$[$0-2]}${$$[$0-1]}${$$[$0]}`;  
break;
case 58:
this.$ = `${$$[$0-1]}${$$[$01]}`; 
break;
case 59:
 this.$ = `${$$[$0]}`; 
break;
case 60: case 61: case 63: case 65:
 this.$ = `${$$[$0-2]}${$$[$0-1]}${$$[$0]}`; 
break;
case 62: case 64:
 this.$ = `${$$[$0-2]}${$$[$0-1]}${$$[$0]}`;  
break;
case 67:
 this.$=`${$$[$0-2]}+${$$[$0]}`;
break;
case 68:
  this.$ =`${$$[$0-2]}-${$$[$0]}`; 
break;
case 69:
  this.$ = `${$$[$0-2]}*${$$[$0]}`; 
break;
case 70:
  this.$ =`${$$[$0-2]} / ${$$[$0-1]}`; 
break;
case 71:
 this.$ = `-${$$[$0]}`;
break;
case 72:
this.$ =`${$$[$0-2]} ${$$[$0-1]} ${$$[$0]}`;
break;
case 73:
 this.$ =`${$$[$0-2]} ${$$[$0-1]} ${$$[$0]}`;
break;
case 74:
  this.$ =`${$$[$0]}`; 
break;
case 75: case 76: case 77:
 this.$ =`${$$[$0]}`;
break;
case 79:
 this.$ =``; 
break;
case 80:
  this.$ =``; 
break;
case 81: case 83:
  this.$ =``;  
break;
case 82:
 this.$ =``;   
break;
case 84:
 this.$=`return ${$$[$0]}`;
break;
case 85:
this.$ = `return`;
break;
case 86:
 this.$=`break;`;  
break;
case 87:
 this.$=`continue;`; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1,15:$V2,16:$V3},{1:[3]},{2:$V0,5:[1,8],6:9,7:$V1,15:$V2,16:$V3},o($V4,[2,3]),{8:[1,10],13:[1,11]},o($V4,[2,6]),o($V4,[2,7]),{12:[1,12]},{1:[2,1]},o($V4,[2,2]),{9:[1,13]},{9:[1,14]},o($V4,[2,8]),{10:[1,15]},{10:[1,16]},{7:$V5,9:$V6,11:17,15:$V7,16:$V8,17:18,23:23,28:$V9,32:22,51:24,76:$Va,77:$Vb,78:$Vc,79:$Vd},{2:$Ve,9:$Vf,14:31,33:32},{7:$V5,9:$V6,12:[1,35],15:$V7,16:$V8,17:36,23:23,28:$V9,32:22,51:24,76:$Va,77:$Vb,78:$Vc,79:$Vd},o($Vg,[2,10]),{18:[1,37],23:38,26:[1,39],28:$V9,76:$Va,77:$Vb,78:$Vc,79:$Vd},o($Vg,[2,14]),o($Vg,[2,15]),o($Vg,[2,16]),{9:[1,41],51:40},{52:[1,42],55:$Vh},o($Vi,$Vj,{53:$Vk,54:$Vl}),o($Vm,[2,79]),o($Vm,[2,80]),o($Vm,[2,81]),o($Vm,[2,82]),o($Vm,[2,83]),{2:$Ve,9:$Vf,12:[1,46],33:47},o($Vn,[2,18]),{19:$Vo},{25:[1,49]},o($V4,[2,4]),o($Vg,[2,9]),{9:[1,50]},{9:[1,51]},{18:[1,52]},{25:[1,53],52:[1,54],55:$Vh},o($Vp,$Vj),{9:$Vq,19:$Vr,47:55,54:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw},{9:[1,63]},{53:[1,64]},{54:[1,65]},o($V4,[2,5]),o($Vn,[2,17]),{9:$Vq,19:$Vr,21:[2,53],47:67,54:$Vs,57:66,72:$Vt,73:$Vu,74:$Vv,75:$Vw},o($Vx,[2,50]),{19:[1,68]},{19:[1,69]},{27:[1,70]},o($Vy,[2,35]),{9:$Vq,19:$Vr,47:71,54:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw},{25:[1,72],53:$Vz,54:$VA,69:$VB,70:$VC,71:$VD},{9:$Vq,19:$Vr,47:78,54:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw},{9:$Vq,19:$Vr,47:79,54:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw},o($VE,[2,74]),o($VE,[2,75]),o($VE,[2,76]),o($VE,[2,77]),o($VE,[2,78]),o($Vp,[2,42]),{25:[1,80]},{25:[1,81]},{21:[1,82]},{21:[2,52],53:$Vz,54:$VA,55:[1,84],58:83,69:$VB,70:$VC,71:$VD},{20:85,21:$VF,23:86,28:$V9,76:$Va,77:$Vb,78:$Vc,79:$Vd},{20:87,21:$VF,23:86,28:$V9,76:$Va,77:$Vb,78:$Vc,79:$Vd},{19:[1,88]},{25:[1,89],53:$Vz,54:$VA,69:$VB,70:$VC,71:$VD},o($Vy,[2,37]),{9:$Vq,19:$Vr,47:90,54:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw},{9:$Vq,19:$Vr,47:91,54:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw},{9:$Vq,19:$Vr,47:92,54:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw},{9:$Vq,19:$Vr,47:93,54:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw},{9:$Vq,19:$Vr,47:94,54:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw},o($VE,[2,71]),{21:[1,95],53:$Vz,54:$VA,69:$VB,70:$VC,71:$VD},o($Vy,[2,38]),o($Vy,[2,39]),{25:[1,96]},{21:[2,51],55:[1,97]},{9:$Vq,19:$Vr,47:98,54:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw},{21:[1,99]},{9:$Vq,19:$Vr,47:100,54:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw},{21:[1,101]},{28:[1,102]},o($Vy,[2,36]),o($VG,[2,67],{69:$VB,70:$VC,71:$VD}),o($VG,[2,68],{69:$VB,70:$VC,71:$VD}),o($VH,[2,69],{71:$VD}),o($VH,[2,70],{71:$VD}),o($VE,[2,72]),o($VE,[2,73]),o($Vx,[2,49]),{9:$Vq,19:$Vr,47:103,54:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw},o($VI,[2,55],{53:$Vz,54:$VA,69:$VB,70:$VC,71:$VD}),{10:[1,104]},{21:[2,45],53:$Vz,54:$VA,55:[1,106],56:105,69:$VB,70:$VC,71:$VD},{10:[1,107]},{29:[1,108]},o($VI,[2,54],{53:$Vz,54:$VA,69:$VB,70:$VC,71:$VD}),{2:$Ve,9:$VJ,15:$VK,16:$VL,22:109,23:23,28:$V9,32:111,33:112,34:110,35:$VM,39:$VN,40:$VO,41:116,42:117,43:$VP,49:$VQ,51:24,76:$Va,77:$Vb,78:$Vc,79:$Vd},{21:[2,44],55:[1,123]},{23:124,28:$V9,76:$Va,77:$Vb,78:$Vc,79:$Vd},{2:$Ve,9:$VJ,15:$VK,16:$VL,22:125,23:23,28:$V9,32:111,33:112,34:110,35:$VM,39:$VN,40:$VO,41:116,42:117,43:$VP,49:$VQ,51:24,76:$Va,77:$Vb,78:$Vc,79:$Vd},{30:[1,126]},{2:$Ve,9:$VJ,12:[1,127],15:$VK,16:$VL,23:23,28:$V9,32:111,33:112,34:128,35:$VM,39:$VN,40:$VO,41:116,42:117,43:$VP,49:$VQ,51:24,76:$Va,77:$Vb,78:$Vc,79:$Vd},o($Vx,[2,20]),o($Vx,[2,21]),o($Vx,[2,22]),{19:[1,129]},{19:[1,130]},{10:[1,131]},o($Vx,[2,26]),o($Vx,[2,27]),o($Vx,[2,28]),o($Vx,[2,29]),o($Vi,$Vj,{19:$Vo,53:$Vk,54:$Vl}),{19:[1,132]},{44:[1,133]},{23:134,28:$V9,76:$Va,77:$Vb,78:$Vc,79:$Vd},{9:$Vq,19:$Vr,47:135,54:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw},{2:$Ve,9:$VJ,15:$VK,16:$VL,23:23,24:136,28:$V9,32:111,33:112,34:128,35:$VM,39:$VN,40:$VO,41:116,42:117,43:$VP,49:$VQ,51:24,76:$Va,77:$Vb,78:$Vc,79:$Vd,80:[1,137]},{31:[1,138]},o($Vg,[2,11]),o($Vx,[2,19]),{9:$V6,23:23,28:$V9,32:139,51:24,76:$Va,77:$Vb,78:$Vc,79:$Vd},{9:$Vq,19:$Vr,36:140,47:143,54:$Vs,59:141,62:$VR,72:$Vt,73:$Vu,74:$Vv,75:$Vw},{2:$Ve,9:$VJ,15:$VK,16:$VL,22:144,23:23,28:$V9,32:111,33:112,34:110,35:$VM,39:$VN,40:$VO,41:116,42:117,43:$VP,49:$VQ,51:24,76:$Va,77:$Vb,78:$Vc,79:$Vd},{9:$Vq,19:$Vr,36:145,47:143,54:$Vs,59:141,62:$VR,72:$Vt,73:$Vu,74:$Vv,75:$Vw},{45:[1,146]},{9:$Vq,19:$Vr,47:147,54:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw},o($VI,[2,48],{53:$Vz,54:$VA,69:$VB,70:$VC,71:$VD}),{25:[1,148]},{9:$Vq,19:$Vr,25:[2,85],47:149,54:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw},{21:[1,150]},{9:$Vq,19:$Vr,36:151,47:143,54:$Vs,59:141,62:$VR,72:$Vt,73:$Vu,74:$Vv,75:$Vw},{21:[1,152]},o($VS,[2,59],{60:[1,153],61:[1,154]}),{9:$Vq,19:$Vr,47:143,54:$Vs,59:155,72:$Vt,73:$Vu,74:$Vv,75:$Vw},o($VT,[2,66],{53:$Vz,54:$VA,63:[1,156],64:[1,157],65:[1,158],66:[1,159],67:[1,160],68:[1,161],69:$VB,70:$VC,71:$VD}),{2:$Ve,9:$VJ,12:$VU,15:$VK,16:$VL,23:23,28:$V9,32:111,33:112,34:128,35:$VM,38:162,39:$VN,40:$VO,41:116,42:117,43:$VP,49:$VQ,51:24,76:$Va,77:$Vb,78:$Vc,79:$Vd,81:$VV,82:$VW},{21:[1,165]},{44:[1,166]},o($VI,[2,47],{53:$Vz,54:$VA,69:$VB,70:$VC,71:$VD}),{12:[1,167]},{25:[2,84],53:$Vz,54:$VA,69:$VB,70:$VC,71:$VD},{10:[1,168]},{25:[1,169]},{10:[1,170]},{9:$Vq,19:$Vr,47:143,54:$Vs,59:171,72:$Vt,73:$Vu,74:$Vv,75:$Vw},{9:$Vq,19:$Vr,47:143,54:$Vs,59:172,72:$Vt,73:$Vu,74:$Vv,75:$Vw},o($VS,[2,58]),{9:$Vq,19:$Vr,47:173,54:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw},{9:$Vq,19:$Vr,47:174,54:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw},{9:$Vq,19:$Vr,47:175,54:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw},{9:$Vq,19:$Vr,47:176,54:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw},{9:$Vq,19:$Vr,47:177,54:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw},{9:$Vq,19:$Vr,47:178,54:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw},{12:[1,179]},{25:[1,180]},{25:[1,181]},{10:[1,182]},{46:[1,183],48:[1,184]},o($Vg,[2,12]),{2:$Ve,9:$VJ,15:$VK,16:$VL,22:185,23:23,28:$V9,32:111,33:112,34:110,35:$VM,39:$VN,40:$VO,41:116,42:117,43:$VP,49:$VQ,51:24,76:$Va,77:$Vb,78:$Vc,79:$Vd},{9:[1,186]},{2:$Ve,9:$VJ,15:$VK,16:$VL,22:187,23:23,28:$V9,32:111,33:112,34:110,35:$VM,39:$VN,40:$VO,41:116,42:117,43:$VP,49:$VQ,51:24,76:$Va,77:$Vb,78:$Vc,79:$Vd},o($VS,[2,56]),o($VS,[2,57]),o($VT,[2,60],{53:$Vz,54:$VA,69:$VB,70:$VC,71:$VD}),o($VT,[2,61],{53:$Vz,54:$VA,69:$VB,70:$VC,71:$VD}),o($VT,[2,62],{53:$Vz,54:$VA,69:$VB,70:$VC,71:$VD}),o($VT,[2,63],{53:$Vz,54:$VA,69:$VB,70:$VC,71:$VD}),o($VT,[2,64],{53:$Vz,54:$VA,69:$VB,70:$VC,71:$VD}),o($VT,[2,65],{53:$Vz,54:$VA,69:$VB,70:$VC,71:$VD}),{39:[1,188]},{12:[2,86]},{12:[2,87]},{2:$Ve,9:$VJ,15:$VK,16:$VL,23:23,28:$V9,32:111,33:112,34:189,35:$VM,39:$VN,40:$VO,41:116,42:117,43:$VP,49:$VQ,51:24,76:$Va,77:$Vb,78:$Vc,79:$Vd},{19:[1,190]},{19:[1,191]},{2:$Ve,9:$VJ,12:[1,192],15:$VK,16:$VL,23:23,28:$V9,32:111,33:112,34:128,35:$VM,39:$VN,40:$VO,41:116,42:117,43:$VP,49:$VQ,51:24,76:$Va,77:$Vb,78:$Vc,79:$Vd},{37:193,53:[1,194],54:[1,195]},{2:$Ve,9:$VJ,12:$VU,15:$VK,16:$VL,23:23,28:$V9,32:111,33:112,34:128,35:$VM,38:196,39:$VN,40:$VO,41:116,42:117,43:$VP,49:$VQ,51:24,76:$Va,77:$Vb,78:$Vc,79:$Vd,81:$VV,82:$VW},{19:[1,197]},{12:[1,198]},{9:$Vq,19:$Vr,47:199,54:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw},{9:$Vq,19:$Vr,47:200,54:$Vs,72:$Vt,73:$Vu,74:$Vv,75:$Vw},o($Vg,[2,13]),{21:[1,201]},{53:[1,202]},{54:[1,203]},{12:[1,204]},{9:$Vq,19:$Vr,36:205,47:143,54:$Vs,59:141,62:$VR,72:$Vt,73:$Vu,74:$Vv,75:$Vw},o($Vx,[2,32],{50:[1,206]}),{21:[1,207],53:$Vz,54:$VA,69:$VB,70:$VC,71:$VD},{21:[1,208],53:$Vz,54:$VA,69:$VB,70:$VC,71:$VD},{10:[1,209]},{21:[2,40]},{21:[2,41]},o($Vx,[2,24]),{21:[1,210]},{10:[1,211],41:212,49:$VQ},{25:[1,213]},{25:[1,214]},{2:$Ve,9:$VJ,15:$VK,16:$VL,22:215,23:23,28:$V9,32:111,33:112,34:110,35:$VM,39:$VN,40:$VO,41:116,42:117,43:$VP,49:$VQ,51:24,76:$Va,77:$Vb,78:$Vc,79:$Vd},{25:[1,216]},{2:$Ve,9:$VJ,15:$VK,16:$VL,23:23,28:$V9,32:111,33:112,34:217,35:$VM,39:$VN,40:$VO,41:116,42:117,43:$VP,49:$VQ,51:24,76:$Va,77:$Vb,78:$Vc,79:$Vd},o($Vx,[2,34]),o($Vx,[2,30]),o($Vx,[2,31]),{2:$Ve,9:$VJ,12:$VU,15:$VK,16:$VL,23:23,28:$V9,32:111,33:112,34:128,35:$VM,38:218,39:$VN,40:$VO,41:116,42:117,43:$VP,49:$VQ,51:24,76:$Va,77:$Vb,78:$Vc,79:$Vd,81:$VV,82:$VW},o($Vx,[2,25]),{12:[1,219]},{12:[1,220]},o($Vx,[2,33]),o($Vx,[2,23])],
defaultActions: {8:[2,1],180:[2,86],181:[2,87],202:[2,40],203:[2,41]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	//const Nodo = require('./AstTree');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 15; 
break;
case 1:return 16; 
break;
case 2:return 7;
break;
case 3:return 26;
break;
case 4:return 8;
break;
case 5:return 13;
break;
case 6:return 18;
break;
case 7:return 27;
break;
case 8:return 31;
break;
case 9:return 43;
break;
case 10:return 45;
break;
case 11:return 48;
break;
case 12:return 46;
break;
case 13:return 76;
break;
case 14:return 77;
break;
case 15:return 79;
break;
case 16:return 78;
break;
case 17:return 28;
break;
case 18:return 35;
break;
case 19:return 39;
break;
case 20:return 40;
break;
case 21:return 81;
break;
case 22:return 80;
break;
case 23:return 82;
break;
case 24:return 49;
break;
case 25:return 50;
break;
case 26:return 25; 
break;
case 27:return 19; 
break;
case 28:return 21; 
break;
case 29:return 29; 
break;
case 30:return 30; 
break;
case 31:return 10
break;
case 32:return 12
break;
case 33:return 55; 
break;
case 34:return 44; 
break;
case 35:return 65;
break;
case 36:return 66;
break;
case 37:return 60;
break;
case 38:return 61;
break;
case 39:return 68;
break;
case 40:return 67;
break;
case 41:return 53;
break;
case 42:return 54;
break;
case 43:return 69;
break;
case 44:return 70;
break;
case 45:return 71;
break;
case 46:return 63;
break;
case 47:return 64;
break;
case 48:return 52; 
break;
case 49:return 62;
break;
case 50: /*ignore */
break;
case 51:/*it will count */
break;
case 52:// se ignoran espacios en blanco
break;
case 53: 
break;
case 54:
break;
case 55:return 73; 
break;
case 56:return 72; 
break;
case 57:return 9; 
break;
case 58:return 5; 
break;
case 59: console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\/\/.*)/i,/^(?:public\b)/i,/^(?:static\b)/i,/^(?:class\b)/i,/^(?:interface\b)/i,/^(?:void\b)/i,/^(?:main\b)/i,/^(?:args\b)/i,/^(?:System\b)/i,/^(?:out\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:String\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:return\b)/i,/^(?:continue\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\.)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:!)/i,/^(?:[ \r\t\f]+)/i,/^(?:\n)/i,/^(?:\s+)/i,/^(?:"[^\"]*")/i,/^(?:'[^']')/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = G_JS;
exports.Parser = G_JS.Parser;
exports.parse = function () { return G_JS.parse.apply(G_JS, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}