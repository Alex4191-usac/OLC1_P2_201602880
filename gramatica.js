/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,4],$V2=[2,5,7],$V3=[1,17],$V4=[1,21],$V5=[1,24],$V6=[1,22],$V7=[1,23],$V8=[1,25],$V9=[1,26],$Va=[1,29],$Vb=[7,9,12,26,74,75,76,77],$Vc=[1,38],$Vd=[50,53],$Ve=[2,37],$Vf=[1,39],$Vg=[1,40],$Vh=[9,12],$Vi=[1,43],$Vj=[23,50,53],$Vk=[1,56],$Vl=[1,51],$Vm=[1,50],$Vn=[1,52],$Vo=[1,53],$Vp=[1,54],$Vq=[1,55],$Vr=[7,9,12,17,26,33,37,38,41,47,52,60,70,71,72,73,74,75,76,77,78,79,80],$Vs=[1,67],$Vt=[1,68],$Vu=[1,69],$Vv=[1,70],$Vw=[1,71],$Vx=[19,23,51,52,53,58,59,61,62,63,64,65,66,67,68,69],$Vy=[2,40],$Vz=[19,23,51,52,53,58,59,61,62,63,64,65,66],$VA=[19,23,51,52,53,58,59,61,62,63,64,65,66,67,68],$VB=[9,12,26,33,37,38,41,47,74,75,76,77,78,79,80],$VC=[19,53],$VD=[1,112],$VE=[1,107],$VF=[1,108],$VG=[1,109],$VH=[1,114],$VI=[1,113],$VJ=[1,134],$VK=[19,23],$VL=[19,23,58,59],$VM=[2,81],$VN=[1,155],$VO=[1,156];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"TIPO_INSTRUCCION":6,"tk_public":7,"tk_class":8,"identificador":9,"llave_izq":10,"LISTA_METODO_FUNCION":11,"llave_der":12,"tk_interface":13,"SUB_INSTRUCCION_INTERFACE":14,"METODO_FUNCION":15,"tk_void":16,"parentesis_izq":17,"PARAMETROS_METODO_FUNCION":18,"parentesis_der":19,"LISTA_SUBINSTRUCCION":20,"TIPO_DATO":21,"SENTENCIA_RETURN":22,"punto_coma":23,"tk_static":24,"tk_main":25,"tk_String":26,"corchete_izq":27,"corchete_der":28,"tk_args":29,"DECLARACION":30,"LLAMADA_METODO":31,"SUB_INSTRUCCION":32,"tk_for":33,"EXP_LOGICA":34,"DECLARACION_CONTADOR":35,"SENTENCIA_BC":36,"tk_while":37,"tk_do":38,"SENTENCIA_CONTROL":39,"SENTENCIA_IMPRIMIR":40,"tk_System":41,"punto":42,"tk_out":43,"tk_println":44,"EXP_NUMERICA":45,"tk_print":46,"tk_if":47,"tk_else":48,"LISTA_VARIABLES":49,"igual":50,"mas":51,"MENOS":52,"coma":53,"L_PARAMETROS_METODO_FUNCION":54,"LLAMADA_PARAMETRO":55,"LISTA_LLAMADA_PARAMETRO":56,"EXP_RELACIONAL":57,"op_and":58,"op_or":59,"op_not":60,"mayor":61,"menor":62,"op_mayorigual":63,"op_menor_igual":64,"op_igual_igual":65,"op_not_igual":66,"por":67,"dividido":68,"op_xor":69,"entero":70,"decimal":71,"CADENA":72,"Caracter":73,"tk_int":74,"tk_double":75,"tk_boolean":76,"tk_char":77,"tk_return":78,"tk_break":79,"tk_continue":80,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"tk_public",8:"tk_class",9:"identificador",10:"llave_izq",12:"llave_der",13:"tk_interface",16:"tk_void",17:"parentesis_izq",19:"parentesis_der",23:"punto_coma",24:"tk_static",25:"tk_main",26:"tk_String",27:"corchete_izq",28:"corchete_der",29:"tk_args",33:"tk_for",37:"tk_while",38:"tk_do",41:"tk_System",42:"punto",43:"tk_out",44:"tk_println",46:"tk_print",47:"tk_if",48:"tk_else",50:"igual",51:"mas",52:"MENOS",53:"coma",58:"op_and",59:"op_or",60:"op_not",61:"mayor",62:"menor",63:"op_mayorigual",64:"op_menor_igual",65:"op_igual_igual",66:"op_not_igual",67:"por",68:"dividido",69:"op_xor",70:"entero",71:"decimal",72:"CADENA",73:"Caracter",74:"tk_int",75:"tk_double",76:"tk_boolean",77:"tk_char",78:"tk_return",79:"tk_break",80:"tk_continue"},
productions_: [0,[3,2],[4,2],[4,1],[6,6],[6,6],[6,2],[11,2],[11,1],[15,9],[15,11],[15,13],[15,1],[14,2],[14,1],[20,2],[20,1],[32,1],[32,1],[32,12],[32,8],[32,10],[32,1],[32,1],[40,9],[40,9],[39,7],[39,11],[39,9],[30,3],[30,5],[30,4],[30,4],[30,4],[35,2],[35,2],[49,3],[49,1],[18,3],[18,2],[18,0],[54,4],[54,3],[31,5],[55,2],[55,1],[55,0],[56,3],[56,2],[34,3],[34,3],[34,2],[34,1],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,1],[45,3],[45,3],[45,3],[45,3],[45,2],[45,3],[45,3],[45,1],[45,1],[45,1],[45,1],[45,1],[21,1],[21,1],[21,1],[21,1],[21,1],[22,2],[22,1],[36,2],[36,2],[36,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$=new Nodo("INICIO");
							this.$.AgregarHijo($$[$0-1]);
							
							return this.$; 
break;
case 2:
this.$ = new Nodo("INSTRUCCIONES");
											   this.$.AgregarHijo($$[$0-1]);
												this.$.AgregarHijo($$[$0]); 
break;
case 3:
this.$ = new Nodo("INSTRUCCIONES");
								 this.$.AgregarHijo($$[$0]); 
break;
case 4:
 this.$ = new Nodo("TIPO_INSTRUCCION");
																							  this.$.AgregarHijo(new Nodo("public","tk_public"));
																							  this.$.AgregarHijo(new Nodo("class","tk_class"));
																							  this.$.AgregarHijo(new Nodo($$[$0-3],"Id"));
																							  this.$.AgregarHijo(new Nodo("{","llave_izq"));
																							  this.$.AgregarHijo($$[$0-1]);
																							  this.$.AgregarHijo(new Nodo("}","llave_der"));
break;
case 5:
this.$ = new Nodo("TIPO_INSTRUCCION");
																								this.$.AgregarHijo(new Nodo("public","tk_public"));
																								this.$.AgregarHijo(new Nodo("interface","tk_interface"));
																								this.$.AgregarHijo(new Nodo("{","llave_izq"));
																							  	this.$.AgregarHijo($$[$0-1]);
																							  	this.$.AgregarHijo(new Nodo("}","llave_der"));
break;
case 6:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 7:
  this.$ = new Nodo("LISTA_METODO_FUNCION");
															  this.$.AgregarHijo($$[$0-1]);
															  this.$.AgregarHijo($$[$0]);
break;
case 8:
this.$ = new Nodo("LISTA_METODO_FUNCION");
									  this.$.AgregarHijo($$[$0]); 
break;
case 9:
this.$ = new Nodo("METODO_FUNCION");
																																					this.$.AgregarHijo(new Nodo("public","tk_public"));
																																					this.$.AgregarHijo(new Nodo("void","tk_void"));	
																																					this.$.AgregarHijo(new Nodo($$[$0-6],"Id"));	
																																					this.$.AgregarHijo(new Nodo("(","par_izq"));
																																					this.$.AgregarHijo($$[$0-4]);	
																																					this.$.AgregarHijo(new Nodo(")","par_der"));
																																					this.$.AgregarHijo(new Nodo("{","llave_izq"));
																																					this.$.AgregarHijo($$[$0-1]);
																																					this.$.AgregarHijo(new Nodo("}","llave_der"));					
																																													
break;
case 10:
this.$ = new Nodo("METODO_FUNCION");
																																					this.$.AgregarHijo(new Nodo("public","tk_public"));
																																					this.$.AgregarHijo($$[$0-9]);	
																																					this.$.AgregarHijo(new Nodo($$[$0-8],"Id"));	
																																					this.$.AgregarHijo(new Nodo("(","par_izq"));
																																					this.$.AgregarHijo($$[$0-6]);	
																																					this.$.AgregarHijo(new Nodo(")","par_der"));
																																					this.$.AgregarHijo(new Nodo("{","llave_izq"));
																																					this.$.AgregarHijo($$[$0-3]);
																																					this.$.AgregarHijo($$[$0-2]);
																																					this.$.AgregarHijo(new Nodo(";","punto_coma"));
																																				    this.$.AgregarHijo(new Nodo("}","llave_der"));
																																					
break;
case 11:
this.$ = new Nodo("METODO_FUNCION");
																																					this.$.AgregarHijo(new Nodo("public","tk_public"));
																																					this.$.AgregarHijo(new Nodo("static","tk_static"));
																																					this.$.AgregarHijo(new Nodo("void","tk_void"));	
																																					this.$.AgregarHijo(new Nodo("main","tk_main"));
																																					this.$.AgregarHijo(new Nodo("(","par_izq"));
																																					this.$.AgregarHijo(new Nodo("String","tk_string"));
																																					this.$.AgregarHijo(new Nodo("[","corchete_izq"));
																																					this.$.AgregarHijo(new Nodo("]","corchete_der"));
																																					this.$.AgregarHijo(new Nodo("args","tk_args"));
																																					this.$.AgregarHijo(new Nodo(")","par_der"));
																																					this.$.AgregarHijo(new Nodo("{","llave_izq"));
																																					this.$.AgregarHijo($$[$0-1]);
																																					this.$.AgregarHijo(new Nodo("}","llave_der"));
break;
case 12:
this.$ = new Nodo("METODO_FUNCION");
							    this.$.AgregarHijo($$[$0]); 
break;
case 13:
this.$ = new Nodo("SUB_INSTRUCCION_INTERFACE");
														                      this.$.AgregarHijo($$[$0-1]);
																			   this.$.AgregarHijo($$[$0]);	
break;
case 14:
this.$ = new Nodo("SUB_INSTRUCCION_INTERFACE");
										  this.$.AgregarHijo($$[$0]);
break;
case 15:
 this.$ = new Nodo("LISTA_SUBINSTRUCCION");
															  this.$.AgregarHijo($$[$0-1]);
															  this.$.AgregarHijo($$[$0]);
break;
case 16:
this.$ = new Nodo("LISTA_SUBINSTRUCCION");
									       this.$.AgregarHijo($$[$0]); 
break;
case 17: case 18: case 22:
this.$ = new Nodo("LISTA_SUBINSTRUCCION");
									 this.$.AgregarHijo($$[$0]);
break;
case 19:
this.$ = new Nodo("LISTA_SUBINSTRUCCION");
																																													this.$.AgregarHijo(new Nodo("for","tk_for"));
																																													this.$.AgregarHijo(new Nodo("(","par_izq"));
																										 																			this.$.AgregarHijo($$[$0-9]);
																																													this.$.AgregarHijo($$[$0-8]);
																																													this.$.AgregarHijo(new Nodo(";","punto_coma"));
																																													this.$.AgregarHijo(new Nodo($$[$0-6],"Id"));
																																													this.$.AgregarHijo($$[$0-5]);
																										 																			this.$.AgregarHijo(new Nodo(")","par_der"));
																																													this.$.AgregarHijo(new Nodo("{","llave_izq"));
																																													this.$.AgregarHijo($$[$0-3]);
																																													this.$.AgregarHijo($$[$0-2]);
																																													this.$.AgregarHijo(new Nodo("}","llave_der"));



				
break;
case 20:

																												this.$ = new Nodo("LISTA_SUBINSTRUCCION");
																												this.$.AgregarHijo(new Nodo("while","tk_whilet"));
																												this.$.AgregarHijo(new Nodo("(","par_izq"));
																										 		this.$.AgregarHijo($$[$0-5]);
																										 		this.$.AgregarHijo(new Nodo(")","par_der"));
																												this.$.AgregarHijo(new Nodo("{","llave_izq"));
																												this.$.AgregarHijo($$[$0-2]);
																												this.$.AgregarHijo($$[$0-1]);
																												this.$.AgregarHijo(new Nodo("}","llave_der"));
				
break;
case 21:
this.$ = new Nodo("LISTA_SUBINSTRUCCION");
																												this.$.AgregarHijo(new Nodo("do","tk_Do"));
																												this.$.AgregarHijo(new Nodo("{","llave_izq"));
																												this.$.AgregarHijo($$[$0-7]);
																												this.$.AgregarHijo($$[$0-6]);
																												this.$.AgregarHijo(new Nodo("}","llave_der"));
																												this.$.AgregarHijo(new Nodo("while","tk_whilet"));
																												this.$.AgregarHijo(new Nodo("(","par_izq"));
																										 		this.$.AgregarHijo($$[$0-2]);
																										 		this.$.AgregarHijo(new Nodo(")","par_der"));
																												this.$.AgregarHijo(new Nodo(";","punto_coma"));
break;
case 23:
this.$= new Nodo("LISTA_SUBINSTRUCCION");
									this.$.AgregarHijo($$[$0]);
break;
case 24:
this.$ = new Nodo("SENTENCIA_IMPRIMIR");
																												this.$.AgregarHijo(new Nodo("System","tk_System"));
																												this.$.AgregarHijo(new Nodo(".","tk_dot"));
																												this.$.AgregarHijo(new Nodo("out","tk_out"));
																												this.$.AgregarHijo(new Nodo(".","tk_dot"));
																												this.$.AgregarHijo(new Nodo("println","tk_print"));
																												this.$.AgregarHijo(new Nodo("(","par_izq"));
																										 		this.$.AgregarHijo($$[$0-2]);
																										 		this.$.AgregarHijo(new Nodo(")","par_der"));
																												this.$.AgregarHijo(new Nodo(";","punto_coma")); 
break;
case 25:
this.$ = new Nodo("SENTENCIA_IMPRIMIR");
																												this.$.AgregarHijo(new Nodo("System","tk_System"));
																												this.$.AgregarHijo(new Nodo(".","tk_dot"));
																												this.$.AgregarHijo(new Nodo("out","tk_out"));
																												this.$.AgregarHijo(new Nodo(".","tk_dot"));
																												this.$.AgregarHijo(new Nodo("print","tk_print"));
																												this.$.AgregarHijo(new Nodo("(","par_izq"));
																										 		this.$.AgregarHijo($$[$0-2]);
																										 		this.$.AgregarHijo(new Nodo(")","par_der"));
																												this.$.AgregarHijo(new Nodo(";","punto_coma"));
																																							
break;
case 26:
this.$ = new Nodo("SENTENCIA_CONTROL");
				  																					   this.$.AgregarHijo(new Nodo("if","tk_if"));
																										 this.$.AgregarHijo(new Nodo("(","par_izq"));
																										 this.$.AgregarHijo($$[$0-4]);
																										 this.$.AgregarHijo(new Nodo(")","par_der"));
																										 this.$.AgregarHijo(new Nodo("{","llave_izq"));
																										 this.$.AgregarHijo($$[$0-1]);
																										 this.$.AgregarHijo(new Nodo("}","llave_der"));
																										  
break;
case 27:
this.$ = new Nodo("SENTENCIA_CONTROL");
				  																					   												this.$.AgregarHijo(new Nodo("if","tk_if"));
																										 											this.$.AgregarHijo(new Nodo("(","par_izq"));
																										 											this.$.AgregarHijo($$[$0-8]);
																																					this.$.AgregarHijo(new Nodo(")","par_der"));
																																					this.$.AgregarHijo(new Nodo("{","llave_izq"));
																																					this.$.AgregarHijo($$[$0-5]);
																																					this.$.AgregarHijo(new Nodo("}","llave_der"));
																																					this.$.AgregarHijo(new Nodo("else","tk_else"));
																																					this.$.AgregarHijo(new Nodo("{","llave_izq"));
																																					this.$.AgregarHijo($$[$0-1]);
																																					this.$.AgregarHijo(new Nodo("}","llave_der"));

																																				
break;
case 28:
this.$ = new Nodo("SENTENCIA_CONTROL");
				  																					   							this.$.AgregarHijo(new Nodo("if","tk_if"));
																										 						this.$.AgregarHijo(new Nodo("(","par_izq"));
																										 						this.$.AgregarHijo($$[$0-6]);
																																this.$.AgregarHijo(new Nodo(")","par_der"));
																																this.$.AgregarHijo(new Nodo("{","llave_izq"));
																																this.$.AgregarHijo($$[$0-3]);
																																this.$.AgregarHijo(new Nodo("}","llave_der"));
																																this.$.AgregarHijo(new Nodo("else","tk_else"));
																																this.$.AgregarHijo($$[$0]);
					
				
break;
case 29:
this.$ = new Nodo("DECLARACION");
														this.$.AgregarHijo($$[$0-2]);
														this.$.AgregarHijo($$[$0-1]);
														this.$.AgregarHijo(new Nodo(";","punto_coma"));
break;
case 30:
 this.$ = new Nodo("DECLARACION");
																			this.$.AgregarHijo($$[$0-4]);
																			this.$.AgregarHijo($$[$0-3]);
																			this.$.AgregarHijo(new Nodo("=","igual"));
																			this.$.AgregarHijo($$[$0-1]);
																			 this.$.AgregarHijo(new Nodo(";","punto_coma"));
break;
case 31:
this.$ = new Nodo("DECLARACION");
																 this.$.AgregarHijo($$[$0-3]);
																this.$.AgregarHijo(new Nodo("=","igual"));
																this.$.AgregarHijo($$[$0-1]);
																this.$.AgregarHijo(new Nodo(";","punto_coma"));
break;
case 32:
 	  this.$ = new Nodo("DECLARACION");
														  this.$.AgregarHijo(new Nodo($$[$0-1],"Id"));
														  this.$.AgregarHijo(new Nodo("+","mas"));
								   						  this.$.AgregarHijo(new Nodo("+","mas"));
														  this.$.AgregarHijo(new Nodo(";","punto_coma"));
break;
case 33:
  this.$ = new Nodo("DECLARACION");
														  this.$.AgregarHijo(new Nodo($$[$0-1],"Id"));
														  this.$.AgregarHijo(new Nodo("-","menos"));
								   						  this.$.AgregarHijo(new Nodo("-","menos"));
														  this.$.AgregarHijo(new Nodo(";","punto_coma"));
															  
break;
case 34:
 this.$ = new Nodo("DECLARACION_CONTADOR"); 
							      this.$.AgregarHijo(new Nodo("+","mas"));
								   this.$.AgregarHijo(new Nodo("+","mas")); 
break;
case 35:
 this.$ = new Nodo("DECLARACION_CONTADOR");
					 				this.$.AgregarHijo(new Nodo("-","menos"));
					  				this.$.AgregarHijo(new Nodo("-","menos")); 
break;
case 36:
this.$ = new Nodo("LISTA_VARIABLES");
													  this.$.AgregarHijo($$[$0-2]);
													  this.$.AgregarHijo(new Nodo(",","coma"));
													  this.$.AgregarHijo(new Nodo($$[$0],"Id"));
break;
case 37:
this.$ = new Nodo("LISTA_VARIABLES");
						this.$.AgregarHijo(new Nodo($$[$0],"Id"));
break;
case 38:
 this.$ = new Nodo("PARAMETROS_METODO_FUNCION");
											      this.$.AgregarHijo($$[$0-2]);
												  this.$.AgregarHijo(new Nodo($$[$0-1],"Id"));
												  this.$.AgregarHijo($$[$0]); 
break;
case 39:
this.$ = new Nodo("PARAMETROS_METODO_FUNCION");
											      this.$.AgregarHijo($$[$0-1]);
												  this.$.AgregarHijo(new Nodo($$[$0],"Id"));
break;
case 41:
this.$ = new Nodo("L_PARAMETROS_METODO_FUNCION");
																						this.$.AgregarHijo($$[$0-3]);
																						this.$.AgregarHijo(new Nodo(",","coma"));
																						this.$.AgregarHijo($$[$0-1]);
																						this.$.AgregarHijo(new Nodo($$[$0],"Id")); 
break;
case 42:
 this.$ = new Nodo("L_PARAMETROS_METODO_FUNCION");
															this.$.AgregarHijo(new Nodo(",","comma"));
															this.$.AgregarHijo($$[$0-1]);
															this.$.AgregarHijo(new Nodo($$[$0],"Id")); 
break;
case 43:
 
		this.$ = new Nodo("LLAMADA_METODO");
		this.$.AgregarHijo(new Nodo($$[$0-4],"id"));
		this.$.AgregarHijo(new Nodo("(","par_izq"));
		this.$.AgregarHijo($$[$0-2]);
		this.$.AgregarHijo(new Nodo(")","par_der"));
		this.$.AgregarHijo(new Nodo(";","punto_coma"));
break;
case 44:
 this.$= new Nodo("LLAMADA_PARAMETRO","");
				 				 						  this.$.AgregarHijo($$[$0-1]);
															this.$.AgregarHijo($$[$0]);  
break;
case 45:
this.$= new Nodo("LLAMADA_PARAMETRO","");
				 				 this.$.AgregarHijo($$[$0]);
break;
case 47:
 this.$ = new Nodo("LISTA_LLAMADA_PARAMETRO","");
																	  this.$.AgregarHijo($$[$0-2]);
																	  this.$.AgregarHijo(new Nodo(",","comma"))
																	  this.$.AgregarHijo($$[$0]);
break;
case 48:
this.$ = new Nodo("LISTA_LLAMADA_PARAMETRO","");
									 this.$.AgregarHijo(new Nodo(",","comma"));
									 this.$.AgregarHijo($$[$0]);
break;
case 49:
this.$ = new Nodo("EXP_LOGICA","");
										 	  	this.$.AgregarHijo($$[$0-2]);
											  	this.$.AgregarHijo(new Nodo("&&","op_and"));
											  	this.$.AgregarHijo($$[$0]);  
break;
case 50:
this.$ = new Nodo("EXP_LOGICA","");
										 	  	this.$.AgregarHijo($$[$0-2]);
											  	this.$.AgregarHijo(new Nodo("||","op_or"));
											  	this.$.AgregarHijo($$[$0]);  
break;
case 51:
this.$ = new Nodo("EXP_LOGICA","");
												 this.$.AgregarHijo(new Nodo("!","not"));
												 this.$.AgregarHijo($$[$0]);  
break;
case 52:
 this.$ = new Nodo("EXP_LOGICA","");
												this.$.AgregarHijo($$[$0]); 
break;
case 53:
 this.$ = new Nodo("EXP_RELACIONAL","");
										 	  this.$.AgregarHijo($$[$0-2]);
											  this.$.AgregarHijo(new Nodo(">","mayor"));
											  this.$.AgregarHijo($$[$0]); 
break;
case 54:
 this.$ = new Nodo("EXP_RELACIONAL","");
										 	  this.$.AgregarHijo($$[$0-2]);
											  this.$.AgregarHijo(new Nodo("<","menor"));
											  this.$.AgregarHijo($$[$0]); 
break;
case 55:
 this.$ = new Nodo("EXP_RELACIONAL","");
										 	  this.$.AgregarHijo($$[$0-2]);
											  this.$.AgregarHijo(new Nodo(">=","mayor_igual"));
											  this.$.AgregarHijo($$[$0]);  
break;
case 56:
 this.$ = new Nodo("EXP_RELACIONAL","");
										 	  this.$.AgregarHijo($$[$0-2]);
											  this.$.AgregarHijo(new Nodo("<=","menor_igual"));
											  this.$.AgregarHijo($$[$0]); 
break;
case 57:
 this.$ = new Nodo("EXP_RELACIONAL","");
										 	  			  this.$.AgregarHijo($$[$0-2]);
											  			  this.$.AgregarHijo(new Nodo("==","igual_igual"));
											  			  this.$.AgregarHijo($$[$0]);  
break;
case 58:
 this.$ = new Nodo("EXP_RELACIONAL","");
										 	  			  this.$.AgregarHijo($$[$0-2]);
											  			  this.$.AgregarHijo(new Nodo("!=","not_igual"));
											  			  this.$.AgregarHijo($$[$0]); 
break;
case 59:
this.$ = new Nodo("EXP_RELACIONAL","");
					this.$.AgregarHijo($$[$0]);
break;
case 60:
 this.$ = new Nodo("EXP_NUMERICA","");
										 	this.$.AgregarHijo($$[$0-2]);
											this.$.AgregarHijo(new Nodo("+","mas"));
											this.$.AgregarHijo($$[$0]);
										 
break;
case 61:
  this.$ = new Nodo("EXP_NUMERICA","");
										 		this.$.AgregarHijo($$[$0-2]);
												this.$.AgregarHijo(new Nodo("-","menos"));
												this.$.AgregarHijo($$[$0]); 
break;
case 62:
  this.$ = new Nodo("EXP_NUMERICA","");
										 		this.$.AgregarHijo($$[$0-2]);
												this.$.AgregarHijo(new Nodo("*","por"));
												this.$.AgregarHijo($$[$0]); 
break;
case 63:
  this.$ = new Nodo("EXP_NUMERICA","");
										 		this.$.AgregarHijo($$[$0-2]);
												this.$.AgregarHijo(new Nodo("/","dividido"));
												this.$.AgregarHijo($$[$0]); 
break;
case 64:
 this.$ = new Nodo("EXP_NUMERICA","");
											this.$.AgregarHijo(new Nodo("-","menos"));
											this.$.AgregarHijo($$[$0]);
											
										 
break;
case 65:
this.$ = new Nodo("EXP_NUMERICA","");
										 		this.$.AgregarHijo($$[$0-2]);
												this.$.AgregarHijo(new Nodo("^","XOR"));
												this.$.AgregarHijo($$[$0]);
break;
case 66:
 this.$ = new Nodo("EXP_NUMERICA","");
													this.$.AgregarHijo(new Nodo("(","parentesis_izq"));
													this.$.AgregarHijo($$[$0-1]);
													this.$.AgregarHijo(new Nodo(")","parentesis_der"));
												 
break;
case 67:
  this.$ = new Nodo("EXP_NUMERICA","");
								   this.$.AgregarHijo(new Nodo($$[$0],"entero")); 
break;
case 68:
 this.$ = new Nodo("EXP_NUMERICA","");
								   this.$.AgregarHijo(new Nodo($$[$0],"decimal")) 
break;
case 69:
 this.$ = new Nodo("EXP_NUMERICA","");
								   this.$.AgregarHijo(new Nodo($$[$0],"cadena"))
break;
case 70:
 this.$ = new Nodo("EXP_NUMERICA","");
								   this.$.AgregarHijo(new Nodo($$[$0],"caracter"))
break;
case 71:
 this.$ = new Nodo("EXP_NUMERICA","");
								   this.$.AgregarHijo(new Nodo($$[$0],"id")); 
break;
case 72:
 this.$ = new Nodo("TIPO_DATO","");
					this.$.AgregarHijo(new Nodo($$[$0],"int")); 
break;
case 73:
 this.$ = new Nodo("TIPO_DATO","");
					this.$.AgregarHijo(new Nodo($$[$0],"double"));
break;
case 74:
 this.$ = new Nodo("TIPO_DATO","");
					this.$.AgregarHijo(new Nodo($$[$0],"String")); 
break;
case 75:
 this.$ = new Nodo("TIPO_DATO","");
					this.$.AgregarHijo(new Nodo($$[$0],"boolean")); 
break;
case 76:
 this.$ = new Nodo("TIPO_DATO","");
					this.$.AgregarHijo(new Nodo($$[$0],"char")); 
break;
case 77:
 this.$ = new Nodo("SENTENCIA_RETURN","");
											this.$.AgregarHijo(new Nodo("return","tk_return"));
											this.$.AgregarHijo($$[$0]);
break;
case 78:
this.$ = new Nodo("SENTENCIA_RETURN","");
											this.$.AgregarHijo(new Nodo("return","tk_return"));
break;
case 79:
 this.$ = new Nodo("SENTENCIA_BC","");
									this.$.AgregarHijo($$[$0-1]);
									this.$.AgregarHijo($$[$0]);  
break;
case 80:
 this.$ = new Nodo("SENTENCIA_BC","");
									   this.$.AgregarHijo($$[$0-1]);
									   this.$.AgregarHijo($$[$0]); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1},{1:[3]},{2:$V0,5:[1,6],6:7,7:$V1},o($V2,[2,3]),{8:[1,8],13:[1,9]},{12:[1,10]},{1:[2,1]},o($V2,[2,2]),{9:[1,11]},{9:[1,12]},o($V2,[2,6]),{10:[1,13]},{10:[1,14]},{7:$V3,9:$V4,11:15,15:16,21:19,26:$V5,30:18,49:20,74:$V6,75:$V7,76:$V8,77:$V9},{9:$Va,14:27,31:28},{7:$V3,9:$V4,12:[1,30],15:31,21:19,26:$V5,30:18,49:20,74:$V6,75:$V7,76:$V8,77:$V9},o($Vb,[2,8]),{16:[1,32],21:33,24:[1,34],26:$V5,74:$V6,75:$V7,76:$V8,77:$V9},o($Vb,[2,12]),{9:[1,36],49:35},{50:[1,37],53:$Vc},o($Vd,$Ve,{51:$Vf,52:$Vg}),{9:[2,72]},{9:[2,73]},{9:[2,74]},{9:[2,75]},{9:[2,76]},{9:$Va,12:[1,41],31:42},o($Vh,[2,14]),{17:$Vi},o($V2,[2,4]),o($Vb,[2,7]),{9:[1,44]},{9:[1,45]},{16:[1,46]},{23:[1,47],50:[1,48],53:$Vc},o($Vj,$Ve),{9:$Vk,17:$Vl,45:49,52:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{9:[1,57]},{51:[1,58]},{52:[1,59]},o($V2,[2,5]),o($Vh,[2,13]),{9:$Vk,17:$Vl,19:[2,46],45:61,52:$Vm,55:60,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{17:[1,62]},{17:[1,63]},{25:[1,64]},o($Vr,[2,29]),{9:$Vk,17:$Vl,45:65,52:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{23:[1,66],51:$Vs,52:$Vt,67:$Vu,68:$Vv,69:$Vw},{9:$Vk,17:$Vl,45:72,52:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{9:$Vk,17:$Vl,45:73,52:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},o($Vx,[2,67]),o($Vx,[2,68]),o($Vx,[2,69]),o($Vx,[2,70]),o($Vx,[2,71]),o($Vj,[2,36]),{23:[1,74]},{23:[1,75]},{19:[1,76]},{19:[2,45],51:$Vs,52:$Vt,53:[1,78],56:77,67:$Vu,68:$Vv,69:$Vw},{18:79,19:$Vy,21:80,26:$V5,74:$V6,75:$V7,76:$V8,77:$V9},{18:81,19:$Vy,21:80,26:$V5,74:$V6,75:$V7,76:$V8,77:$V9},{17:[1,82]},{23:[1,83],51:$Vs,52:$Vt,67:$Vu,68:$Vv,69:$Vw},o($Vr,[2,31]),{9:$Vk,17:$Vl,45:84,52:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{9:$Vk,17:$Vl,45:85,52:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{9:$Vk,17:$Vl,45:86,52:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{9:$Vk,17:$Vl,45:87,52:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{9:$Vk,17:$Vl,45:88,52:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},o($Vx,[2,64]),{19:[1,89],51:$Vs,52:$Vt,67:$Vu,68:$Vv,69:$Vw},o($Vr,[2,32]),o($Vr,[2,33]),{23:[1,90]},{19:[2,44],53:[1,91]},{9:$Vk,17:$Vl,45:92,52:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{19:[1,93]},{9:[1,94]},{19:[1,95]},{26:[1,96]},o($Vr,[2,30]),o($Vz,[2,60],{67:$Vu,68:$Vv,69:$Vw}),o($Vz,[2,61],{67:$Vu,68:$Vv,69:$Vw}),o($VA,[2,62],{69:$Vw}),o($VA,[2,63],{69:$Vw}),o($Vx,[2,65]),o($Vx,[2,66]),o($VB,[2,43]),{9:$Vk,17:$Vl,45:97,52:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},o($VC,[2,48],{51:$Vs,52:$Vt,67:$Vu,68:$Vv,69:$Vw}),{10:[1,98]},{19:[2,39],53:[1,100],54:99},{10:[1,101]},{27:[1,102]},o($VC,[2,47],{51:$Vs,52:$Vt,67:$Vu,68:$Vv,69:$Vw}),{9:$VD,20:103,21:19,26:$V5,30:105,31:106,32:104,33:$VE,37:$VF,38:$VG,39:110,40:111,41:$VH,47:$VI,49:20,74:$V6,75:$V7,76:$V8,77:$V9},{19:[2,38],53:[1,115]},{21:116,26:$V5,74:$V6,75:$V7,76:$V8,77:$V9},{9:$VD,20:117,21:19,26:$V5,30:105,31:106,32:104,33:$VE,37:$VF,38:$VG,39:110,40:111,41:$VH,47:$VI,49:20,74:$V6,75:$V7,76:$V8,77:$V9},{28:[1,118]},{9:$VD,12:[1,119],21:19,26:$V5,30:105,31:106,32:120,33:$VE,37:$VF,38:$VG,39:110,40:111,41:$VH,47:$VI,49:20,74:$V6,75:$V7,76:$V8,77:$V9},o($VB,[2,16]),o($VB,[2,17]),o($VB,[2,18]),{17:[1,121]},{17:[1,122]},{10:[1,123]},o($VB,[2,22]),o($VB,[2,23]),o($Vd,$Ve,{17:$Vi,51:$Vf,52:$Vg}),{17:[1,124]},{42:[1,125]},{21:126,26:$V5,74:$V6,75:$V7,76:$V8,77:$V9},{9:[1,127]},{9:$VD,21:19,22:128,26:$V5,30:105,31:106,32:120,33:$VE,37:$VF,38:$VG,39:110,40:111,41:$VH,47:$VI,49:20,74:$V6,75:$V7,76:$V8,77:$V9,78:[1,129]},{29:[1,130]},o($Vb,[2,9]),o($VB,[2,15]),{9:$V4,21:19,26:$V5,30:131,49:20,74:$V6,75:$V7,76:$V8,77:$V9},{9:$Vk,17:$Vl,34:132,45:135,52:$Vm,57:133,60:$VJ,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{9:$VD,20:136,21:19,26:$V5,30:105,31:106,32:104,33:$VE,37:$VF,38:$VG,39:110,40:111,41:$VH,47:$VI,49:20,74:$V6,75:$V7,76:$V8,77:$V9},{9:$Vk,17:$Vl,34:137,45:135,52:$Vm,57:133,60:$VJ,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{43:[1,138]},{9:[1,139]},o($VC,[2,42]),{23:[1,140]},{9:$Vk,17:$Vl,23:[2,78],45:141,52:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{19:[1,142]},{9:$Vk,17:$Vl,34:143,45:135,52:$Vm,57:133,60:$VJ,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{19:[1,144]},o($VK,[2,52],{58:[1,145],59:[1,146]}),{9:$Vk,17:$Vl,45:135,52:$Vm,57:147,70:$Vn,71:$Vo,72:$Vp,73:$Vq},o($VL,[2,59],{51:$Vs,52:$Vt,61:[1,148],62:[1,149],63:[1,150],64:[1,151],65:[1,152],66:[1,153],67:$Vu,68:$Vv,69:$Vw}),{9:$VD,12:$VM,21:19,26:$V5,30:105,31:106,32:120,33:$VE,36:154,37:$VF,38:$VG,39:110,40:111,41:$VH,47:$VI,49:20,74:$V6,75:$V7,76:$V8,77:$V9,79:$VN,80:$VO},{19:[1,157]},{42:[1,158]},o($VC,[2,41]),{12:[1,159]},{23:[2,77],51:$Vs,52:$Vt,67:$Vu,68:$Vv,69:$Vw},{10:[1,160]},{23:[1,161]},{10:[1,162]},{9:$Vk,17:$Vl,45:135,52:$Vm,57:163,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{9:$Vk,17:$Vl,45:135,52:$Vm,57:164,70:$Vn,71:$Vo,72:$Vp,73:$Vq},o($VK,[2,51]),{9:$Vk,17:$Vl,45:165,52:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{9:$Vk,17:$Vl,45:166,52:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{9:$Vk,17:$Vl,45:167,52:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{9:$Vk,17:$Vl,45:168,52:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{9:$Vk,17:$Vl,45:169,52:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{9:$Vk,17:$Vl,45:170,52:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{12:[1,171]},{23:[1,172]},{23:[1,173]},{10:[1,174]},{44:[1,175],46:[1,176]},o($Vb,[2,10]),{9:$VD,20:177,21:19,26:$V5,30:105,31:106,32:104,33:$VE,37:$VF,38:$VG,39:110,40:111,41:$VH,47:$VI,49:20,74:$V6,75:$V7,76:$V8,77:$V9},{9:[1,178]},{9:$VD,20:179,21:19,26:$V5,30:105,31:106,32:104,33:$VE,37:$VF,38:$VG,39:110,40:111,41:$VH,47:$VI,49:20,74:$V6,75:$V7,76:$V8,77:$V9},o($VK,[2,49]),o($VK,[2,50]),o($VL,[2,53],{51:$Vs,52:$Vt,67:$Vu,68:$Vv,69:$Vw}),o($VL,[2,54],{51:$Vs,52:$Vt,67:$Vu,68:$Vv,69:$Vw}),o($VL,[2,55],{51:$Vs,52:$Vt,67:$Vu,68:$Vv,69:$Vw}),o($VL,[2,56],{51:$Vs,52:$Vt,67:$Vu,68:$Vv,69:$Vw}),o($VL,[2,57],{51:$Vs,52:$Vt,67:$Vu,68:$Vv,69:$Vw}),o($VL,[2,58],{51:$Vs,52:$Vt,67:$Vu,68:$Vv,69:$Vw}),{37:[1,180]},{12:[2,79]},{12:[2,80]},{9:$VD,21:19,26:$V5,30:105,31:106,32:181,33:$VE,37:$VF,38:$VG,39:110,40:111,41:$VH,47:$VI,49:20,74:$V6,75:$V7,76:$V8,77:$V9},{17:[1,182]},{17:[1,183]},{9:$VD,12:[1,184],21:19,26:$V5,30:105,31:106,32:120,33:$VE,37:$VF,38:$VG,39:110,40:111,41:$VH,47:$VI,49:20,74:$V6,75:$V7,76:$V8,77:$V9},{35:185,51:[1,186],52:[1,187]},{9:$VD,12:$VM,21:19,26:$V5,30:105,31:106,32:120,33:$VE,36:188,37:$VF,38:$VG,39:110,40:111,41:$VH,47:$VI,49:20,74:$V6,75:$V7,76:$V8,77:$V9,79:$VN,80:$VO},{17:[1,189]},{12:[1,190]},{9:$Vk,17:$Vl,45:191,52:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},{9:$Vk,17:$Vl,45:192,52:$Vm,70:$Vn,71:$Vo,72:$Vp,73:$Vq},o($Vb,[2,11]),{19:[1,193]},{51:[1,194]},{52:[1,195]},{12:[1,196]},{9:$Vk,17:$Vl,34:197,45:135,52:$Vm,57:133,60:$VJ,70:$Vn,71:$Vo,72:$Vp,73:$Vq},o($VB,[2,26],{48:[1,198]}),{19:[1,199],51:$Vs,52:$Vt,67:$Vu,68:$Vv,69:$Vw},{19:[1,200],51:$Vs,52:$Vt,67:$Vu,68:$Vv,69:$Vw},{10:[1,201]},{19:[2,34]},{19:[2,35]},o($VB,[2,20]),{19:[1,202]},{10:[1,203],39:204,47:$VI},{23:[1,205]},{23:[1,206]},{9:$VD,20:207,21:19,26:$V5,30:105,31:106,32:104,33:$VE,37:$VF,38:$VG,39:110,40:111,41:$VH,47:$VI,49:20,74:$V6,75:$V7,76:$V8,77:$V9},{23:[1,208]},{9:$VD,21:19,26:$V5,30:105,31:106,32:209,33:$VE,37:$VF,38:$VG,39:110,40:111,41:$VH,47:$VI,49:20,74:$V6,75:$V7,76:$V8,77:$V9},o($VB,[2,28]),o($VB,[2,24]),o($VB,[2,25]),{9:$VD,12:$VM,21:19,26:$V5,30:105,31:106,32:120,33:$VE,36:210,37:$VF,38:$VG,39:110,40:111,41:$VH,47:$VI,49:20,74:$V6,75:$V7,76:$V8,77:$V9,79:$VN,80:$VO},o($VB,[2,21]),{12:[1,211]},{12:[1,212]},o($VB,[2,27]),o($VB,[2,19])],
defaultActions: {6:[2,1],22:[2,72],23:[2,73],24:[2,74],25:[2,75],26:[2,76],172:[2,79],173:[2,80],194:[2,34],195:[2,35]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const Nodo = require('./AstTree');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// comentario multiple l√≠neas		
break;
case 1:// comentario simple l√≠nea
break;
case 2:return 7;
break;
case 3:return 24;
break;
case 4:return 8;
break;
case 5:return 13;
break;
case 6:return 16;
break;
case 7:return 25;
break;
case 8:return 29;
break;
case 9:return 41;
break;
case 10:return 43;
break;
case 11:return 46;
break;
case 12:return 44;
break;
case 13:return 74;
break;
case 14:return 75;
break;
case 15:return 77;
break;
case 16:return 76;
break;
case 17:return 26;
break;
case 18:return 33;
break;
case 19:return 37;
break;
case 20:return 38;
break;
case 21:return 79;
break;
case 22:return 78;
break;
case 23:return 80;
break;
case 24:return 47;
break;
case 25:return 48;
break;
case 26:return 23; 
break;
case 27:return 17; 
break;
case 28:return 19; 
break;
case 29:return 27; 
break;
case 30:return 28; 
break;
case 31:return 10
break;
case 32:return 12
break;
case 33:return 53; 
break;
case 34:return 42; 
break;
case 35:return 63;
break;
case 36:return 64;
break;
case 37:return 58;
break;
case 38:return 59;
break;
case 39:return 66;
break;
case 40:return 65;
break;
case 41:return 51;
break;
case 42:return 52;
break;
case 43:return 67;
break;
case 44:return 68;
break;
case 45:return 69;
break;
case 46:return 61;
break;
case 47:return 62;
break;
case 48:return 50; 
break;
case 49:return 60;
break;
case 50: /*ignore */
break;
case 51:/*it will count */
break;
case 52:// se ignoran espacios en blanco
break;
case 53:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 72; 
break;
case 54:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 73; 
break;
case 55:return 71; 
break;
case 56:return 70; 
break;
case 57:return 9; 
break;
case 58:return 5; 
break;
case 59: console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\/\/.*)/i,/^(?:public\b)/i,/^(?:static\b)/i,/^(?:class\b)/i,/^(?:interface\b)/i,/^(?:void\b)/i,/^(?:main\b)/i,/^(?:args\b)/i,/^(?:System\b)/i,/^(?:out\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:String\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:return\b)/i,/^(?:continue\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\.)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:!)/i,/^(?:[ \r\t\f]+)/i,/^(?:\n)/i,/^(?:\s+)/i,/^(?:"[^\"]*")/i,/^(?:'[^']')/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}