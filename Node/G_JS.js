/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var G_JS = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,4],$V2=[1,5],$V3=[1,6],$V4=[2,5,7,13,14],$V5=[1,27],$V6=[1,21],$V7=[1,29],$V8=[1,25],$V9=[1,26],$Va=[1,42],$Vb=[1,33],$Vc=[1,36],$Vd=[1,37],$Ve=[1,38],$Vf=[1,39],$Vg=[1,40],$Vh=[1,41],$Vi=[1,31],$Vj=[1,32],$Vk=[1,34],$Vl=[1,35],$Vm=[1,46],$Vn=[1,47],$Vo=[1,48],$Vp=[2,7,9,13,14,15,23,31,66,70,71,72,73,84,85,86,87,88],$Vq=[2,83],$Vr=[1,61],$Vs=[21,25],$Vt=[1,63],$Vu=[1,64],$Vv=[1,65],$Vw=[1,66],$Vx=[1,67],$Vy=[1,68],$Vz=[1,69],$VA=[1,70],$VB=[1,71],$VC=[1,72],$VD=[1,73],$VE=[1,74],$VF=[1,75],$VG=[1,76],$VH=[1,77],$VI=[9,23,66,70,71,72,73,84],$VJ=[1,79],$VK=[21,25,40,65,66,67,68,69,74,75,76,77,78,79,80,81,82,83],$VL=[2,7,15,22,31,85,86,87,88],$VM=[21,40],$VN=[21,25,40,65,66,74,75,76,77,78,79,80,81,82,83],$VO=[21,25,40,65,66,67,68,74,75,76,77,78,79,80,81,82,83],$VP=[21,25,40,74,75,80,81],$VQ=[21,25,40,74,75,76,77,78,79,80,81],$VR=[2,32],$VS=[25,40],$VT=[1,150],$VU=[1,169],$VV=[1,167],$VW=[1,168],$VX=[1,171],$VY=[1,170],$VZ=[1,174],$V_=[1,172],$V$=[1,173],$V01=[1,175],$V11=[1,176],$V21=[1,177],$V31=[2,9,13,14,15,23,31,47,55,58,63,64,66,70,71,72,73,84,85,86,87,88,89,90,91],$V41=[1,195];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"LISTA_TIPO_INSTRUCCION":4,"EOF":5,"TIPO_INSTRUCCION":6,"tk_public":7,"tk_class":8,"identificador":9,"BLOQUESENTENCIAS_PADRE":10,"tk_interface":11,"BLOQUESENTENCIAS_PADRE_I":12,"cm_multiple":13,"cm_simple":14,"llave_der":15,"llave_izq":16,"LISTA_SUB_INSTRUCCION":17,"LISTA_SUB_INSTRUCCION_I":18,"SUB_INSTRUCCION_I":19,"METODO_INTERFAZ":20,"punto_coma":21,"tk_void":22,"parentesis_izq":23,"PARAMETROS_METODO_FUNCION":24,"parentesis_der":25,"TYPE":26,"SUB_INSTRUCCION":27,"BLOQUESENTENCIAS_HIJO":28,"tk_static":29,"tk_main":30,"tk_String":31,"corchete_izq":32,"corchete_der":33,"tk_args":34,"DEFDECLARACION":35,"DEFASIGNACION":36,"LLAMADA_METODO":37,"EXPRESION":38,"L_PARAMETROS_METODO_FUNCION":39,"coma":40,"INSTRUCCIONES":41,"INSTRUCCION":42,"DEFIF":43,"DEFWHILE":44,"DEFFOR":45,"DEFDO":46,"tk_while":47,"DEFPRINT":48,"SENTENCIA_RETURN":49,"SENTENCIA_BC":50,"LISTA_VARIABLES":51,"igual":52,"LLAMADA_PARAMETRO":53,"LISTA_LLAMADA_PARAMETRO":54,"tk_if":55,"BLOQUESENTENCIAS":56,"tk_else":57,"tk_System":58,"punto":59,"tk_out":60,"tk_println":61,"tk_print":62,"tk_for":63,"tk_do":64,"mas":65,"MENOS":66,"por":67,"dividido":68,"op_xor":69,"entero":70,"decimal":71,"Caracter":72,"CADENA":73,"op_igual_igual":74,"op_not_igual":75,"menor":76,"mayor":77,"op_menor_igual":78,"op_mayorigual":79,"op_and":80,"op_or":81,"mas_mas":82,"menos_menos":83,"op_not":84,"tk_int":85,"tk_double":86,"tk_boolean":87,"tk_char":88,"tk_return":89,"tk_break":90,"tk_continue":91,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"tk_public",8:"tk_class",9:"identificador",11:"tk_interface",13:"cm_multiple",14:"cm_simple",15:"llave_der",16:"llave_izq",21:"punto_coma",22:"tk_void",23:"parentesis_izq",25:"parentesis_der",29:"tk_static",30:"tk_main",31:"tk_String",32:"corchete_izq",33:"corchete_der",34:"tk_args",40:"coma",47:"tk_while",52:"igual",55:"tk_if",57:"tk_else",58:"tk_System",59:"punto",60:"tk_out",61:"tk_println",62:"tk_print",63:"tk_for",64:"tk_do",65:"mas",66:"MENOS",67:"por",68:"dividido",69:"op_xor",70:"entero",71:"decimal",72:"Caracter",73:"CADENA",74:"op_igual_igual",75:"op_not_igual",76:"menor",77:"mayor",78:"op_menor_igual",79:"op_mayorigual",80:"op_and",81:"op_or",82:"mas_mas",83:"menos_menos",84:"op_not",85:"tk_int",86:"tk_double",87:"tk_boolean",88:"tk_char",89:"tk_return",90:"tk_break",91:"tk_continue"},
productions_: [0,[3,2],[4,2],[4,1],[6,4],[6,4],[6,1],[6,1],[6,2],[10,3],[12,3],[18,2],[18,1],[19,2],[19,2],[20,6],[20,5],[20,6],[20,5],[17,2],[17,1],[27,7],[27,7],[27,11],[27,2],[27,2],[27,2],[27,1],[27,1],[27,2],[24,3],[24,2],[24,0],[39,4],[39,3],[28,3],[41,2],[41,1],[42,2],[42,2],[42,2],[42,1],[42,1],[42,1],[42,6],[42,2],[42,2],[42,2],[42,1],[42,1],[42,2],[35,2],[36,3],[36,1],[51,3],[51,5],[51,3],[51,1],[37,4],[53,2],[53,1],[53,0],[54,3],[54,2],[43,5],[43,7],[43,7],[48,8],[48,8],[44,5],[45,9],[46,2],[56,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,2],[38,1],[38,1],[38,1],[38,1],[38,1],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,2],[38,2],[38,2],[38,3],[26,1],[26,1],[26,1],[26,1],[26,1],[49,2],[49,1],[50,1],[50,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

	
		// cuando se haya reconocido la entrada completa retornamos la entrada traducida
		return $$[$0-1];
	
break;
case 2:
 this.$ = `${$$[$0-1]}\n${$$[$0]}`; 
break;
case 3:
 this.$ = `\n${$$[$0]}`; 
break;
case 4:
 this.$ = `${$$[$0-2]} ${$$[$0-1]} ${$$[$0]}`;
break;
case 5:
 this.$ = ``;
break;
case 6: case 7: case 27: case 28: case 48: case 49:
this.$ =`${$$[$0]}\n`; 
break;
case 8: case 14: case 17: case 18: case 29: case 50: case 61:
this.$ = ``;
break;
case 9:
 this.$ = `{\n${$$[$0-1]}\n}`; 
break;
case 10: case 11: case 12: case 13:
 this.$ = ``; 
break;
case 15:
this.$ = ``;  
break;
case 16:
this.$ = ``; 
break;
case 19: case 36:
 this.$ = `${$$[$0-1]}${$$[$0]}`; 
break;
case 20: case 37: case 79: case 80: case 81: case 82:
 this.$ = `${$$[$0]}`; 
break;
case 21:
this.$=`\t ${$$[$0-4]}${$$[$0-3]}${$$[$0-2]}${$$[$0-1]}${$$[$0]}`;
break;
case 22:
this.$=`\t function ${$$[$0-4]}${$$[$0-3]}${$$[$0-2]}${$$[$0-1]}${$$[$0]}`;
break;
case 23:
this.$=`\t Main ${$$[$0-6]}${$$[$0-1]}${$$[$0]}`;
break;
case 24:
this.$ =`\t${$$[$0-1]}${$$[$0]}\n`; 
break;
case 25: case 26:
 this.$ = `\t${$$[$0-1]}${$$[$0]}\n`; 
break;
case 30:
 this.$=`${$$[$0-1]}${$$[$0]}`; 
break;
case 31: case 53:
this.$=`${$$[$0]}`;
break;
case 32:
this.$=``;
break;
case 33:
this.$=`${$$[$0-3]}${$$[$0-2]}${$$[$0]}`; 
break;
case 34:
this.$=`${$$[$0-2]}${$$[$0]}` ; 
break;
case 35:
 this.$ = `{\n${$$[$0-1]}\t}\n`; 
break;
case 38: case 39:
 this.$ = `\t\t${$$[$0-1]}${$$[$0]}\n`; 
break;
case 40: case 45: case 46: case 47:
 this.$ = `\t\t${$$[$0-1]};\n`; 
break;
case 41: case 42: case 43:
 this.$ = `\t\t${$$[$0]}\n`; 
break;
case 44:
this.$ = `\t\t${$$[$0-5]}${$$[$0-4]}${$$[$0-3]}${$$[$0-2]}${$$[$0-1]};\n`;
break;
case 51:
this.$ = `var ${$$[$0]}`;
break;
case 52:
 this.$ = `${$$[$0-2]}${$$[$0-1]}${$$[$0]}`; 
break;
case 54: case 56:
this.$ =`${$$[$0-2]}${$$[$0-1]}${$$[$0]}`;
break;
case 55:
this.$ = `${$$[$0-4]}${$$[$0-3]}${$$[$0-2]}${$$[$0-1]}${$$[$0]}`;
break;
case 57:
this.$ =`${$$[$0]}`;
break;
case 58:
this.$= `${$$[$0-3]}${$$[$0-2]}${$$[$0-1]}${$$[$0]}`;
break;
case 59:
 this.$ = `${$$[$0-1]}${$$[$0]}`;  
break;
case 60:
this.$ = `${$$[$0]}`;
break;
case 62:
 this.$ =`${$$[$0-2]}${$$[$0-1]}${$$[$0]}`;
break;
case 63:
this.$ = `,${$$[$0]}`;
break;
case 64:
 this.$ = `${$$[$0-4]}${$$[$0-3]}${$$[$0-2]}${$$[$0-1]}${$$[$0]}`; 
break;
case 65: case 66:
 this.$ = `${$$[$0-6]}${$$[$0-5]}${$$[$0-4]}${$$[$0-3]}${$$[$0-2]}${$$[$0-1]}${$$[$0]}`; 
break;
case 67: case 68:
this.$ = `console.log(${$$[$0-1]})`;
break;
case 69:
 this.$ = `while ( ${$$[$0-2]} ) \n${$$[$0]}`; 
break;
case 70:
 this.$ = `for ( ${$$[$0-6]};${$$[$0-4]};${$$[$0-2]} )${$$[$0]} `; 
break;
case 71:
 this.$ = `do${$$[$0]}`; 
break;
case 72:
 this.$ = `{\n${$$[$0-1]}\t\t}`; 
break;
case 73:
 this.$ = `${$$[$0-2]} + ${$$[$0]}`; 
break;
case 74:
 this.$ = `${$$[$0-2]} - ${$$[$0]}`; 
break;
case 75:
 this.$ = `${$$[$0-2]} * ${$$[$0]}`; 
break;
case 76:
 this.$ = `${$$[$0-2]} / ${$$[$0]}`; 
break;
case 77:
 this.$ = `${$$[$0-2]} ^ ${$$[$0]}`; 
break;
case 78:
 this.$ = `- ${$$[$0]}`; 
break;
case 83:
 this.$ = $$[$0] 
break;
case 84:
 this.$ = `${$$[$0-2]} == ${$$[$0]}`; 
break;
case 85:
 this.$ = `${$$[$0-2]} != ${$$[$0]}`; 
break;
case 86:
 this.$ = `${$$[$0-2]} < ${$$[$0]}`; 
break;
case 87:
 this.$ = `${$$[$0-2]} > ${$$[$0]}`; 
break;
case 88:
 this.$ = `${$$[$0-2]} <= ${$$[$0]}`; 
break;
case 89:
 this.$ = `${$$[$0-2]} >= ${$$[$0]}`; 
break;
case 90:
 this.$ = `${$$[$0-2]} && ${$$[$0]}`; 
break;
case 91:
 this.$ = `${$$[$0-2]} || ${$$[$0]}`; 
break;
case 92:
this.$ = `${$$[$0-1]}++`; 
break;
case 93:
this.$ = `${$$[$0-1]}--`; 
break;
case 94:
 this.$ = `! ${$$[$0]}`; 
break;
case 95:
 this.$ = `( ${$$[$0-1]} )`; 
break;
case 96:
 this.$ =``; 
break;
case 97:
  this.$ =``; 
break;
case 98: case 100:
  this.$ =``;  
break;
case 99:
 this.$ =``;   
break;
case 101:
 this.$=`return ${$$[$0]}`;
break;
case 102:
this.$ = `return`;
break;
case 103:
 this.$=`break`;  
break;
case 104:
 this.$=`continue`; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1,13:$V2,14:$V3},{1:[3]},{2:$V0,5:[1,8],6:9,7:$V1,13:$V2,14:$V3},o($V4,[2,3]),{8:[1,10],11:[1,11]},o($V4,[2,6]),o($V4,[2,7]),{15:[1,12]},{1:[2,1]},o($V4,[2,2]),{9:[1,13]},{9:[1,14]},o($V4,[2,8]),{10:15,16:[1,16]},{12:17,16:[1,18]},o($V4,[2,4]),{2:$V5,7:$V6,9:$V7,13:$V8,14:$V9,17:19,23:$Va,26:28,27:20,31:$Vb,35:22,36:23,37:24,38:30,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl},o($V4,[2,5]),{2:$Vm,7:$Vn,18:43,19:44,20:45,22:$Vo,26:49,31:$Vb,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{2:$V5,7:$V6,9:$V7,13:$V8,14:$V9,15:[1,50],23:$Va,26:28,27:51,31:$Vb,35:22,36:23,37:24,38:30,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl},o($Vp,[2,20]),{22:[1,52],26:53,29:[1,54],31:$Vb,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{21:[1,55]},{21:[1,56]},{21:[1,57]},o($Vp,[2,27]),o($Vp,[2,28]),{15:[1,58]},{9:[1,60],51:59},o([21,65,66,67,68,69,74,75,76,77,78,79,80,81,82,83],$Vq,{23:[1,62],52:$Vr}),o($Vs,[2,53],{65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH}),o($VI,[2,96]),o($VI,[2,97]),o($VI,[2,98]),o($VI,[2,99]),o($VI,[2,100]),{9:$VJ,23:$Va,38:78,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh},o($VK,[2,79]),o($VK,[2,80]),o($VK,[2,81]),o($VK,[2,82]),{9:$VJ,23:$Va,38:80,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh},{9:$VJ,23:$Va,38:81,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh},{2:$Vm,7:$Vn,15:[1,82],19:83,20:45,22:$Vo,26:49,31:$Vb,85:$Vi,86:$Vj,87:$Vk,88:$Vl},o($VL,[2,12]),{21:[1,84]},{21:[1,85]},{22:[1,86],26:87,31:$Vb,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{9:[1,88]},{9:[1,89]},o($V4,[2,9]),o($Vp,[2,19]),{9:[1,90]},{9:[1,91]},{22:[1,92]},o($Vp,[2,24]),o($Vp,[2,25]),o($Vp,[2,26]),o($Vp,[2,29]),{21:[2,51],40:[1,93]},o($VM,[2,57],{52:[1,94]}),{9:$VJ,23:$Va,38:95,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh},{9:$VJ,23:$Va,25:[2,61],38:97,53:96,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh},{9:$VJ,23:$Va,38:98,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh},{9:$VJ,23:$Va,38:99,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh},{9:$VJ,23:$Va,38:100,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh},{9:$VJ,23:$Va,38:101,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh},{9:$VJ,23:$Va,38:102,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh},{9:$VJ,23:$Va,38:103,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh},{9:$VJ,23:$Va,38:104,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh},{9:$VJ,23:$Va,38:105,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh},{9:$VJ,23:$Va,38:106,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh},{9:$VJ,23:$Va,38:107,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh},{9:$VJ,23:$Va,38:108,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh},{9:$VJ,23:$Va,38:109,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh},{9:$VJ,23:$Va,38:110,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh},o($VK,[2,92]),o($VK,[2,93]),o($VK,[2,78]),o($VK,$Vq),o($VK,[2,94]),{25:[1,111],65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH},o($V4,[2,10]),o($VL,[2,11]),o($VL,[2,13]),o($VL,[2,14]),{9:[1,112]},{9:[1,113]},{23:[1,114]},{23:[1,115]},{23:[1,116]},{23:[1,117]},{30:[1,118]},{9:[1,119]},{9:$VJ,23:$Va,38:120,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh},o($Vs,[2,52],{65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH}),{25:[1,121]},{25:[2,60],40:[1,123],54:122,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH},o($VN,[2,73],{67:$Vv,68:$Vw,69:$Vx}),o($VN,[2,74],{67:$Vv,68:$Vw,69:$Vx}),o($VO,[2,75],{69:$Vx}),o($VO,[2,76],{69:$Vx}),o($VK,[2,77]),o($VP,[2,84],{65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,76:$VA,77:$VB,78:$VC,79:$VD,82:$VG,83:$VH}),o($VP,[2,85],{65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,76:$VA,77:$VB,78:$VC,79:$VD,82:$VG,83:$VH}),o($VQ,[2,86],{65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,82:$VG,83:$VH}),o($VQ,[2,87],{65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,82:$VG,83:$VH}),o($VQ,[2,88],{65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,82:$VG,83:$VH}),o($VQ,[2,89],{65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,82:$VG,83:$VH}),o([21,25,40,80,81],[2,90],{65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,82:$VG,83:$VH}),o([21,25,40,81],[2,91],{65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,82:$VG,83:$VH}),o($VK,[2,95]),{23:[1,124]},{23:[1,125]},{24:126,25:$VR,26:127,31:$Vb,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{24:128,25:$VR,26:127,31:$Vb,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{24:129,25:$VR,26:127,31:$Vb,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{24:130,25:$VR,26:127,31:$Vb,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{23:[1,131]},o($VM,[2,54],{52:[1,132]}),o($VM,[2,56],{65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH}),{21:[2,58]},{25:[2,59],40:[1,133]},{9:$VJ,23:$Va,38:134,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh},{24:135,25:$VR,26:127,31:$Vb,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{24:136,25:$VR,26:127,31:$Vb,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{25:[1,137]},{9:$VJ,23:$Va,38:138,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh},{25:[1,139]},{25:[1,140]},{25:[1,141]},{31:[1,142]},{9:$VJ,23:$Va,38:143,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh},{9:$VJ,23:$Va,38:144,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh},o($VS,[2,63],{65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH}),{25:[1,145]},{25:[1,146]},{21:[2,16]},{25:[2,31],39:147,40:[1,148],65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH},{21:[2,18]},{16:$VT,28:149},{16:$VT,28:151},{32:[1,152]},o($VM,[2,55],{65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH}),o($VS,[2,62],{65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH}),{21:[2,15]},{21:[2,17]},{25:[2,30],40:[1,153]},{26:154,31:$Vb,85:$Vi,86:$Vj,87:$Vk,88:$Vl},o($Vp,[2,21]),{2:$VU,9:$V7,13:$VV,14:$VW,23:$Va,26:28,31:$Vb,35:157,36:158,37:159,38:30,41:155,42:156,43:160,44:161,45:162,46:163,47:$VX,48:164,49:165,50:166,55:$VY,58:$VZ,63:$V_,64:$V$,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,89:$V01,90:$V11,91:$V21},o($Vp,[2,22]),{33:[1,178]},{26:179,31:$Vb,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{9:$VJ,23:$Va,38:180,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh},{2:$VU,9:$V7,13:$VV,14:$VW,15:[1,181],23:$Va,26:28,31:$Vb,35:157,36:158,37:159,38:30,42:182,43:160,44:161,45:162,46:163,47:$VX,48:164,49:165,50:166,55:$VY,58:$VZ,63:$V_,64:$V$,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,89:$V01,90:$V11,91:$V21},o($V31,[2,37]),{21:[1,183]},{21:[1,184]},{21:[1,185]},o($V31,[2,41]),o($V31,[2,42]),o($V31,[2,43]),{47:[1,186]},{21:[1,187]},{21:[1,188]},{21:[1,189]},o($V31,[2,48]),o($V31,[2,49]),{21:[1,190]},{23:[1,191]},{23:[1,192]},{23:[1,193]},{16:$V41,56:194},{59:[1,196]},{9:$VJ,21:[2,102],23:$Va,38:197,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh},{21:[2,103]},{21:[2,104]},{34:[1,198]},{9:$VJ,23:$Va,38:199,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh},o($VS,[2,34],{65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH}),o($Vp,[2,35]),o($V31,[2,36]),o($V31,[2,38]),o($V31,[2,39]),o($V31,[2,40]),{23:[1,200]},o($V31,[2,45]),o($V31,[2,46]),o($V31,[2,47]),o($V31,[2,50]),{9:$VJ,23:$Va,38:201,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh},{9:$VJ,23:$Va,38:202,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh},{26:28,31:$Vb,35:203,85:$Vi,86:$Vj,87:$Vk,88:$Vl},{47:[2,71]},{2:$VU,9:$V7,13:$VV,14:$VW,23:$Va,26:28,31:$Vb,35:157,36:158,37:159,38:30,41:204,42:156,43:160,44:161,45:162,46:163,47:$VX,48:164,49:165,50:166,55:$VY,58:$VZ,63:$V_,64:$V$,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,89:$V01,90:$V11,91:$V21},{60:[1,205]},{21:[2,101],65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH},{25:[1,206]},o($VS,[2,33],{65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH}),{9:$VJ,23:$Va,38:207,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh},{25:[1,208],65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH},{25:[1,209],65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH},{21:[1,210]},{2:$VU,9:$V7,13:$VV,14:$VW,15:[1,211],23:$Va,26:28,31:$Vb,35:157,36:158,37:159,38:30,42:182,43:160,44:161,45:162,46:163,47:$VX,48:164,49:165,50:166,55:$VY,58:$VZ,63:$V_,64:$V$,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh,85:$Vi,86:$Vj,87:$Vk,88:$Vl,89:$V01,90:$V11,91:$V21},{59:[1,212]},{16:$VT,28:213},{25:[1,214],65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH},{16:$V41,56:215},{16:$V41,56:216},{9:$VJ,23:$Va,38:217,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh},o([2,9,13,14,15,23,31,47,55,57,58,63,64,66,70,71,72,73,84,85,86,87,88,89,90,91],[2,72]),{61:[1,218],62:[1,219]},o($Vp,[2,23]),{21:[1,220]},o($V31,[2,64],{57:[1,221]}),o($V31,[2,69]),{21:[1,222],65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH},{23:[1,223]},{23:[1,224]},o($V31,[2,44]),{16:$V41,43:226,55:$VY,56:225},{9:[1,228],23:$Va,36:227,38:30,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh},{9:$VJ,23:$Va,38:229,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh},{9:$VJ,23:$Va,38:230,66:$Vc,70:$Vd,71:$Ve,72:$Vf,73:$Vg,84:$Vh},o($V31,[2,65]),o($V31,[2,66]),{25:[1,231]},o([25,65,66,67,68,69,74,75,76,77,78,79,80,81,82,83],$Vq,{52:$Vr}),{25:[1,232],65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH},{25:[1,233],65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH},{16:$V41,56:234},{21:[2,67]},{21:[2,68]},o($V31,[2,70])],
defaultActions: {8:[2,1],121:[2,58],137:[2,16],139:[2,18],145:[2,15],146:[2,17],176:[2,103],177:[2,104],194:[2,71],232:[2,67],233:[2,68]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	//const Nodo = require('./AstTree');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 13; 
break;
case 1:return 14; 
break;
case 2:return 7;
break;
case 3:return 29;
break;
case 4:return 8;
break;
case 5:return 11;
break;
case 6:return 22;
break;
case 7:return 30;
break;
case 8:return 34;
break;
case 9:return 58;
break;
case 10:return 60;
break;
case 11:return 62;
break;
case 12:return 61;
break;
case 13:return 85;
break;
case 14:return 86;
break;
case 15:return 88;
break;
case 16:return 87;
break;
case 17:return 31;
break;
case 18:return 63;
break;
case 19:return 47;
break;
case 20:return 64;
break;
case 21:return 90;
break;
case 22:return 89;
break;
case 23:return 91;
break;
case 24:return 55;
break;
case 25:return 57;
break;
case 26:return 21; 
break;
case 27:return 23; 
break;
case 28:return 25; 
break;
case 29:return 32; 
break;
case 30:return 33; 
break;
case 31:return 16
break;
case 32:return 15
break;
case 33:return 40; 
break;
case 34:return 59; 
break;
case 35:return 79;
break;
case 36:return 78;
break;
case 37:return 80;
break;
case 38:return 81;
break;
case 39:return 75;
break;
case 40:return 74;
break;
case 41:return 82;
break;
case 42:return 83;
break;
case 43:return 65;
break;
case 44:return 66;
break;
case 45:return 67;
break;
case 46:return 68;
break;
case 47:return 69;
break;
case 48:return 77;
break;
case 49:return 76;
break;
case 50:return 52; 
break;
case 51:return 84;
break;
case 52: /*ignore */
break;
case 53:/*it will count */
break;
case 54:// se ignoran espacios en blanco
break;
case 55: return 73;
break;
case 56:return 72;
break;
case 57:return 71; 
break;
case 58:return 70; 
break;
case 59:return 9; 
break;
case 60:return 5; 
break;
case 61: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\/\/.*)/i,/^(?:public\b)/i,/^(?:static\b)/i,/^(?:class\b)/i,/^(?:interface\b)/i,/^(?:void\b)/i,/^(?:main\b)/i,/^(?:args\b)/i,/^(?:System\b)/i,/^(?:out\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:String\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:return\b)/i,/^(?:continue\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\.)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:!)/i,/^(?:[ \r\t\f]+)/i,/^(?:\n)/i,/^(?:\s+)/i,/^(?:"[^\"]*")/i,/^(?:'[^']')/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = G_JS;
exports.Parser = G_JS.Parser;
exports.parse = function () { return G_JS.parse.apply(G_JS, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}