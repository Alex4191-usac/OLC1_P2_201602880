/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var G_JS = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,4],$V2=[1,5],$V3=[1,6],$V4=[2,5,7,13,14],$V5=[1,21],$V6=[1,27],$V7=[1,23],$V8=[1,24],$V9=[1,30],$Va=[1,33],$Vb=[1,28],$Vc=[1,29],$Vd=[1,31],$Ve=[1,32],$Vf=[1,37],$Vg=[1,38],$Vh=[7,9,13,14,15,31,39,68,69,70,71],$Vi=[1,46],$Vj=[2,51],$Vk=[1,48],$Vl=[1,49],$Vm=[9,24,39,55,88,89,90,91],$Vn=[22,53],$Vo=[1,67],$Vp=[1,62],$Vq=[1,61],$Vr=[1,63],$Vs=[1,64],$Vt=[1,65],$Vu=[1,66],$Vv=[1,77],$Vw=[1,78],$Vx=[1,79],$Vy=[1,80],$Vz=[1,81],$VA=[22,26,39,54,55,76,77,79,80,81,82,83,84,85,86,87],$VB=[2,27],$VC=[22,26,39,54,55,76,77,79,80,81,82,83,84],$VD=[22,26,39,54,55,76,77,79,80,81,82,83,84,85,86],$VE=[1,106],$VF=[1,124],$VG=[1,125],$VH=[1,122],$VI=[1,123],$VJ=[1,127],$VK=[1,126],$VL=[1,130],$VM=[1,128],$VN=[1,129],$VO=[1,131],$VP=[1,132],$VQ=[1,133],$VR=[2,9,13,14,15,31,39,46,58,60,65,67,68,69,70,71,72,73,74],$VS=[1,151],$VT=[26,39],$VU=[1,161],$VV=[1,171],$VW=[22,26],$VX=[22,26,76,77];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"LISTA_TIPO_INSTRUCCION":4,"EOF":5,"TIPO_INSTRUCCION":6,"tk_public":7,"tk_class":8,"identificador":9,"BLOQUESENTENCIAS_PADRE":10,"tk_interface":11,"BLOQUESENTENCIAS_PADRE_I":12,"cm_multiple":13,"cm_simple":14,"llave_der":15,"llave_izq":16,"LISTA_SUB_INSTRUCCION":17,"LISTA_SUB_INSTRUCCION_I":18,"SUB_INSTRUCCION":19,"SUB_INSTRUCCION_I":20,"METODO_INTERFAZ":21,"punto_coma":22,"tk_void":23,"parentesis_izq":24,"PARAMETROS_METODO_FUNCION":25,"parentesis_der":26,"BLOQUESENTENCIAS_HIJO":27,"TYPE":28,"tk_static":29,"tk_main":30,"tk_String":31,"corchete_izq":32,"corchete_der":33,"tk_args":34,"DEFDECLARACION":35,"INSTRUCCIONES":36,"EXP_NUMERICA":37,"L_PARAMETROS_METODO_FUNCION":38,"coma":39,"INSTRUCCION":40,"LLAMADA_METODO":41,"DEFIF":42,"DEFWHILE":43,"DEFFOR":44,"DEFDO":45,"tk_while":46,"EXP_LOGICA":47,"DEFPRINT":48,"SENTENCIA_RETURN":49,"SENTENCIA_BC":50,"BLOQUESENTENCIAS":51,"LISTA_VARIABLES":52,"igual":53,"mas":54,"MENOS":55,"LLAMADA_PARAMETRO":56,"LISTA_LLAMADA_PARAMETRO":57,"tk_if":58,"tk_else":59,"tk_System":60,"punto":61,"tk_out":62,"tk_println":63,"tk_print":64,"tk_for":65,"DECLARACION_CONTADOR":66,"tk_do":67,"tk_int":68,"tk_double":69,"tk_boolean":70,"tk_char":71,"tk_return":72,"tk_break":73,"tk_continue":74,"EXP_RELACIONAL":75,"op_and":76,"op_or":77,"op_not":78,"mayor":79,"menor":80,"op_mayorigual":81,"op_menor_igual":82,"op_igual_igual":83,"op_not_igual":84,"por":85,"dividido":86,"op_xor":87,"entero":88,"decimal":89,"CADENA":90,"Caracter":91,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"tk_public",8:"tk_class",9:"identificador",11:"tk_interface",13:"cm_multiple",14:"cm_simple",15:"llave_der",16:"llave_izq",22:"punto_coma",23:"tk_void",24:"parentesis_izq",26:"parentesis_der",29:"tk_static",30:"tk_main",31:"tk_String",32:"corchete_izq",33:"corchete_der",34:"tk_args",39:"coma",46:"tk_while",53:"igual",54:"mas",55:"MENOS",58:"tk_if",59:"tk_else",60:"tk_System",61:"punto",62:"tk_out",63:"tk_println",64:"tk_print",65:"tk_for",67:"tk_do",68:"tk_int",69:"tk_double",70:"tk_boolean",71:"tk_char",72:"tk_return",73:"tk_break",74:"tk_continue",76:"op_and",77:"op_or",78:"op_not",79:"mayor",80:"menor",81:"op_mayorigual",82:"op_menor_igual",83:"op_igual_igual",84:"op_not_igual",85:"por",86:"dividido",87:"op_xor",88:"entero",89:"decimal",90:"CADENA",91:"Caracter"},
productions_: [0,[3,2],[4,2],[4,1],[6,4],[6,4],[6,1],[6,1],[6,2],[10,3],[12,3],[17,2],[17,1],[18,2],[18,1],[20,2],[21,6],[21,5],[19,7],[19,7],[19,11],[19,2],[19,1],[19,1],[27,3],[25,3],[25,2],[25,0],[38,4],[38,3],[36,2],[36,1],[40,2],[40,2],[40,1],[40,1],[40,1],[40,6],[40,2],[40,2],[40,2],[40,1],[40,1],[40,2],[51,3],[35,2],[35,4],[35,3],[35,3],[35,3],[52,3],[52,1],[41,4],[56,2],[56,1],[56,0],[57,3],[57,2],[42,5],[42,7],[42,7],[48,8],[48,8],[43,5],[44,9],[45,2],[28,1],[28,1],[28,1],[28,1],[28,1],[49,2],[49,1],[50,1],[50,1],[66,2],[66,2],[47,3],[47,3],[47,2],[47,1],[75,3],[75,3],[75,3],[75,3],[75,3],[75,3],[75,1],[37,3],[37,3],[37,3],[37,3],[37,2],[37,3],[37,3],[37,1],[37,1],[37,1],[37,1],[37,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		// cuando se haya reconocido la entrada completa retornamos la entrada traducida
		return $$[$0-1];
	
break;
case 2: case 11: case 30:
 this.$ = `${$$[$0-1]}${$$[$0]}`; 
break;
case 3: case 12: case 31: case 80:
 this.$ = `${$$[$0]}`; 
break;
case 4:
 this.$ = `${$$[$0-2]} ${$$[$0-1]} ${$$[$0]}`;
break;
case 6: case 7: case 22: case 23: case 41: case 42:
this.$ =`${$$[$0]}\n`; 
break;
case 8: case 27: case 43:
this.$=``;
break;
case 9: case 24:
 this.$ = `{\n${$$[$0-1]}}`; 
break;
case 10: case 15: case 16: case 17:
 
break;
case 13:
  
break;
case 18:
this.$=`\t ${$$[$0-4]}${$$[$0-3]}${$$[$0-2]}${$$[$0-1]}${$$[$0]}`;
break;
case 19:
this.$=`\t function ${$$[$0-4]}${$$[$0-3]}${$$[$0-2]}${$$[$0-1]}${$$[$0]}`;
break;
case 20:
this.$=`\t Main ${$$[$0-6]}${$$[$0-1]}${$$[$0]}`;
break;
case 21:
this.$ =`${$$[$0-1]};`; 
break;
case 25:
 this.$=`${$$[$0-1]}${$$[$0]}`; 
break;
case 26:
this.$=`${$$[$0]}`;
break;
case 28:
this.$=`${$$[$0-3]}${$$[$0-2]}${$$[$0]}`; 
break;
case 29:
this.$=`${$$[$0-2]}${$$[$0]}` ; 
break;
case 32:
 this.$ = `${$$[$0-1]}${$$[$0]}\n`; 
break;
case 33: case 38: case 39: case 40:
 this.$ = `${$$[$0-1]};\n`; 
break;
case 34: case 35: case 36:
 this.$ = `${$$[$0]}\n`; 
break;
case 37:
this.$ = `${$$[$0-5]}\n${$$[$0-4]}${$$[$0-3]}${$$[$0-2]}${$$[$0-1]};\n`;
break;
case 44:
 this.$ = `{${$$[$0-1]}\n}`; 
break;
case 45:
this.$ = `\t var ${$$[$0]}`;
break;
case 46:
 this.$ =`\t var ${$$[$0-2]}${$$[$0-1]}${$$[$0]}`;
break;
case 47:
this.$ = `\t ${$$[$0-2]}${$$[$0-1]}${$$[$0]}`;
break;
case 48: case 49:
 this.$=`\t ${$$[$0-2]}${$$[$0-1]}${$$[$0]}`;
break;
case 50:
this.$ =`${$$[$0-2]}${$$[$0-1]}${$$[$0]}`;
break;
case 51: case 54: case 87:
this.$ = `${$$[$0]}`;
break;
case 52:
this.$= `${$$[$0-3]}${$$[$0-2]}${$$[$0-1]}${$$[$0]}`;
break;
case 53:
 this.$ = `${$$[$0-1]}${$$[$0]}`;  
break;
case 55:
this.$ = ``;
break;
case 56:
 this.$ =`${$$[$0-2]}${$$[$0-1]}${$$[$0]}`;
break;
case 57:
this.$ = `,${$$[$0]}`;
break;
case 58:
 this.$ = `${$$[$0-4]}${$$[$0-3]}${$$[$0-2]}${$$[$0-1]}${$$[$0]}`; 
break;
case 59: case 60:
 this.$ = `${$$[$0-6]}${$$[$0-5]}${$$[$0-4]}${$$[$0-3]}${$$[$0-2]}${$$[$0-1]}${$$[$0]}`; 
break;
case 61: case 62:
this.$ = `\t console.log(${$$[$0-1]})\n`;
break;
case 63:
 this.$ = `while ( ${$$[$0-2]} ) \n${$$[$0]}`; 
break;
case 64:
 this.$ = `for ( ${$$[$0-6]};${$$[$0-4]};${$$[$0-2]} ) `; 
break;
case 65:
 this.$ = `do`; 
break;
case 66:
 this.$ =``; 
break;
case 67:
  this.$ =``; 
break;
case 68: case 70:
  this.$ =``;  
break;
case 69:
 this.$ =``;   
break;
case 71:
 this.$=`return ${$$[$0]}`;
break;
case 72:
this.$ = `return`;
break;
case 73:
 this.$=`break`;  
break;
case 74:
 this.$=`continue`; 
break;
case 75:
 this.$ = `++`; 
break;
case 76:
 this.$ = `--`; 
break;
case 77:
this.$ = `${$$[$0-2]}${$$[$0-1]}${$$[$0]}`; 
break;
case 78:
this.$ = `${$$[$0-2]}${$$[$0-1]}${$$[$0]}`;  
break;
case 79:
this.$ = `${$$[$0-1]}${$$[$0]}`; 
break;
case 81: case 82: case 84: case 86:
 this.$ = `${$$[$0-2]}${$$[$0-1]}${$$[$0]}`; 
break;
case 83: case 85:
 this.$ = `${$$[$0-2]}${$$[$0-1]}${$$[$0]}`;  
break;
case 88:
 this.$=`${$$[$0-2]}+${$$[$0]}`;
break;
case 89:
  this.$ =`${$$[$0-2]}-${$$[$0]}`; 
break;
case 90:
  this.$ = `${$$[$0-2]}*${$$[$0]}`; 
break;
case 91:
  this.$ =`${$$[$0-2]}/${$$[$0]}`; 
break;
case 92:
 this.$ = `-${$$[$0]}`;
break;
case 93:
this.$ =`${$$[$0-2]} ${$$[$0-1]} ${$$[$0]}`;
break;
case 94:
 this.$ =`${$$[$0-2]} ${$$[$0-1]} ${$$[$0]}`;
break;
case 95:
  this.$ =`${$$[$0]}`; 
break;
case 96: case 97: case 98:
 this.$ =`${$$[$0]}`;
break;
case 99:
 this.$ =`${$$[$0]}`; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1,13:$V2,14:$V3},{1:[3]},{5:[1,8]},{2:$V0,4:9,5:[2,3],6:3,7:$V1,13:$V2,14:$V3},{8:[1,10],11:[1,11]},o($V4,[2,6]),o($V4,[2,7]),{15:[1,12]},{1:[2,1]},{5:[2,2]},{9:[1,13]},{9:[1,14]},o($V4,[2,8]),{10:15,16:[1,16]},{12:17,16:[1,18]},o($V4,[2,4]),{7:$V5,9:$V6,13:$V7,14:$V8,17:19,19:20,28:25,31:$V9,35:22,39:$Va,52:26,68:$Vb,69:$Vc,70:$Vd,71:$Ve},o($V4,[2,5]),{7:$Vf,18:34,20:35,21:36,23:$Vg},{15:[1,39]},{7:$V5,9:$V6,13:$V7,14:$V8,15:[2,12],17:40,19:20,28:25,31:$V9,35:22,39:$Va,52:26,68:$Vb,69:$Vc,70:$Vd,71:$Ve},{23:[1,41],28:42,29:[1,43],31:$V9,68:$Vb,69:$Vc,70:$Vd,71:$Ve},{22:[1,44]},o($Vh,[2,22]),o($Vh,[2,23]),{9:$Vi,39:$Va,52:45},{53:[1,47]},{53:$Vj,54:$Vk,55:$Vl},o($Vm,[2,66]),o($Vm,[2,67]),o($Vm,[2,68]),o($Vm,[2,69]),o($Vm,[2,70]),{9:[1,50]},{15:[1,51]},{7:$Vf,15:[2,14],18:52,20:35,21:36,23:$Vg},{22:[1,53]},{23:[1,54]},{9:[1,55]},o($V4,[2,9]),{15:[2,11]},{9:[1,56]},{9:[1,57]},{23:[1,58]},o($Vh,[2,21]),{22:[2,45],53:[1,59]},o($Vn,$Vj),{9:$Vo,24:$Vp,37:60,55:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu},{54:[1,68]},{55:[1,69]},{9:$Vi,39:$Va,52:70},o($V4,[2,10]),{15:[2,13]},o([7,15,23],[2,15]),{9:[1,71]},{24:[1,72]},{24:[1,73]},{24:[1,74]},{30:[1,75]},{9:$Vo,24:$Vp,37:76,55:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu},{22:[2,47],54:$Vv,55:$Vw,85:$Vx,86:$Vy,87:$Vz},{9:$Vo,24:$Vp,37:82,55:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu},{9:$Vo,24:$Vp,37:83,55:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu},o($VA,[2,95]),o($VA,[2,96]),o($VA,[2,97]),o($VA,[2,98]),o($VA,[2,99]),{22:[2,48]},{22:[2,49]},o($Vn,[2,50]),{24:[1,84]},{25:85,26:$VB,28:86,31:$V9,68:$Vb,69:$Vc,70:$Vd,71:$Ve},{25:87,26:$VB,28:86,31:$V9,68:$Vb,69:$Vc,70:$Vd,71:$Ve},{25:88,26:$VB,28:86,31:$V9,68:$Vb,69:$Vc,70:$Vd,71:$Ve},{24:[1,89]},{22:[2,46],54:$Vv,55:$Vw,85:$Vx,86:$Vy,87:$Vz},{9:$Vo,24:$Vp,37:90,55:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu},{9:$Vo,24:$Vp,37:91,55:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu},{9:$Vo,24:$Vp,37:92,55:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu},{9:$Vo,24:$Vp,37:93,55:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu},{9:$Vo,24:$Vp,37:94,55:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu},o($VA,[2,92]),{26:[1,95],54:$Vv,55:$Vw,85:$Vx,86:$Vy,87:$Vz},{25:96,26:$VB,28:86,31:$V9,68:$Vb,69:$Vc,70:$Vd,71:$Ve},{26:[1,97]},{9:$Vo,24:$Vp,37:98,55:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu},{26:[1,99]},{26:[1,100]},{31:[1,101]},o($VC,[2,88],{85:$Vx,86:$Vy,87:$Vz}),o($VC,[2,89],{85:$Vx,86:$Vy,87:$Vz}),o($VD,[2,90],{87:$Vz}),o($VD,[2,91],{87:$Vz}),o($VA,[2,93]),o($VA,[2,94]),{26:[1,102]},{22:[2,17]},{26:[2,26],38:103,39:[1,104],54:$Vv,55:$Vw,85:$Vx,86:$Vy,87:$Vz},{16:$VE,27:105},{16:$VE,27:107},{32:[1,108]},{22:[2,16]},{26:[2,25],39:[1,109]},{28:110,31:$V9,68:$Vb,69:$Vc,70:$Vd,71:$Ve},o($Vh,[2,18]),{2:$VF,9:$VG,13:$VH,14:$VI,28:25,31:$V9,35:113,36:111,39:$Va,40:112,41:114,42:115,43:116,44:117,45:118,46:$VJ,48:119,49:120,50:121,52:26,58:$VK,60:$VL,65:$VM,67:$VN,68:$Vb,69:$Vc,70:$Vd,71:$Ve,72:$VO,73:$VP,74:$VQ},o($Vh,[2,19]),{33:[1,134]},{28:135,31:$V9,68:$Vb,69:$Vc,70:$Vd,71:$Ve},{9:$Vo,24:$Vp,37:136,55:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu},{15:[1,137]},{2:$VF,9:$VG,13:$VH,14:$VI,15:[2,31],28:25,31:$V9,35:113,36:138,39:$Va,40:112,41:114,42:115,43:116,44:117,45:118,46:$VJ,48:119,49:120,50:121,52:26,58:$VK,60:$VL,65:$VM,67:$VN,68:$Vb,69:$Vc,70:$Vd,71:$Ve,72:$VO,73:$VP,74:$VQ},{22:[1,139]},{22:[1,140]},o($VR,[2,34]),o($VR,[2,35]),o($VR,[2,36]),{46:[1,141]},{22:[1,142]},{22:[1,143]},{22:[1,144]},o($VR,[2,41]),o($VR,[2,42]),{22:[1,145]},{24:[1,146],53:$Vj,54:$Vk,55:$Vl},{24:[1,147]},{24:[1,148]},{24:[1,149]},{16:$VS,51:150},{61:[1,152]},{9:$Vo,22:[2,72],24:$Vp,37:153,55:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu},{22:[2,73]},{22:[2,74]},{34:[1,154]},{9:$Vo,24:$Vp,37:155,55:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu},o($VT,[2,29],{54:$Vv,55:$Vw,85:$Vx,86:$Vy,87:$Vz}),o($Vh,[2,24]),{15:[2,30]},o($VR,[2,32]),o($VR,[2,33]),{24:[1,156]},o($VR,[2,38]),o($VR,[2,39]),o($VR,[2,40]),o($VR,[2,43]),{9:$Vo,24:$Vp,26:[2,55],37:158,55:$Vq,56:157,88:$Vr,89:$Vs,90:$Vt,91:$Vu},{9:$Vo,24:$Vp,37:162,47:159,55:$Vq,75:160,78:$VU,88:$Vr,89:$Vs,90:$Vt,91:$Vu},{9:$Vo,24:$Vp,37:162,47:163,55:$Vq,75:160,78:$VU,88:$Vr,89:$Vs,90:$Vt,91:$Vu},{9:$V6,28:25,31:$V9,35:164,39:$Va,52:26,68:$Vb,69:$Vc,70:$Vd,71:$Ve},{46:[2,65]},{2:$VF,9:$VG,13:$VH,14:$VI,28:25,31:$V9,35:113,36:165,39:$Va,40:112,41:114,42:115,43:116,44:117,45:118,46:$VJ,48:119,49:120,50:121,52:26,58:$VK,60:$VL,65:$VM,67:$VN,68:$Vb,69:$Vc,70:$Vd,71:$Ve,72:$VO,73:$VP,74:$VQ},{62:[1,166]},{22:[2,71],54:$Vv,55:$Vw,85:$Vx,86:$Vy,87:$Vz},{26:[1,167]},o($VT,[2,28],{54:$Vv,55:$Vw,85:$Vx,86:$Vy,87:$Vz}),{9:$Vo,24:$Vp,37:162,47:168,55:$Vq,75:160,78:$VU,88:$Vr,89:$Vs,90:$Vt,91:$Vu},{26:[1,169]},{26:[2,54],39:$VV,54:$Vv,55:$Vw,57:170,85:$Vx,86:$Vy,87:$Vz},{26:[1,172]},o($VW,[2,80],{76:[1,173],77:[1,174]}),{9:$Vo,24:$Vp,37:162,55:$Vq,75:175,88:$Vr,89:$Vs,90:$Vt,91:$Vu},o($VX,[2,87],{54:$Vv,55:$Vw,79:[1,176],80:[1,177],81:[1,178],82:[1,179],83:[1,180],84:[1,181],85:$Vx,86:$Vy,87:$Vz}),{26:[1,182]},{22:[1,183]},{15:[1,184]},{61:[1,185]},{16:$VE,27:186},{26:[1,187]},{22:[2,52]},{26:[2,53]},{9:$Vo,24:$Vp,37:188,55:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu},{16:$VS,51:189},{9:$Vo,24:$Vp,37:162,55:$Vq,75:190,88:$Vr,89:$Vs,90:$Vt,91:$Vu},{9:$Vo,24:$Vp,37:162,55:$Vq,75:191,88:$Vr,89:$Vs,90:$Vt,91:$Vu},o($VW,[2,79]),{9:$Vo,24:$Vp,37:192,55:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu},{9:$Vo,24:$Vp,37:193,55:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu},{9:$Vo,24:$Vp,37:194,55:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu},{9:$Vo,24:$Vp,37:195,55:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu},{9:$Vo,24:$Vp,37:196,55:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu},{9:$Vo,24:$Vp,37:197,55:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu},{16:$VS,51:198},{9:$Vo,24:$Vp,37:162,47:199,55:$Vq,75:160,78:$VU,88:$Vr,89:$Vs,90:$Vt,91:$Vu},o([2,9,13,14,15,31,39,46,58,59,60,65,67,68,69,70,71,72,73,74],[2,44]),{63:[1,200],64:[1,201]},o($Vh,[2,20]),{22:[1,202]},{26:[2,57],39:$VV,54:$Vv,55:$Vw,57:203,85:$Vx,86:$Vy,87:$Vz},o($VR,[2,58],{59:[1,204]}),o($VW,[2,77]),o($VW,[2,78]),o($VX,[2,81],{54:$Vv,55:$Vw,85:$Vx,86:$Vy,87:$Vz}),o($VX,[2,82],{54:$Vv,55:$Vw,85:$Vx,86:$Vy,87:$Vz}),o($VX,[2,83],{54:$Vv,55:$Vw,85:$Vx,86:$Vy,87:$Vz}),o($VX,[2,84],{54:$Vv,55:$Vw,85:$Vx,86:$Vy,87:$Vz}),o($VX,[2,85],{54:$Vv,55:$Vw,85:$Vx,86:$Vy,87:$Vz}),o($VX,[2,86],{54:$Vv,55:$Vw,85:$Vx,86:$Vy,87:$Vz}),o($VR,[2,63]),{22:[1,205]},{24:[1,206]},{24:[1,207]},o($VR,[2,37]),{26:[2,56]},{16:$VS,42:209,51:208,58:$VK},{54:[1,211],55:[1,212],66:210},{9:$Vo,24:$Vp,37:213,55:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu},{9:$Vo,24:$Vp,37:214,55:$Vq,88:$Vr,89:$Vs,90:$Vt,91:$Vu},o($VR,[2,59]),o($VR,[2,60]),{26:[1,215]},{54:[1,216]},{55:[1,217]},{26:[1,218],54:$Vv,55:$Vw,85:$Vx,86:$Vy,87:$Vz},{26:[1,219],54:$Vv,55:$Vw,85:$Vx,86:$Vy,87:$Vz},{16:$VS,51:220},{26:[2,75]},{26:[2,76]},{22:[2,61]},{22:[2,62]},o($VR,[2,64])],
defaultActions: {8:[2,1],9:[2,2],40:[2,11],52:[2,13],68:[2,48],69:[2,49],97:[2,17],102:[2,16],132:[2,73],133:[2,74],138:[2,30],150:[2,65],169:[2,52],170:[2,53],203:[2,56],216:[2,75],217:[2,76],218:[2,61],219:[2,62]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	//const Nodo = require('./AstTree');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 13; 
break;
case 1:return 14; 
break;
case 2:return 7;
break;
case 3:return 29;
break;
case 4:return 8;
break;
case 5:return 11;
break;
case 6:return 23;
break;
case 7:return 30;
break;
case 8:return 34;
break;
case 9:return 60;
break;
case 10:return 62;
break;
case 11:return 64;
break;
case 12:return 63;
break;
case 13:return 68;
break;
case 14:return 69;
break;
case 15:return 71;
break;
case 16:return 70;
break;
case 17:return 31;
break;
case 18:return 65;
break;
case 19:return 46;
break;
case 20:return 67;
break;
case 21:return 73;
break;
case 22:return 72;
break;
case 23:return 74;
break;
case 24:return 58;
break;
case 25:return 59;
break;
case 26:return 22; 
break;
case 27:return 24; 
break;
case 28:return 26; 
break;
case 29:return 32; 
break;
case 30:return 33; 
break;
case 31:return 16
break;
case 32:return 15
break;
case 33:return 39; 
break;
case 34:return 61; 
break;
case 35:return 81;
break;
case 36:return 82;
break;
case 37:return 76;
break;
case 38:return 77;
break;
case 39:return 84;
break;
case 40:return 83;
break;
case 41:return 54;
break;
case 42:return 55;
break;
case 43:return 85;
break;
case 44:return 86;
break;
case 45:return 87;
break;
case 46:return 79;
break;
case 47:return 80;
break;
case 48:return 53; 
break;
case 49:return 78;
break;
case 50: /*ignore */
break;
case 51:/*it will count */
break;
case 52:// se ignoran espacios en blanco
break;
case 53: return 90;
break;
case 54:return 91;
break;
case 55:return 89; 
break;
case 56:return 88; 
break;
case 57:return 9; 
break;
case 58:return 5; 
break;
case 59: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\/\/.*)/i,/^(?:public\b)/i,/^(?:static\b)/i,/^(?:class\b)/i,/^(?:interface\b)/i,/^(?:void\b)/i,/^(?:main\b)/i,/^(?:args\b)/i,/^(?:System\b)/i,/^(?:out\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:String\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:return\b)/i,/^(?:continue\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\.)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:!)/i,/^(?:[ \r\t\f]+)/i,/^(?:\n)/i,/^(?:\s+)/i,/^(?:"[^\"]*")/i,/^(?:'[^']')/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = G_JS;
exports.Parser = G_JS.Parser;
exports.parse = function () { return G_JS.parse.apply(G_JS, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}