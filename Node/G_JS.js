/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var G_JS = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,4],$V2=[1,5],$V3=[1,6],$V4=[2,5,7,12,13],$V5=[1,16],$V6=[1,20],$V7=[1,21],$V8=[1,22],$V9=[1,30],$Va=[1,28],$Vb=[1,29],$Vc=[1,31],$Vd=[1,32],$Ve=[7,12,13,14],$Vf=[9,19,33,51,84,85,86,87],$Vg=[2,20],$Vh=[1,51],$Vi=[1,46],$Vj=[1,45],$Vk=[1,47],$Vl=[1,48],$Vm=[1,49],$Vn=[1,50],$Vo=[1,55],$Vp=[1,57],$Vq=[1,58],$Vr=[1,59],$Vs=[1,60],$Vt=[1,61],$Vu=[21,33,36,50,51,72,73,75,76,77,78,79,80,81,82,83],$Vv=[1,78],$Vw=[1,81],$Vx=[1,90],$Vy=[1,83],$Vz=[1,82],$VA=[1,86],$VB=[1,84],$VC=[1,85],$VD=[1,87],$VE=[1,88],$VF=[1,89],$VG=[2,9,14,26,33,42,54,56,61,63,64,65,66,67,68,69,70],$VH=[1,110],$VI=[2,42],$VJ=[1,112],$VK=[1,113],$VL=[1,119],$VM=[21,33,36,50,51,72,73,75,76,77,78,79,80],$VN=[21,33,36,50,51,72,73,75,76,77,78,79,80,81,82],$VO=[36,49],$VP=[1,135],$VQ=[21,33],$VR=[1,149],$VS=[21,36],$VT=[21,36,72,73];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"LISTA_TIPO_INSTRUCCION":4,"EOF":5,"TIPO_INSTRUCCION":6,"tk_public":7,"tk_class":8,"identificador":9,"BLOQUESENTENCIAS_PADRE":10,"tk_interface":11,"cm_multiple":12,"cm_simple":13,"llave_der":14,"llave_izq":15,"LISTA_SUB_INSTRUCCION":16,"SUB_INSTRUCCION":17,"tk_void":18,"parentesis_izq":19,"PARAMETROS_METODO_FUNCION":20,"parentesis_der":21,"BLOQUESENTENCIAS_HIJO":22,"TYPE":23,"tk_static":24,"tk_main":25,"tk_String":26,"corchete_izq":27,"corchete_der":28,"tk_args":29,"INSTRUCCIONES":30,"EXP_NUMERICA":31,"L_PARAMETROS_METODO_FUNCION":32,"coma":33,"INSTRUCCION":34,"DEFDECLARACION":35,"punto_coma":36,"LLAMADA_METODO":37,"DEFIF":38,"DEFWHILE":39,"DEFFOR":40,"DEFDO":41,"tk_while":42,"EXP_LOGICA":43,"DEFPRINT":44,"SENTENCIA_RETURN":45,"SENTENCIA_BC":46,"BLOQUESENTENCIAS":47,"LISTA_VARIABLES":48,"igual":49,"mas":50,"MENOS":51,"LLAMADA_PARAMETRO":52,"LISTA_LLAMADA_PARAMETRO":53,"tk_if":54,"tk_else":55,"tk_System":56,"punto":57,"tk_out":58,"tk_println":59,"tk_print":60,"tk_for":61,"DECLARACION_CONTADOR":62,"tk_do":63,"tk_int":64,"tk_double":65,"tk_boolean":66,"tk_char":67,"tk_return":68,"tk_break":69,"tk_continue":70,"EXP_RELACIONAL":71,"op_and":72,"op_or":73,"op_not":74,"mayor":75,"menor":76,"op_mayorigual":77,"op_menor_igual":78,"op_igual_igual":79,"op_not_igual":80,"por":81,"dividido":82,"op_xor":83,"entero":84,"decimal":85,"CADENA":86,"Caracter":87,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"tk_public",8:"tk_class",9:"identificador",11:"tk_interface",12:"cm_multiple",13:"cm_simple",14:"llave_der",15:"llave_izq",18:"tk_void",19:"parentesis_izq",21:"parentesis_der",24:"tk_static",25:"tk_main",26:"tk_String",27:"corchete_izq",28:"corchete_der",29:"tk_args",33:"coma",36:"punto_coma",42:"tk_while",49:"igual",50:"mas",51:"MENOS",54:"tk_if",55:"tk_else",56:"tk_System",57:"punto",58:"tk_out",59:"tk_println",60:"tk_print",61:"tk_for",63:"tk_do",64:"tk_int",65:"tk_double",66:"tk_boolean",67:"tk_char",68:"tk_return",69:"tk_break",70:"tk_continue",72:"op_and",73:"op_or",74:"op_not",75:"mayor",76:"menor",77:"op_mayorigual",78:"op_menor_igual",79:"op_igual_igual",80:"op_not_igual",81:"por",82:"dividido",83:"op_xor",84:"entero",85:"decimal",86:"CADENA",87:"Caracter"},
productions_: [0,[3,2],[4,2],[4,1],[6,4],[6,4],[6,1],[6,1],[6,2],[10,3],[16,2],[16,1],[17,7],[17,7],[17,11],[17,1],[17,1],[22,3],[20,3],[20,2],[20,0],[32,4],[32,3],[30,2],[30,1],[34,2],[34,2],[34,1],[34,1],[34,1],[34,6],[34,2],[34,2],[34,2],[34,2],[47,3],[35,2],[35,4],[35,3],[35,3],[35,3],[48,3],[48,1],[37,4],[52,2],[52,1],[52,0],[53,3],[53,2],[38,5],[38,7],[38,7],[44,8],[44,8],[39,5],[40,9],[41,2],[23,1],[23,1],[23,1],[23,1],[23,1],[45,2],[45,1],[46,1],[46,1],[62,2],[62,2],[43,3],[43,3],[43,2],[43,1],[71,3],[71,3],[71,3],[71,3],[71,3],[71,3],[71,1],[31,3],[31,3],[31,3],[31,3],[31,2],[31,3],[31,3],[31,1],[31,1],[31,1],[31,1],[31,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		// cuando se haya reconocido la entrada completa retornamos la entrada traducida
		return $$[$0-1];
	
break;
case 2: case 10: case 23:
 this.$ = `${$$[$0-1]}${$$[$0]}`; 
break;
case 3: case 11: case 24: case 71:
 this.$ = `${$$[$0]}`; 
break;
case 4:
 this.$ = `${$$[$0-2]} ${$$[$0-1]} ${$$[$0]}`;
break;
case 6: case 7: case 15: case 16:
this.$ =`${$$[$0]}\n`; 
break;
case 8: case 20: case 34:
this.$=``;
break;
case 9: case 17:
 this.$ = `{\n${$$[$0-1]}}`; 
break;
case 12: case 13:
this.$=`\t ${$$[$0-4]}${$$[$0-3]}${$$[$0-2]}${$$[$0-1]}${$$[$0]}`;
break;
case 14:
this.$=`\t ${$$[$0-8]}${$$[$0-7]}${$$[$0-6]}${$$[$0-5]}${$$[$0-4]}${$$[$0-3]}${$$[$0-2]}${$$[$0-1]}${$$[$0]}`;
break;
case 18:
 this.$=`${$$[$0-1]}${$$[$0]}`; 
break;
case 19:
this.$=`${$$[$0]}`;
break;
case 21:
this.$=`${$$[$0-3]}${$$[$0-2]}${$$[$0]}`; 
break;
case 22:
this.$=`${$$[$0-2]}${$$[$0]}` ; 
break;
case 25:
 this.$ = `${$$[$0-1]}${$$[$0]}\n`; 
break;
case 26: case 31: case 32: case 33:
 this.$ = `${$$[$0-1]};\n`; 
break;
case 27: case 28: case 29:
 this.$ = `${$$[$0]}\n`; 
break;
case 30:
this.$ = `${$$[$0-5]}\n${$$[$0-4]}${$$[$0-3]}${$$[$0-2]}${$$[$0-1]};\n`;
break;
case 35:
 this.$ = `{${$$[$0-1]}\n}`; 
break;
case 36:
this.$ = `\t var ${$$[$0]}`;
break;
case 37:
 this.$ =`\t var ${$$[$0-2]}${$$[$0-1]}${$$[$0]}`;
break;
case 38:
this.$ = `\t ${$$[$0-2]}${$$[$0-1]}${$$[$0]}`;
break;
case 39: case 40:
 this.$=`\t ${$$[$0-2]}${$$[$0-1]}${$$[$0]}`;
break;
case 41:
this.$ =`${$$[$0-2]}${$$[$0-1]}${$$[$0]}`;
break;
case 42: case 45: case 78:
this.$ = `${$$[$0]}`;
break;
case 43:
this.$= `${$$[$0-3]}${$$[$0-2]}${$$[$0-1]}${$$[$0]}`;
break;
case 44:
 this.$ = `${$$[$0-1]}${$$[$0]}`;  
break;
case 46:
this.$ = ``;
break;
case 47:
 this.$ =`${$$[$0-2]}${$$[$0-1]}${$$[$0]}`;
break;
case 48:
this.$ = `,${$$[$0]}`;
break;
case 49:
 this.$ = `${$$[$0-4]}${$$[$0-3]}${$$[$0-2]}${$$[$0-1]}${$$[$0]}`; 
break;
case 50: case 51:
 this.$ = `${$$[$0-6]}${$$[$0-5]}${$$[$0-4]}${$$[$0-3]}${$$[$0-2]}${$$[$0-1]}${$$[$0]}`; 
break;
case 52: case 53:
this.$ = `\t console.log(${$$[$0-1]})\n`;
break;
case 54:
 this.$ = `while ( ${$$[$0-2]} ) \n${$$[$0]}`; 
break;
case 55:
 this.$ = `for ( ${$$[$0-6]};${$$[$0-4]};${$$[$0-2]} ) `; 
break;
case 56:
 this.$ = `do`; 
break;
case 57:
 this.$ =``; 
break;
case 58:
  this.$ =``; 
break;
case 59: case 61:
  this.$ =``;  
break;
case 60:
 this.$ =``;   
break;
case 62:
 this.$=`return ${$$[$0]}`;
break;
case 63:
this.$ = `return`;
break;
case 64:
 this.$=`break`;  
break;
case 65:
 this.$=`continue`; 
break;
case 66:
 this.$ = `++`; 
break;
case 67:
 this.$ = `--`; 
break;
case 68:
this.$ = `${$$[$0-2]}${$$[$0-1]}${$$[$0]}`; 
break;
case 69:
this.$ = `${$$[$0-2]}${$$[$0-1]}${$$[$0]}`;  
break;
case 70:
this.$ = `${$$[$0-1]}${$$[$0]}`; 
break;
case 72: case 73: case 75: case 77:
 this.$ = `${$$[$0-2]}${$$[$0-1]}${$$[$0]}`; 
break;
case 74: case 76:
 this.$ = `${$$[$0-2]}${$$[$0-1]}${$$[$0]}`;  
break;
case 79:
 this.$=`${$$[$0-2]}+${$$[$0]}`;
break;
case 80:
  this.$ =`${$$[$0-2]}-${$$[$0]}`; 
break;
case 81:
  this.$ = `${$$[$0-2]}*${$$[$0]}`; 
break;
case 82:
  this.$ =`${$$[$0-2]}/${$$[$0]}`; 
break;
case 83:
 this.$ = `-${$$[$0]}`;
break;
case 84:
this.$ =`${$$[$0-2]} ${$$[$0-1]} ${$$[$0]}`;
break;
case 85:
 this.$ =`${$$[$0-2]} ${$$[$0-1]} ${$$[$0]}`;
break;
case 86:
  this.$ =`${$$[$0]}`; 
break;
case 87: case 88: case 89:
 this.$ =`${$$[$0]}`;
break;
case 90:
 this.$ =`${$$[$0]}`; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1,12:$V2,13:$V3},{1:[3]},{5:[1,8]},{2:$V0,4:9,5:[2,3],6:3,7:$V1,12:$V2,13:$V3},{8:[1,10],11:[1,11]},o($V4,[2,6]),o($V4,[2,7]),{14:[1,12]},{1:[2,1]},{5:[2,2]},{9:[1,13]},{9:[1,14]},o($V4,[2,8]),{10:15,15:$V5},{10:17,15:$V5},o($V4,[2,4]),{7:$V6,12:$V7,13:$V8,16:18,17:19},o($V4,[2,5]),{14:[1,23]},{7:$V6,12:$V7,13:$V8,14:[2,11],16:24,17:19},{18:[1,25],23:26,24:[1,27],26:$V9,64:$Va,65:$Vb,66:$Vc,67:$Vd},o($Ve,[2,15]),o($Ve,[2,16]),o($V4,[2,9]),{14:[2,10]},{9:[1,33]},{9:[1,34]},{18:[1,35]},o($Vf,[2,57]),o($Vf,[2,58]),o($Vf,[2,59]),o($Vf,[2,60]),o($Vf,[2,61]),{19:[1,36]},{19:[1,37]},{25:[1,38]},{20:39,21:$Vg,23:40,26:$V9,64:$Va,65:$Vb,66:$Vc,67:$Vd},{20:41,21:$Vg,23:40,26:$V9,64:$Va,65:$Vb,66:$Vc,67:$Vd},{19:[1,42]},{21:[1,43]},{9:$Vh,19:$Vi,31:44,51:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn},{21:[1,52]},{26:[1,53]},{15:$Vo,22:54},{21:[2,19],32:56,33:[1,62],50:$Vp,51:$Vq,81:$Vr,82:$Vs,83:$Vt},{9:$Vh,19:$Vi,31:63,51:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn},{9:$Vh,19:$Vi,31:64,51:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn},o($Vu,[2,86]),o($Vu,[2,87]),o($Vu,[2,88]),o($Vu,[2,89]),o($Vu,[2,90]),{15:$Vo,22:65},{27:[1,66]},o($Ve,[2,12]),{2:$Vv,9:$Vw,23:79,26:$V9,30:67,33:$Vx,34:68,35:69,37:70,38:71,39:72,40:73,41:74,42:$Vy,44:75,45:76,46:77,48:80,54:$Vz,56:$VA,61:$VB,63:$VC,64:$Va,65:$Vb,66:$Vc,67:$Vd,68:$VD,69:$VE,70:$VF},{21:[2,18],33:[1,91]},{9:$Vh,19:$Vi,31:92,51:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn},{9:$Vh,19:$Vi,31:93,51:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn},{9:$Vh,19:$Vi,31:94,51:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn},{9:$Vh,19:$Vi,31:95,51:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn},{9:$Vh,19:$Vi,31:96,51:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn},{23:97,26:$V9,64:$Va,65:$Vb,66:$Vc,67:$Vd},o($Vu,[2,83]),{21:[1,98],50:$Vp,51:$Vq,81:$Vr,82:$Vs,83:$Vt},o($Ve,[2,13]),{28:[1,99]},{14:[1,100]},{2:$Vv,9:$Vw,14:[2,24],23:79,26:$V9,30:101,33:$Vx,34:68,35:69,37:70,38:71,39:72,40:73,41:74,42:$Vy,44:75,45:76,46:77,48:80,54:$Vz,56:$VA,61:$VB,63:$VC,64:$Va,65:$Vb,66:$Vc,67:$Vd,68:$VD,69:$VE,70:$VF},{36:[1,102]},{36:[1,103]},o($VG,[2,27]),o($VG,[2,28]),o($VG,[2,29]),{42:[1,104]},{36:[1,105]},{36:[1,106]},{36:[1,107]},{36:[1,108]},{9:$VH,33:$Vx,48:109},{49:[1,111]},{19:[1,114],49:$VI,50:$VJ,51:$VK},{19:[1,115]},{19:[1,116]},{19:[1,117]},{15:$VL,47:118},{57:[1,120]},{9:$Vh,19:$Vi,31:121,36:[2,63],51:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn},{36:[2,64]},{36:[2,65]},{9:[1,122]},{23:123,26:$V9,64:$Va,65:$Vb,66:$Vc,67:$Vd},o($VM,[2,79],{81:$Vr,82:$Vs,83:$Vt}),o($VM,[2,80],{81:$Vr,82:$Vs,83:$Vt}),o($VN,[2,81],{83:$Vt}),o($VN,[2,82],{83:$Vt}),o($Vu,[2,84]),{9:$Vh,19:$Vi,31:124,51:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn},o($Vu,[2,85]),{29:[1,125]},o($Ve,[2,17]),{14:[2,23]},o($VG,[2,25]),o($VG,[2,26]),{19:[1,126]},o($VG,[2,31]),o($VG,[2,32]),o($VG,[2,33]),o($VG,[2,34]),{36:[2,36],49:[1,127]},o($VO,$VI),{9:$Vh,19:$Vi,31:128,51:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn},{50:[1,129]},{51:[1,130]},{9:$Vh,19:$Vi,21:[2,46],31:132,51:$Vj,52:131,84:$Vk,85:$Vl,86:$Vm,87:$Vn},{9:$Vh,19:$Vi,31:136,43:133,51:$Vj,71:134,74:$VP,84:$Vk,85:$Vl,86:$Vm,87:$Vn},{9:$Vh,19:$Vi,31:136,43:137,51:$Vj,71:134,74:$VP,84:$Vk,85:$Vl,86:$Vm,87:$Vn},{9:[1,139],23:79,26:$V9,33:$Vx,35:138,48:80,64:$Va,65:$Vb,66:$Vc,67:$Vd},{42:[2,56]},{2:$Vv,9:$Vw,23:79,26:$V9,30:140,33:$Vx,34:68,35:69,37:70,38:71,39:72,40:73,41:74,42:$Vy,44:75,45:76,46:77,48:80,54:$Vz,56:$VA,61:$VB,63:$VC,64:$Va,65:$Vb,66:$Vc,67:$Vd,68:$VD,69:$VE,70:$VF},{58:[1,141]},{36:[2,62],50:$Vp,51:$Vq,81:$Vr,82:$Vs,83:$Vt},{9:$VH,33:$Vx,48:142},{9:$Vh,19:$Vi,31:143,51:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn},o($VQ,[2,22],{50:$Vp,51:$Vq,81:$Vr,82:$Vs,83:$Vt}),{21:[1,144]},{9:$Vh,19:$Vi,31:136,43:145,51:$Vj,71:134,74:$VP,84:$Vk,85:$Vl,86:$Vm,87:$Vn},{9:$Vh,19:$Vi,31:146,51:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn},{36:[2,38],50:$Vp,51:$Vq,81:$Vr,82:$Vs,83:$Vt},{36:[2,39]},{36:[2,40]},{21:[1,147]},{21:[2,45],33:$VR,50:$Vp,51:$Vq,53:148,81:$Vr,82:$Vs,83:$Vt},{21:[1,150]},o($VS,[2,71],{72:[1,151],73:[1,152]}),{9:$Vh,19:$Vi,31:136,51:$Vj,71:153,84:$Vk,85:$Vl,86:$Vm,87:$Vn},o($VT,[2,78],{50:$Vp,51:$Vq,75:[1,154],76:[1,155],77:[1,156],78:[1,157],79:[1,158],80:[1,159],81:$Vr,82:$Vs,83:$Vt}),{21:[1,160]},{36:[1,161]},{49:$VI,50:$VJ,51:$VK},{14:[1,162]},{57:[1,163]},o($VO,[2,41]),o($VQ,[2,21],{50:$Vp,51:$Vq,81:$Vr,82:$Vs,83:$Vt}),{15:$Vo,22:164},{21:[1,165]},{36:[2,37],50:$Vp,51:$Vq,81:$Vr,82:$Vs,83:$Vt},{36:[2,43]},{21:[2,44]},{9:$Vh,19:$Vi,31:166,51:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn},{15:$VL,47:167},{9:$Vh,19:$Vi,31:136,51:$Vj,71:168,84:$Vk,85:$Vl,86:$Vm,87:$Vn},{9:$Vh,19:$Vi,31:136,51:$Vj,71:169,84:$Vk,85:$Vl,86:$Vm,87:$Vn},o($VS,[2,70]),{9:$Vh,19:$Vi,31:170,51:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn},{9:$Vh,19:$Vi,31:171,51:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn},{9:$Vh,19:$Vi,31:172,51:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn},{9:$Vh,19:$Vi,31:173,51:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn},{9:$Vh,19:$Vi,31:174,51:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn},{9:$Vh,19:$Vi,31:175,51:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn},{15:$VL,47:176},{9:$Vh,19:$Vi,31:136,43:177,51:$Vj,71:134,74:$VP,84:$Vk,85:$Vl,86:$Vm,87:$Vn},o([2,9,14,26,33,42,54,55,56,61,63,64,65,66,67,68,69,70],[2,35]),{59:[1,178],60:[1,179]},o($Ve,[2,14]),{36:[1,180]},{21:[2,48],33:$VR,50:$Vp,51:$Vq,53:181,81:$Vr,82:$Vs,83:$Vt},o($VG,[2,49],{55:[1,182]}),o($VS,[2,68]),o($VS,[2,69]),o($VT,[2,72],{50:$Vp,51:$Vq,81:$Vr,82:$Vs,83:$Vt}),o($VT,[2,73],{50:$Vp,51:$Vq,81:$Vr,82:$Vs,83:$Vt}),o($VT,[2,74],{50:$Vp,51:$Vq,81:$Vr,82:$Vs,83:$Vt}),o($VT,[2,75],{50:$Vp,51:$Vq,81:$Vr,82:$Vs,83:$Vt}),o($VT,[2,76],{50:$Vp,51:$Vq,81:$Vr,82:$Vs,83:$Vt}),o($VT,[2,77],{50:$Vp,51:$Vq,81:$Vr,82:$Vs,83:$Vt}),o($VG,[2,54]),{36:[1,183]},{19:[1,184]},{19:[1,185]},o($VG,[2,30]),{21:[2,47]},{15:$VL,38:187,47:186,54:$Vz},{50:[1,189],51:[1,190],62:188},{9:$Vh,19:$Vi,31:191,51:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn},{9:$Vh,19:$Vi,31:192,51:$Vj,84:$Vk,85:$Vl,86:$Vm,87:$Vn},o($VG,[2,50]),o($VG,[2,51]),{21:[1,193]},{50:[1,194]},{51:[1,195]},{21:[1,196],50:$Vp,51:$Vq,81:$Vr,82:$Vs,83:$Vt},{21:[1,197],50:$Vp,51:$Vq,81:$Vr,82:$Vs,83:$Vt},{15:$VL,47:198},{21:[2,66]},{21:[2,67]},{36:[2,52]},{36:[2,53]},o($VG,[2,55])],
defaultActions: {8:[2,1],9:[2,2],24:[2,10],88:[2,64],89:[2,65],101:[2,23],118:[2,56],129:[2,39],130:[2,40],147:[2,43],148:[2,44],181:[2,47],194:[2,66],195:[2,67],196:[2,52],197:[2,53]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	//const Nodo = require('./AstTree');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 12; 
break;
case 1:return 13; 
break;
case 2:return 7;
break;
case 3:return 24;
break;
case 4:return 8;
break;
case 5:return 11;
break;
case 6:return 18;
break;
case 7:return 25;
break;
case 8:return 29;
break;
case 9:return 56;
break;
case 10:return 58;
break;
case 11:return 60;
break;
case 12:return 59;
break;
case 13:return 64;
break;
case 14:return 65;
break;
case 15:return 67;
break;
case 16:return 66;
break;
case 17:return 26;
break;
case 18:return 61;
break;
case 19:return 42;
break;
case 20:return 63;
break;
case 21:return 69;
break;
case 22:return 68;
break;
case 23:return 70;
break;
case 24:return 54;
break;
case 25:return 55;
break;
case 26:return 36; 
break;
case 27:return 19; 
break;
case 28:return 21; 
break;
case 29:return 27; 
break;
case 30:return 28; 
break;
case 31:return 15
break;
case 32:return 14
break;
case 33:return 33; 
break;
case 34:return 57; 
break;
case 35:return 77;
break;
case 36:return 78;
break;
case 37:return 72;
break;
case 38:return 73;
break;
case 39:return 80;
break;
case 40:return 79;
break;
case 41:return 50;
break;
case 42:return 51;
break;
case 43:return 81;
break;
case 44:return 82;
break;
case 45:return 83;
break;
case 46:return 75;
break;
case 47:return 76;
break;
case 48:return 49; 
break;
case 49:return 74;
break;
case 50: /*ignore */
break;
case 51:/*it will count */
break;
case 52:// se ignoran espacios en blanco
break;
case 53: return 86;
break;
case 54:return 87;
break;
case 55:return 85; 
break;
case 56:return 84; 
break;
case 57:return 9; 
break;
case 58:return 5; 
break;
case 59: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\/\/.*)/i,/^(?:public\b)/i,/^(?:static\b)/i,/^(?:class\b)/i,/^(?:interface\b)/i,/^(?:void\b)/i,/^(?:main\b)/i,/^(?:args\b)/i,/^(?:System\b)/i,/^(?:out\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:String\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:return\b)/i,/^(?:continue\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\.)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:!)/i,/^(?:[ \r\t\f]+)/i,/^(?:\n)/i,/^(?:\s+)/i,/^(?:"[^\"]*")/i,/^(?:'[^']')/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = G_JS;
exports.Parser = G_JS.Parser;
exports.parse = function () { return G_JS.parse.apply(G_JS, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}