/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[5,7],$V2=[1,15],$V3=[1,19],$V4=[1,22],$V5=[1,20],$V6=[1,21],$V7=[1,23],$V8=[1,24],$V9=[7,9,12,25,74,75,76,77],$Va=[1,34],$Vb=[50,53],$Vc=[2,36],$Vd=[1,35],$Ve=[1,36],$Vf=[22,50,53],$Vg=[1,50],$Vh=[1,45],$Vi=[1,44],$Vj=[1,46],$Vk=[1,47],$Vl=[1,48],$Vm=[1,49],$Vn=[7,9,12,16,25,33,37,38,41,47,52,60,70,71,72,73,74,75,76,77,78,79,80],$Vo=[1,59],$Vp=[1,60],$Vq=[1,61],$Vr=[1,62],$Vs=[1,63],$Vt=[18,22,51,52,53,58,59,61,62,63,64,65,66,67,68,69],$Vu=[2,39],$Vv=[18,22,51,52,53,58,59,61,62,63,64,65,66],$Vw=[18,22,51,52,53,58,59,61,62,63,64,65,66,67,68],$Vx=[1,97],$Vy=[1,92],$Vz=[1,93],$VA=[1,94],$VB=[1,99],$VC=[1,98],$VD=[9,12,25,33,37,38,41,47,74,75,76,77,78,79,80],$VE=[1,120],$VF=[18,53],$VG=[18,22],$VH=[18,22,58,59],$VI=[2,80],$VJ=[1,143],$VK=[1,144];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"TIPO_INSTRUCCION":6,"tk_public":7,"tk_class":8,"identificador":9,"llave_izq":10,"LISTA_METODO_FUNCION":11,"llave_der":12,"tk_interface":13,"METODO_FUNCION":14,"tk_void":15,"parentesis_izq":16,"PARAMETROS_METODO_FUNCION":17,"parentesis_der":18,"LISTA_SUBINSTRUCCION":19,"TIPO_DATO":20,"SENTENCIA_RETURN":21,"punto_coma":22,"tk_static":23,"tk_main":24,"tk_String":25,"corchete_izq":26,"corchete_der":27,"tk_args":28,"DECLARACION":29,"SUB_INSTRUCCION_INTERFACE":30,"LLAMADA_METODO":31,"SUB_INSTRUCCION":32,"tk_for":33,"EXP_LOGICA":34,"DECLARACION_CONTADOR":35,"SENTENCIA_BC":36,"tk_while":37,"tk_do":38,"SENTENCIA_CONTROL":39,"SENTENCIA_IMPRIMIR":40,"tk_System":41,"punto":42,"tk_out":43,"tk_println":44,"EXP_NUMERICA":45,"tk_print":46,"tk_if":47,"tk_else":48,"LISTA_VARIABLES":49,"igual":50,"mas":51,"MENOS":52,"coma":53,"L_PARAMETROS_METODO_FUNCION":54,"LLAMADA_PARAMETRO":55,"LISTA_LLAMADA_PARAMETRO":56,"EXP_RELACIONAL":57,"op_and":58,"op_or":59,"op_not":60,"mayor":61,"menor":62,"op_mayorigual":63,"op_menor_igual":64,"op_igual_igual":65,"op_not_igual":66,"por":67,"dividido":68,"op_xor":69,"entero":70,"decimal":71,"CADENA":72,"Caracter":73,"tk_int":74,"tk_double":75,"tk_boolean":76,"tk_char":77,"tk_return":78,"tk_break":79,"tk_continue":80,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"tk_public",8:"tk_class",9:"identificador",10:"llave_izq",12:"llave_der",13:"tk_interface",15:"tk_void",16:"parentesis_izq",18:"parentesis_der",22:"punto_coma",23:"tk_static",24:"tk_main",25:"tk_String",26:"corchete_izq",27:"corchete_der",28:"tk_args",33:"tk_for",37:"tk_while",38:"tk_do",41:"tk_System",42:"punto",43:"tk_out",44:"tk_println",46:"tk_print",47:"tk_if",48:"tk_else",50:"igual",51:"mas",52:"MENOS",53:"coma",58:"op_and",59:"op_or",60:"op_not",61:"mayor",62:"menor",63:"op_mayorigual",64:"op_menor_igual",65:"op_igual_igual",66:"op_not_igual",67:"por",68:"dividido",69:"op_xor",70:"entero",71:"decimal",72:"CADENA",73:"Caracter",74:"tk_int",75:"tk_double",76:"tk_boolean",77:"tk_char",78:"tk_return",79:"tk_break",80:"tk_continue"},
productions_: [0,[3,2],[4,2],[4,1],[6,6],[6,6],[11,2],[11,1],[14,9],[14,11],[14,13],[14,1],[30,2],[30,1],[19,2],[19,1],[32,1],[32,1],[32,12],[32,8],[32,10],[32,1],[32,1],[40,9],[40,9],[39,7],[39,11],[39,9],[29,3],[29,5],[29,4],[29,4],[29,4],[35,2],[35,2],[49,3],[49,1],[17,3],[17,2],[17,0],[54,4],[54,3],[31,5],[55,2],[55,1],[55,0],[56,3],[56,2],[34,3],[34,3],[34,2],[34,1],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,1],[45,3],[45,3],[45,3],[45,3],[45,2],[45,3],[45,3],[45,1],[45,1],[45,1],[45,1],[45,1],[20,1],[20,1],[20,1],[20,1],[20,1],[21,2],[21,1],[36,2],[36,2],[36,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$=new Nodo("INICIO");
							this.$.AgregarHijo($$[$0-1]);
							return {ast:this.$ , lista_error: Error_Array}; 
break;
case 2:
this.$ = new Nodo("INSTRUCCIONES");
											   this.$.AgregarHijo($$[$0-1]);
												this.$.AgregarHijo($$[$0]); 
break;
case 3:
this.$ = new Nodo("INSTRUCCIONES");
								 this.$.AgregarHijo($$[$0]); 
break;
case 4:
 this.$ = new Nodo("TIPO_INSTRUCCION");
																							  this.$.AgregarHijo(new Nodo("public","tk_public"));
																							  this.$.AgregarHijo(new Nodo("class","tk_class"));
																							  this.$.AgregarHijo(new Nodo($$[$0-3],"Id"));
																							  this.$.AgregarHijo(new Nodo("{","llave_izq"));
																							  this.$.AgregarHijo($$[$0-1]);
																							  this.$.AgregarHijo(new Nodo("}","llave_der"));
break;
case 5:
this.$ = new Nodo("TIPO_INSTRUCCION");
																								this.$.AgregarHijo(new Nodo("public","tk_public"));
																								this.$.AgregarHijo(new Nodo("interface","tk_interface"));
																								this.$.AgregarHijo(new Nodo("{","llave_izq"));
																							  	this.$.AgregarHijo($$[$0-1]);
																							  	this.$.AgregarHijo(new Nodo("}","llave_der"));
break;
case 6:
  this.$ = new Nodo("LISTA_METODO_FUNCION");
															  this.$.AgregarHijo($$[$0-1]);
															  this.$.AgregarHijo($$[$0]);
break;
case 7:
this.$ = new Nodo("LISTA_METODO_FUNCION");
									  this.$.AgregarHijo($$[$0]); 
break;
case 8:
this.$ = new Nodo("METODO_FUNCION");
																																					this.$.AgregarHijo(new Nodo("public","tk_public"));
																																					this.$.AgregarHijo(new Nodo("void","tk_void"));	
																																					this.$.AgregarHijo(new Nodo($$[$0-6],"Id"));	
																																					this.$.AgregarHijo(new Nodo("(","par_izq"));
																																					this.$.AgregarHijo($$[$0-4]);	
																																					this.$.AgregarHijo(new Nodo(")","par_der"));
																																					this.$.AgregarHijo(new Nodo("{","llave_izq"));
																																					this.$.AgregarHijo($$[$0-1]);
																																					this.$.AgregarHijo(new Nodo("}","llave_der"));					
																																													
break;
case 9:
this.$ = new Nodo("METODO_FUNCION");
																																					this.$.AgregarHijo(new Nodo("public","tk_public"));
																																					this.$.AgregarHijo($$[$0-9]);	
																																					this.$.AgregarHijo(new Nodo($$[$0-8],"Id"));	
																																					this.$.AgregarHijo(new Nodo("(","par_izq"));
																																					this.$.AgregarHijo($$[$0-6]);	
																																					this.$.AgregarHijo(new Nodo(")","par_der"));
																																					this.$.AgregarHijo(new Nodo("{","llave_izq"));
																																					this.$.AgregarHijo($$[$0-3]);
																																					this.$.AgregarHijo($$[$0-2]);
																																					this.$.AgregarHijo(new Nodo(";","punto_coma"));
																																				    this.$.AgregarHijo(new Nodo("}","llave_der"));
																																					
break;
case 10:
this.$ = new Nodo("METODO_FUNCION");
																																					this.$.AgregarHijo(new Nodo("public","tk_public"));
																																					this.$.AgregarHijo(new Nodo("static","tk_static"));
																																					this.$.AgregarHijo(new Nodo("void","tk_void"));	
																																					this.$.AgregarHijo(new Nodo("main","tk_main"));
																																					this.$.AgregarHijo(new Nodo("(","par_izq"));
																																					this.$.AgregarHijo(new Nodo("String","tk_string"));
																																					this.$.AgregarHijo(new Nodo("[","corchete_izq"));
																																					this.$.AgregarHijo(new Nodo("]","corchete_der"));
																																					this.$.AgregarHijo(new Nodo("args","tk_args"));
																																					this.$.AgregarHijo(new Nodo(")","par_der"));
																																					this.$.AgregarHijo(new Nodo("{","llave_izq"));
																																					this.$.AgregarHijo($$[$0-1]);
																																					this.$.AgregarHijo(new Nodo("}","llave_der"));
break;
case 11:
this.$ = new Nodo("METODO_FUNCION");
							    this.$.AgregarHijo($$[$0]); 
break;
case 12:
this.$ = new Nodo("SUB_INSTRUCCION_INTERFACE");
														                      this.$.AgregarHijo($$[$0-1]);
																			   this.$.AgregarHijo($$[$0]);	
break;
case 13:
this.$ = new Nodo("SUB_INSTRUCCION_INTERFACE");
										  this.$.AgregarHijo($$[$0]);
break;
case 14:
 this.$ = new Nodo("LISTA_SUBINSTRUCCION");
															  this.$.AgregarHijo($$[$0-1]);
															  this.$.AgregarHijo($$[$0]);
break;
case 15:
this.$ = new Nodo("LISTA_SUBINSTRUCCION");
									       this.$.AgregarHijo($$[$0]); 
break;
case 16: case 17: case 21:
this.$ = new Nodo("LISTA_SUBINSTRUCCION");
									 this.$.AgregarHijo($$[$0]);
break;
case 18:
this.$ = new Nodo("LISTA_SUBINSTRUCCION");
																																													this.$.AgregarHijo(new Nodo("for","tk_for"));
																																													this.$.AgregarHijo(new Nodo("(","par_izq"));
																										 																			this.$.AgregarHijo($$[$0-9]);
																																													this.$.AgregarHijo($$[$0-8]);
																																													this.$.AgregarHijo(new Nodo(";","punto_coma"));
																																													this.$.AgregarHijo(new Nodo($$[$0-6],"Id"));
																																													this.$.AgregarHijo($$[$0-5]);
																										 																			this.$.AgregarHijo(new Nodo(")","par_der"));
																																													this.$.AgregarHijo(new Nodo("{","llave_izq"));
																																													this.$.AgregarHijo($$[$0-3]);
																																													this.$.AgregarHijo($$[$0-2]);
																																													this.$.AgregarHijo(new Nodo("}","llave_der"));



				
break;
case 19:

																												this.$ = new Nodo("LISTA_SUBINSTRUCCION");
																												this.$.AgregarHijo(new Nodo("while","tk_whilet"));
																												this.$.AgregarHijo(new Nodo("(","par_izq"));
																										 		this.$.AgregarHijo($$[$0-5]);
																										 		this.$.AgregarHijo(new Nodo(")","par_der"));
																												this.$.AgregarHijo(new Nodo("{","llave_izq"));
																												this.$.AgregarHijo($$[$0-2]);
																												this.$.AgregarHijo($$[$0-1]);
																												this.$.AgregarHijo(new Nodo("}","llave_der"));
				
break;
case 20:
this.$ = new Nodo("LISTA_SUBINSTRUCCION");
																												this.$.AgregarHijo(new Nodo("do","tk_Do"));
																												this.$.AgregarHijo(new Nodo("{","llave_izq"));
																												this.$.AgregarHijo($$[$0-7]);
																												this.$.AgregarHijo($$[$0-6]);
																												this.$.AgregarHijo(new Nodo("}","llave_der"));
																												this.$.AgregarHijo(new Nodo("while","tk_whilet"));
																												this.$.AgregarHijo(new Nodo("(","par_izq"));
																										 		this.$.AgregarHijo($$[$0-2]);
																										 		this.$.AgregarHijo(new Nodo(")","par_der"));
																												this.$.AgregarHijo(new Nodo(";","punto_coma"));
break;
case 22:
this.$= new Nodo("LISTA_SUBINSTRUCCION");
									this.$.AgregarHijo($$[$0]);
break;
case 23:
this.$ = new Nodo("SENTENCIA_IMPRIMIR");
																												this.$.AgregarHijo(new Nodo("System","tk_System"));
																												this.$.AgregarHijo(new Nodo(".","tk_dot"));
																												this.$.AgregarHijo(new Nodo("out","tk_out"));
																												this.$.AgregarHijo(new Nodo(".","tk_dot"));
																												this.$.AgregarHijo(new Nodo("println","tk_print"));
																												this.$.AgregarHijo(new Nodo("(","par_izq"));
																										 		this.$.AgregarHijo($$[$0-2]);
																										 		this.$.AgregarHijo(new Nodo(")","par_der"));
																												this.$.AgregarHijo(new Nodo(";","punto_coma")); 
break;
case 24:
this.$ = new Nodo("SENTENCIA_IMPRIMIR");
																												this.$.AgregarHijo(new Nodo("System","tk_System"));
																												this.$.AgregarHijo(new Nodo(".","tk_dot"));
																												this.$.AgregarHijo(new Nodo("out","tk_out"));
																												this.$.AgregarHijo(new Nodo(".","tk_dot"));
																												this.$.AgregarHijo(new Nodo("print","tk_print"));
																												this.$.AgregarHijo(new Nodo("(","par_izq"));
																										 		this.$.AgregarHijo($$[$0-2]);
																										 		this.$.AgregarHijo(new Nodo(")","par_der"));
																												this.$.AgregarHijo(new Nodo(";","punto_coma"));
																																							
break;
case 25:
this.$ = new Nodo("SENTENCIA_CONTROL");
				  																					   this.$.AgregarHijo(new Nodo("if","tk_if"));
																										 this.$.AgregarHijo(new Nodo("(","par_izq"));
																										 this.$.AgregarHijo($$[$0-4]);
																										 this.$.AgregarHijo(new Nodo(")","par_der"));
																										 this.$.AgregarHijo(new Nodo("{","llave_izq"));
																										 this.$.AgregarHijo($$[$0-1]);
																										 this.$.AgregarHijo(new Nodo("}","llave_der"));
																										  
break;
case 26:
this.$ = new Nodo("SENTENCIA_CONTROL");
				  																					   												this.$.AgregarHijo(new Nodo("if","tk_if"));
																										 											this.$.AgregarHijo(new Nodo("(","par_izq"));
																										 											this.$.AgregarHijo($$[$0-8]);
																																					this.$.AgregarHijo(new Nodo(")","par_der"));
																																					this.$.AgregarHijo(new Nodo("{","llave_izq"));
																																					this.$.AgregarHijo($$[$0-5]);
																																					this.$.AgregarHijo(new Nodo("}","llave_der"));
																																					this.$.AgregarHijo(new Nodo("else","tk_else"));
																																					this.$.AgregarHijo(new Nodo("{","llave_izq"));
																																					this.$.AgregarHijo($$[$0-1]);
																																					this.$.AgregarHijo(new Nodo("}","llave_der"));

																																				
break;
case 27:
this.$ = new Nodo("SENTENCIA_CONTROL");
				  																					   							this.$.AgregarHijo(new Nodo("if","tk_if"));
																										 						this.$.AgregarHijo(new Nodo("(","par_izq"));
																										 						this.$.AgregarHijo($$[$0-6]);
																																this.$.AgregarHijo(new Nodo(")","par_der"));
																																this.$.AgregarHijo(new Nodo("{","llave_izq"));
																																this.$.AgregarHijo($$[$0-3]);
																																this.$.AgregarHijo(new Nodo("}","llave_der"));
																																this.$.AgregarHijo(new Nodo("else","tk_else"));
																																this.$.AgregarHijo($$[$0]);
					
				
break;
case 28:
this.$ = new Nodo("DECLARACION");
														this.$.AgregarHijo($$[$0-2]);
														this.$.AgregarHijo($$[$0-1]);
														this.$.AgregarHijo(new Nodo(";","punto_coma"));
break;
case 29:
 this.$ = new Nodo("DECLARACION");
																			this.$.AgregarHijo($$[$0-4]);
																			this.$.AgregarHijo($$[$0-3]);
																			this.$.AgregarHijo(new Nodo("=","igual"));
																			this.$.AgregarHijo($$[$0-1]);
																			 this.$.AgregarHijo(new Nodo(";","punto_coma"));
break;
case 30:
this.$ = new Nodo("DECLARACION");
																 this.$.AgregarHijo($$[$0-3]);
																this.$.AgregarHijo(new Nodo("=","igual"));
																this.$.AgregarHijo($$[$0-1]);
																this.$.AgregarHijo(new Nodo(";","punto_coma"));
break;
case 31:
 	  this.$ = new Nodo("DECLARACION");
														  this.$.AgregarHijo(new Nodo($$[$0-1],"Id"));
														  this.$.AgregarHijo(new Nodo("+","mas"));
								   						  this.$.AgregarHijo(new Nodo("+","mas"));
														  this.$.AgregarHijo(new Nodo(";","punto_coma"));
break;
case 32:
  this.$ = new Nodo("DECLARACION");
														  this.$.AgregarHijo(new Nodo($$[$0-1],"Id"));
														  this.$.AgregarHijo(new Nodo("-","menos"));
								   						  this.$.AgregarHijo(new Nodo("-","menos"));
														  this.$.AgregarHijo(new Nodo(";","punto_coma"));
															  
break;
case 33:
 this.$ = new Nodo("DECLARACION_CONTADOR"); 
							      this.$.AgregarHijo(new Nodo("+","mas"));
								   this.$.AgregarHijo(new Nodo("+","mas")); 
break;
case 34:
 this.$ = new Nodo("DECLARACION_CONTADOR");
					 				this.$.AgregarHijo(new Nodo("-","menos"));
					  				this.$.AgregarHijo(new Nodo("-","menos")); 
break;
case 35:
this.$ = new Nodo("LISTA_VARIABLES");
													  this.$.AgregarHijo($$[$0-2]);
													  this.$.AgregarHijo(new Nodo(",","coma"));
													  this.$.AgregarHijo(new Nodo($$[$0],"Id"));
break;
case 36:
this.$ = new Nodo("LISTA_VARIABLES");
						this.$.AgregarHijo(new Nodo($$[$0],"Id"));
break;
case 37:
 this.$ = new Nodo("PARAMETROS_METODO_FUNCION");
											      this.$.AgregarHijo($$[$0-2]);
												  this.$.AgregarHijo(new Nodo($$[$0-1],"Id"));
												  this.$.AgregarHijo($$[$0]); 
break;
case 38:
this.$ = new Nodo("PARAMETROS_METODO_FUNCION");
											      this.$.AgregarHijo($$[$0-1]);
												  this.$.AgregarHijo(new Nodo($$[$0],"Id"));
break;
case 40:
this.$ = new Nodo("L_PARAMETROS_METODO_FUNCION");
																						this.$.AgregarHijo($$[$0-3]);
																						this.$.AgregarHijo(new Nodo(",","coma"));
																						this.$.AgregarHijo($$[$0-1]);
																						this.$.AgregarHijo(new Nodo($$[$0],"Id")); 
break;
case 41:
 this.$ = new Nodo("L_PARAMETROS_METODO_FUNCION");
															this.$.AgregarHijo(new Nodo(",","comma"));
															this.$.AgregarHijo($$[$0-1]);
															this.$.AgregarHijo(new Nodo($$[$0],"Id")); 
break;
case 42:
 
		this.$ = new Nodo("LLAMADA_METODO");
		this.$.AgregarHijo(new Nodo($$[$0-4],"id"));
		this.$.AgregarHijo(new Nodo("(","par_izq"));
		this.$.AgregarHijo($$[$0-2]);
		this.$.AgregarHijo(new Nodo(")","par_der"));
		this.$.AgregarHijo(new Nodo(";","punto_coma"));
break;
case 43:
 this.$= new Nodo("LLAMADA_PARAMETRO","");
				 				 						  this.$.AgregarHijo($$[$0-1]);
															this.$.AgregarHijo($$[$0]);  
break;
case 44:
this.$= new Nodo("LLAMADA_PARAMETRO","");
				 				 this.$.AgregarHijo($$[$0]);
break;
case 46:
 this.$ = new Nodo("LISTA_LLAMADA_PARAMETRO","");
																	  this.$.AgregarHijo($$[$0-2]);
																	  this.$.AgregarHijo(new Nodo(",","comma"))
																	  this.$.AgregarHijo($$[$0]);
break;
case 47:
this.$ = new Nodo("LISTA_LLAMADA_PARAMETRO","");
									 this.$.AgregarHijo(new Nodo(",","comma"));
									 this.$.AgregarHijo($$[$0]);
break;
case 48:
this.$ = new Nodo("EXP_LOGICA","");
										 	  	this.$.AgregarHijo($$[$0-2]);
											  	this.$.AgregarHijo(new Nodo("&&","op_and"));
											  	this.$.AgregarHijo($$[$0]);  
break;
case 49:
this.$ = new Nodo("EXP_LOGICA","");
										 	  	this.$.AgregarHijo($$[$0-2]);
											  	this.$.AgregarHijo(new Nodo("||","op_or"));
											  	this.$.AgregarHijo($$[$0]);  
break;
case 50:
this.$ = new Nodo("EXP_LOGICA","");
												 this.$.AgregarHijo(new Nodo("!","not"));
												 this.$.AgregarHijo($$[$0]);  
break;
case 51:
 this.$ = new Nodo("EXP_LOGICA","");
												this.$.AgregarHijo($$[$0]); 
break;
case 52:
 this.$ = new Nodo("EXP_RELACIONAL","");
										 	  this.$.AgregarHijo($$[$0-2]);
											  this.$.AgregarHijo(new Nodo(">","mayor"));
											  this.$.AgregarHijo($$[$0]); 
break;
case 53:
 this.$ = new Nodo("EXP_RELACIONAL","");
										 	  this.$.AgregarHijo($$[$0-2]);
											  this.$.AgregarHijo(new Nodo("<","menor"));
											  this.$.AgregarHijo($$[$0]); 
break;
case 54:
 this.$ = new Nodo("EXP_RELACIONAL","");
										 	  this.$.AgregarHijo($$[$0-2]);
											  this.$.AgregarHijo(new Nodo(">=","mayor_igual"));
											  this.$.AgregarHijo($$[$0]);  
break;
case 55:
 this.$ = new Nodo("EXP_RELACIONAL","");
										 	  this.$.AgregarHijo($$[$0-2]);
											  this.$.AgregarHijo(new Nodo("<=","menor_igual"));
											  this.$.AgregarHijo($$[$0]); 
break;
case 56:
 this.$ = new Nodo("EXP_RELACIONAL","");
										 	  			  this.$.AgregarHijo($$[$0-2]);
											  			  this.$.AgregarHijo(new Nodo("==","igual_igual"));
											  			  this.$.AgregarHijo($$[$0]);  
break;
case 57:
 this.$ = new Nodo("EXP_RELACIONAL","");
										 	  			  this.$.AgregarHijo($$[$0-2]);
											  			  this.$.AgregarHijo(new Nodo("!=","not_igual"));
											  			  this.$.AgregarHijo($$[$0]); 
break;
case 58:
this.$ = new Nodo("EXP_RELACIONAL","");
					this.$.AgregarHijo($$[$0]);
break;
case 59:
 this.$ = new Nodo("EXP_NUMERICA","");
										 	this.$.AgregarHijo($$[$0-2]);
											this.$.AgregarHijo(new Nodo("+","mas"));
											this.$.AgregarHijo($$[$0]);
										 
break;
case 60:
  this.$ = new Nodo("EXP_NUMERICA","");
										 		this.$.AgregarHijo($$[$0-2]);
												this.$.AgregarHijo(new Nodo("-","menos"));
												this.$.AgregarHijo($$[$0]); 
break;
case 61:
  this.$ = new Nodo("EXP_NUMERICA","");
										 		this.$.AgregarHijo($$[$0-2]);
												this.$.AgregarHijo(new Nodo("*","por"));
												this.$.AgregarHijo($$[$0]); 
break;
case 62:
  this.$ = new Nodo("EXP_NUMERICA","");
										 		this.$.AgregarHijo($$[$0-2]);
												this.$.AgregarHijo(new Nodo("/","dividido"));
												this.$.AgregarHijo($$[$0]); 
break;
case 63:
 this.$ = new Nodo("EXP_NUMERICA","");
											this.$.AgregarHijo(new Nodo("-","menos"));
											this.$.AgregarHijo($$[$0]);
											
										 
break;
case 64:
this.$ = new Nodo("EXP_NUMERICA","");
										 		this.$.AgregarHijo($$[$0-2]);
												this.$.AgregarHijo(new Nodo("^","XOR"));
												this.$.AgregarHijo($$[$0]);
break;
case 65:
 this.$ = new Nodo("EXP_NUMERICA","");
													this.$.AgregarHijo(new Nodo("(","parentesis_izq"));
													this.$.AgregarHijo($$[$0-1]);
													this.$.AgregarHijo(new Nodo(")","parentesis_der"));
												 
break;
case 66:
  this.$ = new Nodo("EXP_NUMERICA","");
								   this.$.AgregarHijo(new Nodo($$[$0],"entero")); 
break;
case 67:
 this.$ = new Nodo("EXP_NUMERICA","");
								   this.$.AgregarHijo(new Nodo($$[$0],"decimal")) 
break;
case 68:
 this.$ = new Nodo("EXP_NUMERICA","");
								   this.$.AgregarHijo(new Nodo($$[$0],"cadena"))
break;
case 69:
 this.$ = new Nodo("EXP_NUMERICA","");
								   this.$.AgregarHijo(new Nodo($$[$0],"caracter"))
break;
case 70:
 this.$ = new Nodo("EXP_NUMERICA","");
								   this.$.AgregarHijo(new Nodo($$[$0],"id")); 
break;
case 71:
 this.$ = new Nodo("TIPO_DATO","");
					this.$.AgregarHijo(new Nodo($$[$0],"int")); 
break;
case 72:
 this.$ = new Nodo("TIPO_DATO","");
					this.$.AgregarHijo(new Nodo($$[$0],"double"));
break;
case 73:
 this.$ = new Nodo("TIPO_DATO","");
					this.$.AgregarHijo(new Nodo($$[$0],"String")); 
break;
case 74:
 this.$ = new Nodo("TIPO_DATO","");
					this.$.AgregarHijo(new Nodo($$[$0],"boolean")); 
break;
case 75:
 this.$ = new Nodo("TIPO_DATO","");
					this.$.AgregarHijo(new Nodo($$[$0],"char")); 
break;
case 76:
 this.$ = new Nodo("SENTENCIA_RETURN","");
											this.$.AgregarHijo(new Nodo("return","tk_return"));
											this.$.AgregarHijo($$[$0]);
break;
case 77:
this.$ = new Nodo("SENTENCIA_RETURN","");
											this.$.AgregarHijo(new Nodo("return","tk_return"));
break;
case 78:
 this.$ = new Nodo("SENTENCIA_BC","");
									this.$.AgregarHijo($$[$0-1]);
									this.$.AgregarHijo($$[$0]);  
break;
case 79:
 this.$ = new Nodo("SENTENCIA_BC","");
									   this.$.AgregarHijo($$[$0-1]);
									   this.$.AgregarHijo($$[$0]); 
break;
}
},
table: [{3:1,4:2,6:3,7:$V0},{1:[3]},{5:[1,5],6:6,7:$V0},o($V1,[2,3]),{8:[1,7],13:[1,8]},{1:[2,1]},o($V1,[2,2]),{9:[1,9]},{9:[1,10]},{10:[1,11]},{10:[1,12]},{7:$V2,9:$V3,11:13,14:14,20:17,25:$V4,29:16,49:18,74:$V5,75:$V6,76:$V7,77:$V8},{7:$V2,9:$V3,11:25,14:14,20:17,25:$V4,29:16,49:18,74:$V5,75:$V6,76:$V7,77:$V8},{7:$V2,9:$V3,12:[1,26],14:27,20:17,25:$V4,29:16,49:18,74:$V5,75:$V6,76:$V7,77:$V8},o($V9,[2,7]),{15:[1,28],20:29,23:[1,30],25:$V4,74:$V5,75:$V6,76:$V7,77:$V8},o($V9,[2,11]),{9:[1,32],49:31},{50:[1,33],53:$Va},o($Vb,$Vc,{51:$Vd,52:$Ve}),{9:[2,71]},{9:[2,72]},{9:[2,73]},{9:[2,74]},{9:[2,75]},{7:$V2,9:$V3,12:[1,37],14:27,20:17,25:$V4,29:16,49:18,74:$V5,75:$V6,76:$V7,77:$V8},o($V1,[2,4]),o($V9,[2,6]),{9:[1,38]},{9:[1,39]},{15:[1,40]},{22:[1,41],50:[1,42],53:$Va},o($Vf,$Vc),{9:$Vg,16:$Vh,45:43,52:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:[1,51]},{51:[1,52]},{52:[1,53]},o($V1,[2,5]),{16:[1,54]},{16:[1,55]},{24:[1,56]},o($Vn,[2,28]),{9:$Vg,16:$Vh,45:57,52:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{22:[1,58],51:$Vo,52:$Vp,67:$Vq,68:$Vr,69:$Vs},{9:$Vg,16:$Vh,45:64,52:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$Vg,16:$Vh,45:65,52:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},o($Vt,[2,66]),o($Vt,[2,67]),o($Vt,[2,68]),o($Vt,[2,69]),o($Vt,[2,70]),o($Vf,[2,35]),{22:[1,66]},{22:[1,67]},{17:68,18:$Vu,20:69,25:$V4,74:$V5,75:$V6,76:$V7,77:$V8},{17:70,18:$Vu,20:69,25:$V4,74:$V5,75:$V6,76:$V7,77:$V8},{16:[1,71]},{22:[1,72],51:$Vo,52:$Vp,67:$Vq,68:$Vr,69:$Vs},o($Vn,[2,30]),{9:$Vg,16:$Vh,45:73,52:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$Vg,16:$Vh,45:74,52:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$Vg,16:$Vh,45:75,52:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$Vg,16:$Vh,45:76,52:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$Vg,16:$Vh,45:77,52:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},o($Vt,[2,63]),{18:[1,78],51:$Vo,52:$Vp,67:$Vq,68:$Vr,69:$Vs},o($Vn,[2,31]),o($Vn,[2,32]),{18:[1,79]},{9:[1,80]},{18:[1,81]},{25:[1,82]},o($Vn,[2,29]),o($Vv,[2,59],{67:$Vq,68:$Vr,69:$Vs}),o($Vv,[2,60],{67:$Vq,68:$Vr,69:$Vs}),o($Vw,[2,61],{69:$Vs}),o($Vw,[2,62],{69:$Vs}),o($Vt,[2,64]),o($Vt,[2,65]),{10:[1,83]},{18:[2,38],53:[1,85],54:84},{10:[1,86]},{26:[1,87]},{9:$Vx,19:88,20:17,25:$V4,29:90,31:91,32:89,33:$Vy,37:$Vz,38:$VA,39:95,40:96,41:$VB,47:$VC,49:18,74:$V5,75:$V6,76:$V7,77:$V8},{18:[2,37],53:[1,100]},{20:101,25:$V4,74:$V5,75:$V6,76:$V7,77:$V8},{9:$Vx,19:102,20:17,25:$V4,29:90,31:91,32:89,33:$Vy,37:$Vz,38:$VA,39:95,40:96,41:$VB,47:$VC,49:18,74:$V5,75:$V6,76:$V7,77:$V8},{27:[1,103]},{9:$Vx,12:[1,104],20:17,25:$V4,29:90,31:91,32:105,33:$Vy,37:$Vz,38:$VA,39:95,40:96,41:$VB,47:$VC,49:18,74:$V5,75:$V6,76:$V7,77:$V8},o($VD,[2,15]),o($VD,[2,16]),o($VD,[2,17]),{16:[1,106]},{16:[1,107]},{10:[1,108]},o($VD,[2,21]),o($VD,[2,22]),o($Vb,$Vc,{16:[1,109],51:$Vd,52:$Ve}),{16:[1,110]},{42:[1,111]},{20:112,25:$V4,74:$V5,75:$V6,76:$V7,77:$V8},{9:[1,113]},{9:$Vx,20:17,21:114,25:$V4,29:90,31:91,32:105,33:$Vy,37:$Vz,38:$VA,39:95,40:96,41:$VB,47:$VC,49:18,74:$V5,75:$V6,76:$V7,77:$V8,78:[1,115]},{28:[1,116]},o($V9,[2,8]),o($VD,[2,14]),{9:$V3,20:17,25:$V4,29:117,49:18,74:$V5,75:$V6,76:$V7,77:$V8},{9:$Vg,16:$Vh,34:118,45:121,52:$Vi,57:119,60:$VE,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$Vx,19:122,20:17,25:$V4,29:90,31:91,32:89,33:$Vy,37:$Vz,38:$VA,39:95,40:96,41:$VB,47:$VC,49:18,74:$V5,75:$V6,76:$V7,77:$V8},{9:$Vg,16:$Vh,18:[2,45],45:124,52:$Vi,55:123,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$Vg,16:$Vh,34:125,45:121,52:$Vi,57:119,60:$VE,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{43:[1,126]},{9:[1,127]},o($VF,[2,41]),{22:[1,128]},{9:$Vg,16:$Vh,22:[2,77],45:129,52:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{18:[1,130]},{9:$Vg,16:$Vh,34:131,45:121,52:$Vi,57:119,60:$VE,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{18:[1,132]},o($VG,[2,51],{58:[1,133],59:[1,134]}),{9:$Vg,16:$Vh,45:121,52:$Vi,57:135,70:$Vj,71:$Vk,72:$Vl,73:$Vm},o($VH,[2,58],{51:$Vo,52:$Vp,61:[1,136],62:[1,137],63:[1,138],64:[1,139],65:[1,140],66:[1,141],67:$Vq,68:$Vr,69:$Vs}),{9:$Vx,12:$VI,20:17,25:$V4,29:90,31:91,32:105,33:$Vy,36:142,37:$Vz,38:$VA,39:95,40:96,41:$VB,47:$VC,49:18,74:$V5,75:$V6,76:$V7,77:$V8,79:$VJ,80:$VK},{18:[1,145]},{18:[2,44],51:$Vo,52:$Vp,53:[1,147],56:146,67:$Vq,68:$Vr,69:$Vs},{18:[1,148]},{42:[1,149]},o($VF,[2,40]),{12:[1,150]},{22:[2,76],51:$Vo,52:$Vp,67:$Vq,68:$Vr,69:$Vs},{10:[1,151]},{22:[1,152]},{10:[1,153]},{9:$Vg,16:$Vh,45:121,52:$Vi,57:154,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$Vg,16:$Vh,45:121,52:$Vi,57:155,70:$Vj,71:$Vk,72:$Vl,73:$Vm},o($VG,[2,50]),{9:$Vg,16:$Vh,45:156,52:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$Vg,16:$Vh,45:157,52:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$Vg,16:$Vh,45:158,52:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$Vg,16:$Vh,45:159,52:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$Vg,16:$Vh,45:160,52:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$Vg,16:$Vh,45:161,52:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{12:[1,162]},{22:[1,163]},{22:[1,164]},{22:[1,165]},{18:[2,43],53:[1,166]},{9:$Vg,16:$Vh,45:167,52:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{10:[1,168]},{44:[1,169],46:[1,170]},o($V9,[2,9]),{9:$Vx,19:171,20:17,25:$V4,29:90,31:91,32:89,33:$Vy,37:$Vz,38:$VA,39:95,40:96,41:$VB,47:$VC,49:18,74:$V5,75:$V6,76:$V7,77:$V8},{9:[1,172]},{9:$Vx,19:173,20:17,25:$V4,29:90,31:91,32:89,33:$Vy,37:$Vz,38:$VA,39:95,40:96,41:$VB,47:$VC,49:18,74:$V5,75:$V6,76:$V7,77:$V8},o($VG,[2,48]),o($VG,[2,49]),o($VH,[2,52],{51:$Vo,52:$Vp,67:$Vq,68:$Vr,69:$Vs}),o($VH,[2,53],{51:$Vo,52:$Vp,67:$Vq,68:$Vr,69:$Vs}),o($VH,[2,54],{51:$Vo,52:$Vp,67:$Vq,68:$Vr,69:$Vs}),o($VH,[2,55],{51:$Vo,52:$Vp,67:$Vq,68:$Vr,69:$Vs}),o($VH,[2,56],{51:$Vo,52:$Vp,67:$Vq,68:$Vr,69:$Vs}),o($VH,[2,57],{51:$Vo,52:$Vp,67:$Vq,68:$Vr,69:$Vs}),{37:[1,174]},{12:[2,78]},{12:[2,79]},o($VD,[2,42]),{9:$Vg,16:$Vh,45:175,52:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},o($VF,[2,47],{51:$Vo,52:$Vp,67:$Vq,68:$Vr,69:$Vs}),{9:$Vx,20:17,25:$V4,29:90,31:91,32:176,33:$Vy,37:$Vz,38:$VA,39:95,40:96,41:$VB,47:$VC,49:18,74:$V5,75:$V6,76:$V7,77:$V8},{16:[1,177]},{16:[1,178]},{9:$Vx,12:[1,179],20:17,25:$V4,29:90,31:91,32:105,33:$Vy,37:$Vz,38:$VA,39:95,40:96,41:$VB,47:$VC,49:18,74:$V5,75:$V6,76:$V7,77:$V8},{35:180,51:[1,181],52:[1,182]},{9:$Vx,12:$VI,20:17,25:$V4,29:90,31:91,32:105,33:$Vy,36:183,37:$Vz,38:$VA,39:95,40:96,41:$VB,47:$VC,49:18,74:$V5,75:$V6,76:$V7,77:$V8,79:$VJ,80:$VK},{16:[1,184]},o($VF,[2,46],{51:$Vo,52:$Vp,67:$Vq,68:$Vr,69:$Vs}),{12:[1,185]},{9:$Vg,16:$Vh,45:186,52:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},{9:$Vg,16:$Vh,45:187,52:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm},o($V9,[2,10]),{18:[1,188]},{51:[1,189]},{52:[1,190]},{12:[1,191]},{9:$Vg,16:$Vh,34:192,45:121,52:$Vi,57:119,60:$VE,70:$Vj,71:$Vk,72:$Vl,73:$Vm},o($VD,[2,25],{48:[1,193]}),{18:[1,194],51:$Vo,52:$Vp,67:$Vq,68:$Vr,69:$Vs},{18:[1,195],51:$Vo,52:$Vp,67:$Vq,68:$Vr,69:$Vs},{10:[1,196]},{18:[2,33]},{18:[2,34]},o($VD,[2,19]),{18:[1,197]},{10:[1,198],39:199,47:$VC},{22:[1,200]},{22:[1,201]},{9:$Vx,19:202,20:17,25:$V4,29:90,31:91,32:89,33:$Vy,37:$Vz,38:$VA,39:95,40:96,41:$VB,47:$VC,49:18,74:$V5,75:$V6,76:$V7,77:$V8},{22:[1,203]},{9:$Vx,20:17,25:$V4,29:90,31:91,32:204,33:$Vy,37:$Vz,38:$VA,39:95,40:96,41:$VB,47:$VC,49:18,74:$V5,75:$V6,76:$V7,77:$V8},o($VD,[2,27]),o($VD,[2,23]),o($VD,[2,24]),{9:$Vx,12:$VI,20:17,25:$V4,29:90,31:91,32:105,33:$Vy,36:205,37:$Vz,38:$VA,39:95,40:96,41:$VB,47:$VC,49:18,74:$V5,75:$V6,76:$V7,77:$V8,79:$VJ,80:$VK},o($VD,[2,20]),{12:[1,206]},{12:[1,207]},o($VD,[2,26]),o($VD,[2,18])],
defaultActions: {5:[2,1],20:[2,71],21:[2,72],22:[2,73],23:[2,74],24:[2,75],163:[2,78],164:[2,79],189:[2,33],190:[2,34]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	const Nodo = require('./AstTree');
	let Error_Array = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// comentario multiple líneas		
break;
case 1:// comentario simple línea
break;
case 2:return 7;
break;
case 3:return 23;
break;
case 4:return 8;
break;
case 5:return 13;
break;
case 6:return 15;
break;
case 7:return 24;
break;
case 8:return 28;
break;
case 9:return 41;
break;
case 10:return 43;
break;
case 11:return 46;
break;
case 12:return 44;
break;
case 13:return 74;
break;
case 14:return 75;
break;
case 15:return 77;
break;
case 16:return 76;
break;
case 17:return 25;
break;
case 18:return 33;
break;
case 19:return 37;
break;
case 20:return 38;
break;
case 21:return 79;
break;
case 22:return 78;
break;
case 23:return 80;
break;
case 24:return 47;
break;
case 25:return 48;
break;
case 26:return 22; 
break;
case 27:return 16; 
break;
case 28:return 18; 
break;
case 29:return 26; 
break;
case 30:return 27; 
break;
case 31:return 10
break;
case 32:return 12
break;
case 33:return 53; 
break;
case 34:return 42; 
break;
case 35:return 63;
break;
case 36:return 64;
break;
case 37:return 58;
break;
case 38:return 59;
break;
case 39:return 66;
break;
case 40:return 65;
break;
case 41:return 51;
break;
case 42:return 52;
break;
case 43:return 67;
break;
case 44:return 68;
break;
case 45:return 69;
break;
case 46:return 61;
break;
case 47:return 62;
break;
case 48:return 50; 
break;
case 49:return 60;
break;
case 50: /*ignore */
break;
case 51:/*it will count */
break;
case 52:// se ignoran espacios en blanco
break;
case 53:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 72; 
break;
case 54:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 73; 
break;
case 55:return 71; 
break;
case 56:return 70; 
break;
case 57:return 9; 
break;
case 58:return 5; 
break;
case 59: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
						  Error_Array.push('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);  
break;
}
},
rules: [/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\/\/.*)/i,/^(?:public\b)/i,/^(?:static\b)/i,/^(?:class\b)/i,/^(?:interface\b)/i,/^(?:void\b)/i,/^(?:main\b)/i,/^(?:args\b)/i,/^(?:System\b)/i,/^(?:out\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:String\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:return\b)/i,/^(?:continue\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\.)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:!)/i,/^(?:[ \r\t\f]+)/i,/^(?:\n)/i,/^(?:\s+)/i,/^(?:"[^\"]*")/i,/^(?:'[^']')/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}