/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,4],$V2=[2,5,7],$V3=[1,23],$V4=[1,19],$V5=[1,25],$V6=[1,38],$V7=[1,29],$V8=[1,32],$V9=[1,33],$Va=[1,34],$Vb=[1,35],$Vc=[1,36],$Vd=[1,37],$Ve=[1,27],$Vf=[1,28],$Vg=[1,30],$Vh=[1,31],$Vi=[1,42],$Vj=[1,43],$Vk=[1,44],$Vl=[2,7,9,13,21,29,64,68,69,70,71,82,83,84,85,86],$Vm=[2,77],$Vn=[1,57],$Vo=[19,23],$Vp=[1,59],$Vq=[1,60],$Vr=[1,61],$Vs=[1,62],$Vt=[1,63],$Vu=[1,64],$Vv=[1,65],$Vw=[1,66],$Vx=[1,67],$Vy=[1,68],$Vz=[1,69],$VA=[1,70],$VB=[1,71],$VC=[1,72],$VD=[1,73],$VE=[9,21,64,68,69,70,71,82],$VF=[1,75],$VG=[19,23,38,63,64,65,66,67,72,73,74,75,76,77,78,79,80,81],$VH=[2,7,13,20,29,83,84,85,86],$VI=[19,38],$VJ=[19,23,38,63,64,72,73,74,75,76,77,78,79,80,81],$VK=[19,23,38,63,64,65,66,72,73,74,75,76,77,78,79,80,81],$VL=[19,23,38,72,73,78,79],$VM=[19,23,38,72,73,74,75,76,77,78,79],$VN=[2,28],$VO=[23,38],$VP=[1,146],$VQ=[1,163],$VR=[1,165],$VS=[1,164],$VT=[1,168],$VU=[1,166],$VV=[1,167],$VW=[1,169],$VX=[1,170],$VY=[1,171],$VZ=[2,9,13,21,29,45,53,56,61,62,64,68,69,70,71,82,83,84,85,86,87,88,89],$V_=[1,189];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"LISTA_TIPO_INSTRUCCION":4,"EOF":5,"TIPO_INSTRUCCION":6,"tk_public":7,"tk_class":8,"identificador":9,"BLOQUESENTENCIAS_PADRE":10,"tk_interface":11,"BLOQUESENTENCIAS_PADRE_I":12,"llave_der":13,"llave_izq":14,"LISTA_SUB_INSTRUCCION":15,"LISTA_SUB_INSTRUCCION_I":16,"SUB_INSTRUCCION_I":17,"METODO_INTERFAZ":18,"punto_coma":19,"tk_void":20,"parentesis_izq":21,"PARAMETROS_METODO_FUNCION":22,"parentesis_der":23,"TYPE":24,"SUB_INSTRUCCION":25,"BLOQUESENTENCIAS_HIJO":26,"tk_static":27,"tk_main":28,"tk_String":29,"corchete_izq":30,"corchete_der":31,"tk_args":32,"DEFDECLARACION":33,"DEFASIGNACION":34,"LLAMADA_METODO":35,"EXPRESION":36,"L_PARAMETROS_METODO_FUNCION":37,"coma":38,"INSTRUCCIONES":39,"INSTRUCCION":40,"DEFIF":41,"DEFWHILE":42,"DEFFOR":43,"DEFDO":44,"tk_while":45,"DEFPRINT":46,"SENTENCIA_RETURN":47,"SENTENCIA_BC":48,"LISTA_VARIABLES":49,"igual":50,"LLAMADA_PARAMETRO":51,"LISTA_LLAMADA_PARAMETRO":52,"tk_if":53,"BLOQUESENTENCIAS":54,"tk_else":55,"tk_System":56,"punto":57,"tk_out":58,"tk_println":59,"tk_print":60,"tk_for":61,"tk_do":62,"mas":63,"MENOS":64,"por":65,"dividido":66,"op_xor":67,"entero":68,"decimal":69,"Caracter":70,"CADENA":71,"op_igual_igual":72,"op_not_igual":73,"menor":74,"mayor":75,"op_menor_igual":76,"op_mayorigual":77,"op_and":78,"op_or":79,"mas_mas":80,"menos_menos":81,"op_not":82,"tk_int":83,"tk_double":84,"tk_boolean":85,"tk_char":86,"tk_return":87,"tk_break":88,"tk_continue":89,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"tk_public",8:"tk_class",9:"identificador",11:"tk_interface",13:"llave_der",14:"llave_izq",19:"punto_coma",20:"tk_void",21:"parentesis_izq",23:"parentesis_der",27:"tk_static",28:"tk_main",29:"tk_String",30:"corchete_izq",31:"corchete_der",32:"tk_args",38:"coma",45:"tk_while",50:"igual",53:"tk_if",55:"tk_else",56:"tk_System",57:"punto",58:"tk_out",59:"tk_println",60:"tk_print",61:"tk_for",62:"tk_do",63:"mas",64:"MENOS",65:"por",66:"dividido",67:"op_xor",68:"entero",69:"decimal",70:"Caracter",71:"CADENA",72:"op_igual_igual",73:"op_not_igual",74:"menor",75:"mayor",76:"op_menor_igual",77:"op_mayorigual",78:"op_and",79:"op_or",80:"mas_mas",81:"menos_menos",82:"op_not",83:"tk_int",84:"tk_double",85:"tk_boolean",86:"tk_char",87:"tk_return",88:"tk_break",89:"tk_continue"},
productions_: [0,[3,2],[4,2],[4,1],[6,4],[6,4],[6,2],[10,3],[12,3],[16,2],[16,1],[17,2],[17,2],[18,6],[18,5],[18,6],[18,5],[15,2],[15,1],[25,7],[25,7],[25,11],[25,2],[25,2],[25,2],[25,2],[22,3],[22,2],[22,0],[37,4],[37,3],[26,3],[39,2],[39,1],[40,2],[40,2],[40,2],[40,1],[40,1],[40,1],[40,6],[40,2],[40,2],[40,2],[40,2],[33,2],[34,3],[34,1],[49,3],[49,5],[49,3],[49,1],[35,4],[51,2],[51,1],[51,0],[52,3],[52,2],[41,5],[41,7],[41,7],[46,8],[46,8],[42,5],[43,9],[44,2],[54,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,2],[36,1],[36,1],[36,1],[36,1],[36,1],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,2],[36,2],[36,2],[36,3],[24,1],[24,1],[24,1],[24,1],[24,1],[47,2],[47,1],[48,1],[48,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$=new Nodo("INICIO");
							this.$.AgregarHijo($$[$0-1]);
							let tempErrores =[];
							let tempTokens =[]
							tempErrores = Error_Array;
							tempTokens = Token_List;
							Error_Array = [];
							Token_List = []
							return {ast:this.$ , lista_error: tempErrores, lista_token: tempTokens};  
break;
case 2:
 this.$ = new Nodo("LISTA_TIPO_INSTRUCCION","");
																	this.$.AgregarHijo($$[$0-1]);
																		this.$.AgregarHijo($$[$0]); 
break;
case 3:
 this.$ = new Nodo("LISTA_TIPO_INSTRUCCION","");
											   this.$.AgregarHijo($$[$0]);
												 
break;
case 4:
 this.$ = new Nodo("TIPO_INSTRUCCION","");
																							  this.$.AgregarHijo(new Nodo("public","tk_public"));
																							  this.$.AgregarHijo(new Nodo("class","tk_class"));
																							  this.$.AgregarHijo(new Nodo($$[$0-1],"Id"));
																							  this.$.AgregarHijo($$[$0]);
break;
case 5:
this.$ = new Nodo("TIPO_INSTRUCCION","");
																			this.$.AgregarHijo(new Nodo("public","tk_public"));
																			this.$.AgregarHijo(new Nodo("interface","tk_interface"));
																			this.$.AgregarHijo(new Nodo($$[$0-1],"Id"));
																			this.$.AgregarHijo($$[$0]);
break;
case 6: case 25:
this.$ = new Nodo("error","error");
				Error_Array.push('Este es un error Sintactico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' +this._$.first_column); 
break;
case 7:
 this.$ = new Nodo("BLOQUESENTENCIAS_PADRE","");
																	this.$.AgregarHijo(new Nodo("{","llave_izq"));
																	this.$.AgregarHijo($$[$0-1]);
																	this.$.AgregarHijo(new Nodo("}","llave_der")); 
break;
case 8:
 this.$ = new Nodo("BLOQUE_S_INTERFAZ","");
																	this.$.AgregarHijo(new Nodo("{","llave_izq"));
																	this.$.AgregarHijo($$[$0-1]);
																	this.$.AgregarHijo(new Nodo("}","llave_der")); 
break;
case 9:
this.$ = new Nodo("LISTA_SUB_INSTRUCCION_I","");
																this.$.AgregarHijo($$[$0-1]);
																this.$.AgregarHijo($$[$0]); 
break;
case 10:
 this.$ = new Nodo("LISTA_SUB_INSTRUCCION","");
									  this.$.AgregarHijo($$[$0]);
break;
case 11:
 this.$ = new Nodo("SUB_INSTRUCCION_I","");
												this.$.AgregarHijo($$[$0-1]);
												this.$.AgregarHijo(new Nodo(";","punto_coma")); 
break;
case 12:
this.$ = new Nodo("error","error");
					Error_Array.push('Este es un error Sintactico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' +this._$.first_column); 
break;
case 13:
this.$ = new Nodo("METODO_INTERFAZ",""); 
																										this.$.AgregarHijo(new Nodo("public","tk_public"));
																										this.$.AgregarHijo(new Nodo("void","tk_void"));	
																										this.$.AgregarHijo(new Nodo($$[$0-3],"Id"));	
																										this.$.AgregarHijo(new Nodo("(","par_izq"));
																										this.$.AgregarHijo($$[$0-1]);	
																										this.$.AgregarHijo(new Nodo(")","par_der"));
																										 
break;
case 14:
 this.$ = new Nodo("METODO_INTERFAZ",""); 
																										this.$.AgregarHijo(new Nodo("void","tk_void"));	
																										this.$.AgregarHijo(new Nodo($$[$0-3],"Id"));	
																										this.$.AgregarHijo(new Nodo("(","par_izq"));
																										this.$.AgregarHijo($$[$0-1]);	
																										this.$.AgregarHijo(new Nodo(")","par_der")); 
break;
case 15:
this.$ = new Nodo("METODO_INTERFAZ",""); 
																										this.$.AgregarHijo(new Nodo("public","tk_public"));
																										this.$.AgregarHijo($$[$0-4]);	
																										this.$.AgregarHijo(new Nodo($$[$0-3],"Id"));	
																										this.$.AgregarHijo(new Nodo("(","par_izq"));
																										this.$.AgregarHijo($$[$0-1]);	
																										this.$.AgregarHijo(new Nodo(")","par_der"));
break;
case 16:
this.$ = new Nodo("METODO_INTERFAZ",""); 
																								this.$.AgregarHijo($$[$0-4]);
																								this.$.AgregarHijo(new Nodo($$[$0-3],"Id"));	
																								
																								this.$.AgregarHijo(new Nodo("(","par_izq"));
																								this.$.AgregarHijo($$[$0-1]);	
																								this.$.AgregarHijo(new Nodo(")","par_der"));
break;
case 17:
 this.$ = new Nodo("LISTA_SUB_INSTRUCCION","");
																this.$.AgregarHijo($$[$0-1]);
																this.$.AgregarHijo($$[$0]); 
break;
case 18:
this.$ = new Nodo("LISTA_SUB_INSTRUCCION","");
									  this.$.AgregarHijo($$[$0]); 
break;
case 19:
this.$ = new Nodo("SUB_INSTRUCCION","");
																																this.$.AgregarHijo(new Nodo("public","tk_public"));
																																this.$.AgregarHijo(new Nodo("void","tk_void"));	
																																this.$.AgregarHijo(new Nodo($$[$0-4],"Id"));	
																																this.$.AgregarHijo(new Nodo("(","par_izq"));
																																this.$.AgregarHijo($$[$0-2]);	
																																this.$.AgregarHijo(new Nodo(")","par_der"));
																																this.$.AgregarHijo($$[$0]);
break;
case 20:
this.$ = new Nodo("SUB_INSTRUCCION","");
																															this.$.AgregarHijo(new Nodo("public","tk_public"));
																															this.$.AgregarHijo($$[$0-5]);	
																															this.$.AgregarHijo(new Nodo($$[$0-4],"Id"));	
																															this.$.AgregarHijo(new Nodo("(","par_izq"));
																															this.$.AgregarHijo($$[$0-2]);	
																															this.$.AgregarHijo(new Nodo(")","par_der"));
																															this.$.AgregarHijo($$[$0]);
break;
case 21:
this.$ = new Nodo("SUB_INSTRUCCION","");
																																					this.$.AgregarHijo(new Nodo("public","tk_public"));
																																					this.$.AgregarHijo(new Nodo("static","tk_static"));
																																					this.$.AgregarHijo(new Nodo("void","tk_void"));	
																																					this.$.AgregarHijo(new Nodo("main","tk_main"));
																																					this.$.AgregarHijo(new Nodo("(","par_izq"));
																																					this.$.AgregarHijo(new Nodo("String","tk_string"));
																																					this.$.AgregarHijo(new Nodo("[","corchete_izq"));
																																					this.$.AgregarHijo(new Nodo("]","corchete_der"));
																																					this.$.AgregarHijo(new Nodo("args","tk_args"));
																																					this.$.AgregarHijo(new Nodo(")","par_der"));
																																					this.$.AgregarHijo($$[$0]);
break;
case 22:
this.$ = new Nodo("SUB_INSTRUCCION","");
											 this.$.AgregarHijo($$[$0-1]);
											 this.$.AgregarHijo(new Nodo(";","punto_coma"));
break;
case 23: case 24:
  this.$ = new Nodo("SUB_INSTRUCCION","");
								  	   this.$.AgregarHijo($$[$0-1]);
								  	   this.$.AgregarHijo(new Nodo(";","punto_coma"));
break;
case 26:
this.$ = new Nodo("PARAMETROS_METODO_FUNCION","");
											      						  this.$.AgregarHijo($$[$0-2]);
												  						  this.$.AgregarHijo($$[$0-1]);
																		  this.$.AgregarHijo($$[$0]);  
break;
case 27:
this.$ = new Nodo("PARAMETROS_METODO_FUNCION");
											      this.$.AgregarHijo($$[$0-1]);
												  this.$.AgregarHijo($$[$0]);
break;
case 29:
this.$ = new Nodo("L_PARAMETROS_METODO_FUNCION","");
																						
																						this.$.AgregarHijo($$[$0-3]);
																						this.$.AgregarHijo(new Nodo(",","coma"));
																						this.$.AgregarHijo($$[$0-1]);
																						this.$.AgregarHijo($$[$0]);  
break;
case 30:
this.$ = new Nodo("L_PARAMETROS_METODO_FUNCION","");
						   							this.$.AgregarHijo(new Nodo(",","coma"));
													this.$.AgregarHijo($$[$0-1]);
													this.$.AgregarHijo($$[$0]);
break;
case 31:
this.$ = new Nodo("BLOQUESENTENCIAS_HIJO","");
													this.$.AgregarHijo(new Nodo("{","llave_izq"));
													this.$.AgregarHijo($$[$0-1]);
													this.$.AgregarHijo(new Nodo("}","llave_der")); 
break;
case 32:
  this.$ = new Nodo("INSTRUCCIONES","");
										this.$.AgregarHijo($$[$0-1]);
									    this.$.AgregarHijo($$[$0]); 
break;
case 33:
  this.$ = new Nodo("INSTRUCCIONES","");
										this.$.AgregarHijo($$[$0]);
									 
break;
case 34:
  this.$ = new Nodo ("INSTRUCCION","");
								  	   this.$.AgregarHijo($$[$0-1]);
								  	   this.$.AgregarHijo(new Nodo(";","punto_coma"));
break;
case 35:
  this.$ = new Nodo ("INSTRUCCION");
								  	   this.$.AgregarHijo($$[$0-1]);
								  	   this.$.AgregarHijo(new Nodo(";","punto_coma"));
break;
case 36:
  this.$ = new Nodo ("INSTRUCCION","");
								  	   this.$.AgregarHijo($$[$0-1]);
								       this.$.AgregarHijo(new Nodo(";","punto_coma"));
break;
case 37: case 38:
 this.$ = new Nodo ("INSTRUCCION","");
								this.$.AgregarHijo($$[$0]); 
break;
case 39:
this.$ = new Nodo ("INSTRUCCION","");
								this.$.AgregarHijo($$[$0]); 
break;
case 40:
this.$ = new Nodo ("INSTRUCCION","");
								 										 this.$.AgregarHijo($$[$0-5]);
								  										 this.$.AgregarHijo(new Nodo("while","tk_while"));
																		 this.$.AgregarHijo(new Nodo("(","parentesis_izq"));
																		 this.$.AgregarHijo($$[$0-2]);
																		 this.$.AgregarHijo(new Nodo("(","parentesis_izq"));
																		 this.$.AgregarHijo(new Nodo(";","punto_coma"));
break;
case 41: case 43:
 this.$ = new Nodo ("INSTRUCCION","");
								  this.$.AgregarHijo($$[$0-1]);
								  this.$.AgregarHijo(new Nodo(";","punto_coma")); 
break;
case 42:
 this.$ = new Nodo ("INSTRUCCION","");
								  	this.$.AgregarHijo($$[$0-1]);
								  	this.$.AgregarHijo(new Nodo(";","punto_coma")); 
break;
case 44:
this.$ = new Nodo("error","error");
	Error_Array.push('Este es un error Sintactico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' +this._$.first_column); 
break;
case 45:
this.$= new Nodo ("DEFDECLARACION","");
										this.$.AgregarHijo($$[$0-1]);
										this.$.AgregarHijo($$[$0]);
										
break;
case 46:
this.$= new Nodo ("DEFASIGNACION","");
												 this.$.AgregarHijo(new Nodo($$[$0-2],"Id"));
												 this.$.AgregarHijo(new Nodo("=","igual"));
												 this.$.AgregarHijo($$[$0]);
break;
case 47:
this.$= new Nodo ("DEFASIGNACION","");
							this.$.AgregarHijo($$[$0]);
break;
case 48:
this.$ = new Nodo("LISTA_VARIABLES","");
													  this.$.AgregarHijo($$[$0-2]);
													  this.$.AgregarHijo(new Nodo(",","coma"));
													  this.$.AgregarHijo(new Nodo($$[$0],"Id"));
													  
break;
case 49:
this.$ = new Nodo("LISTA_VARIABLES","");
													  this.$.AgregarHijo($$[$0-4]);
													  this.$.AgregarHijo(new Nodo(",","coma"));
													  this.$.AgregarHijo(new Nodo($$[$0-2],"Id"));
													  this.$.AgregarHijo(new Nodo("=","igual"));
													  this.$.AgregarHijo($$[$0]);
													  
break;
case 50:
this.$ = new Nodo("LISTA_VARIABLES","");
								this.$.AgregarHijo(new Nodo($$[$0-2],"Id"));
								this.$.AgregarHijo(new Nodo("=","igual"));
								this.$.AgregarHijo($$[$0]);
break;
case 51:
this.$ = new Nodo("LISTA_VARIABLES");
								this.$.AgregarHijo(new Nodo($$[$0],"Id"));
break;
case 52:
 
		this.$ = new Nodo("LLAMADA_METODO","");
		this.$.AgregarHijo(new Nodo($$[$0-3],"Id"));
		this.$.AgregarHijo(new Nodo("(","par_izq"));
		this.$.AgregarHijo($$[$0-1]);
		this.$.AgregarHijo(new Nodo(")","par_der"));
break;
case 53:
 this.$= new Nodo("LLAMADA_PARAMETRO","");
				 				 						  this.$.AgregarHijo($$[$0-1]);
															this.$.AgregarHijo($$[$0]);  
break;
case 54:
this.$= new Nodo("LLAMADA_PARAMETRO","");
				 				 this.$.AgregarHijo($$[$0]);
break;
case 56:
 this.$ = new Nodo("LISTA_LLAMADA_PARAMETRO","");
																	  this.$.AgregarHijo($$[$0-2]);
																	  this.$.AgregarHijo(new Nodo(",","comma"))
																	  this.$.AgregarHijo($$[$0]);
break;
case 57:
this.$ = new Nodo("LISTA_LLAMADA_PARAMETRO","");
									 this.$.AgregarHijo(new Nodo(",","comma"));
									 this.$.AgregarHijo($$[$0]);
break;
case 58:
 	this.$ = new Nodo("DEFIF","");
																			this.$.AgregarHijo(new Nodo("if","tk_if"));
																			this.$.AgregarHijo(new Nodo("(","par_izq"));
																			this.$.AgregarHijo($$[$0-2]);
																			this.$.AgregarHijo(new Nodo(")","par_der"));
																			this.$.AgregarHijo($$[$0]);
break;
case 59:
 	this.$ = new Nodo("DEFIF","");
																			this.$.AgregarHijo(new Nodo("if","tk_if"));
																			this.$.AgregarHijo(new Nodo("(","par_izq"));
																			this.$.AgregarHijo($$[$0-4]);
																			this.$.AgregarHijo(new Nodo(")","par_der"));
																			this.$.AgregarHijo($$[$0-2]);
																			this.$.AgregarHijo(new Nodo("else","tk_else")); 
																			this.$.AgregarHijo($$[$0]);
break;
case 60:
this.$ = new Nodo("DEFIF","");
																			this.$.AgregarHijo(new Nodo("if","tk_if"));
																			this.$.AgregarHijo(new Nodo("(","par_izq"));
																			this.$.AgregarHijo($$[$0-4]);
																			this.$.AgregarHijo(new Nodo(")","par_der"));
																			this.$.AgregarHijo($$[$0-2]);
																			this.$.AgregarHijo(new Nodo("else","tk_else")); 
																			this.$.AgregarHijo($$[$0]);
																			
																			
break;
case 61:
this.$ = new Nodo("DEFPRINT","");
																						this.$.AgregarHijo(new Nodo("System","tk_System"));
																						this.$.AgregarHijo(new Nodo(".","tk_dot"));
																						this.$.AgregarHijo(new Nodo("out","tk_out"));
																						this.$.AgregarHijo(new Nodo(".","tk_dot"));
																						this.$.AgregarHijo(new Nodo("println","tk_print"));
																						this.$.AgregarHijo(new Nodo("(","par_izq"));
																						this.$.AgregarHijo($$[$0-1]);
																						this.$.AgregarHijo(new Nodo(")","par_der"));
break;
case 62:
this.$ = new Nodo("DEFPRINT","");
																						this.$.AgregarHijo(new Nodo("System","tk_System"));
																						this.$.AgregarHijo(new Nodo(".","tk_dot"));
																						this.$.AgregarHijo(new Nodo("out","tk_out"));
																						this.$.AgregarHijo(new Nodo(".","tk_dot"));
																						this.$.AgregarHijo(new Nodo("print","tk_print"));
																						this.$.AgregarHijo(new Nodo("(","par_izq"));
																						this.$.AgregarHijo($$[$0-1]);
																						this.$.AgregarHijo(new Nodo(")","par_der"));
break;
case 63:
 this.$ = new Nodo("DEFWHILE","");
																			this.$.AgregarHijo(new Nodo("while","tk_while"));
																			this.$.AgregarHijo(new Nodo("(","par_izq"));
																			this.$.AgregarHijo($$[$0-2]);
																			this.$.AgregarHijo(new Nodo(")","par_der"));
																			this.$.AgregarHijo($$[$0]); 
break;
case 64:
 this.$ = new Nodo("DEFFOR","");
																															this.$.AgregarHijo(new Nodo("for","tk_for"));
																															this.$.AgregarHijo(new Nodo("(","par_izq"));
																															this.$.AgregarHijo($$[$0-6]);
																															this.$.AgregarHijo(new Nodo(";","punto_coma"));
																															this.$.AgregarHijo($$[$0-4]);
																															this.$.AgregarHijo(new Nodo(";","punto_coma"));
																															this.$.AgregarHijo($$[$0-2]);
																															this.$.AgregarHijo(new Nodo(")","par_der"));
																															this.$.AgregarHijo($$[$0]); 
break;
case 65:
 this.$= new Nodo("DEFDO","");
								this.$.AgregarHijo(new Nodo("do","tk_do"));
								this.$.AgregarHijo($$[$0]); 
break;
case 66:
 this.$ = new Nodo("BLOQUESENTENCIAS","");
	
											this.$.AgregarHijo(new Nodo("{","llave_izq"));
											this.$.AgregarHijo($$[$0-1]);
											this.$.AgregarHijo(new Nodo("}","llave_der")); 
break;
case 67:
 this.$ = new Nodo ("EXPRESION",""); 
											this.$.AgregarHijo($$[$0-2]);
											this.$.AgregarHijo(new Nodo("+","mas"));
											this.$.AgregarHijo($$[$0]);
break;
case 68:
 this.$ = new Nodo ("EXPRESION",""); 
											this.$.AgregarHijo($$[$0-2]);
											this.$.AgregarHijo(new Nodo("-","menos"));
											this.$.AgregarHijo($$[$0]); 
break;
case 69:
  this.$ = new Nodo ("EXPRESION",""); 
											this.$.AgregarHijo($$[$0-2]);
											this.$.AgregarHijo(new Nodo("*","por"));
											this.$.AgregarHijo($$[$0]); 
break;
case 70:
 this.$ = new Nodo ("EXPRESION",""); 
											this.$.AgregarHijo($$[$0-2]);
											this.$.AgregarHijo(new Nodo("/","dividido"));
											this.$.AgregarHijo($$[$0]); 
break;
case 71:
 this.$ = new Nodo ("EXPRESION",""); 
											this.$.AgregarHijo($$[$0-2]);
											this.$.AgregarHijo(new Nodo("^","op_xor"));
											this.$.AgregarHijo($$[$0]); 
break;
case 72:
this.$ = new Nodo ("EXPRESION","");
											this.$.AgregarHijo(new Nodo ("-","menos"));	
											this.$.AgregarHijo($$[$0]);	
break;
case 73:
 this.$ = new Nodo ("EXPRESION","");
											this.$.AgregarHijo(new Nodo($$[$0],"entero"));
break;
case 74:
  this.$ = new Nodo ("EXPRESION","");
											this.$.AgregarHijo(new Nodo($$[$0],"decimal")); 
break;
case 75:
  this.$ = new Nodo ("EXPRESION","");
											this.$.AgregarHijo(new Nodo($$[$0],"Caracter")); 
break;
case 76:
 this.$ = new Nodo ("EXPRESION","");
											this.$.AgregarHijo(new Nodo($$[$0],"CADENA")); 
break;
case 77:
  this.$ = new Nodo ("EXPRESION","");
											this.$.AgregarHijo(new Nodo($$[$0],"Id")); 
break;
case 78:
  this.$ = new Nodo ("EXPRESION",""); 
											this.$.AgregarHijo($$[$0-2]);
											this.$.AgregarHijo(new Nodo("==","op_igual_igual"));
											this.$.AgregarHijo($$[$0]); 
break;
case 79:
 this.$ = new Nodo ("EXPRESION",""); 
											this.$.AgregarHijo($$[$0-2]);
											this.$.AgregarHijo(new Nodo("!=","op_not_igual"));
											this.$.AgregarHijo($$[$0]);  
break;
case 80:
 this.$ = new Nodo ("EXPRESION",""); 
											this.$.AgregarHijo($$[$0-2]);
											this.$.AgregarHijo(new Nodo("<","menor"));
											this.$.AgregarHijo($$[$0]);  
break;
case 81:
 this.$ = new Nodo ("EXPRESION",""); 
											this.$.AgregarHijo($$[$0-2]);
											this.$.AgregarHijo(new Nodo(">","mayor"));
											this.$.AgregarHijo($$[$0]);  
break;
case 82:
 this.$ = new Nodo ("EXPRESION",""); 
											this.$.AgregarHijo($$[$0-2]);
											this.$.AgregarHijo(new Nodo("<=","op_menor_igual"));
											this.$.AgregarHijo($$[$0]);  
break;
case 83:
 this.$ = new Nodo ("EXPRESION",""); 
											this.$.AgregarHijo($$[$0-2]);
											this.$.AgregarHijo(new Nodo(">=","op_mayorigual"));
											this.$.AgregarHijo($$[$0]);  
break;
case 84:
 this.$ = new Nodo ("EXPRESION",""); 
											this.$.AgregarHijo($$[$0-2]);
											this.$.AgregarHijo(new Nodo("&&","op_and"));
											this.$.AgregarHijo($$[$0]);  
break;
case 85:
 this.$ = new Nodo ("EXPRESION",""); 
											this.$.AgregarHijo($$[$0-2]);
											this.$.AgregarHijo(new Nodo("||","op_or"));
											this.$.AgregarHijo($$[$0]);  
break;
case 86:
this.$ = new Nodo ("EXPRESION",""); 
											this.$.AgregarHijo($$[$0-1]);
											this.$.AgregarHijo(new Nodo("++","mas_mas")); 
break;
case 87:
this.$ = new Nodo ("EXPRESION",""); 
											this.$.AgregarHijo($$[$0-1]);
											this.$.AgregarHijo(new Nodo("--","menos_menos"));
break;
case 88:
 this.$ = new Nodo ("EXPRESION",""); 
											this.$.AgregarHijo(new Nodo("!","op_not"));
											this.$.AgregarHijo($$[$0]); 
break;
case 89:
 this.$ = new Nodo ("EXPRESION",""); 
											this.$.AgregarHijo(new Nodo("(","parenteisis_izq"));
											this.$.AgregarHijo($$[$0-1]);
											this.$.AgregarHijo(new Nodo(")","parentesis_der"));  
break;
case 90:
 this.$ = new Nodo("TYPE","");
					this.$.AgregarHijo(new Nodo($$[$0],"int")); 
break;
case 91:
 this.$ = new Nodo("TYPE","");
					this.$.AgregarHijo(new Nodo($$[$0],"double"));
break;
case 92:
 this.$ = new Nodo("TYPE","");
					this.$.AgregarHijo(new Nodo($$[$0],"String")); 
break;
case 93:
 this.$ = new Nodo("TYPE","");
					this.$.AgregarHijo(new Nodo($$[$0],"boolean")); 
break;
case 94:
 this.$ = new Nodo("TYPE","");
					this.$.AgregarHijo(new Nodo($$[$0],"char")); 
break;
case 95:
 this.$ = new Nodo("SENTENCIA_RETURN","");
											this.$.AgregarHijo(new Nodo("return","tk_return"));
											this.$.AgregarHijo($$[$0]);
break;
case 96:
this.$ = new Nodo("SENTENCIA_RETURN","");
											this.$.AgregarHijo(new Nodo("return","tk_return"));
break;
case 97:
 this.$ = new Nodo("SENTENCIA_BC","");
						  this.$.AgregarHijo(new Nodo("break","tk_break"));
									
								  
break;
case 98:
 this.$ = new Nodo("SENTENCIA_BC","");
									  this.$.AgregarHijo(new Nodo("continue","tk_continue"));
									    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1},{1:[3]},{2:$V0,5:[1,6],6:7,7:$V1},o($V2,[2,3]),{8:[1,8],11:[1,9]},{13:[1,10]},{1:[2,1]},o($V2,[2,2]),{9:[1,11]},{9:[1,12]},o($V2,[2,6]),{10:13,14:[1,14]},{12:15,14:[1,16]},o($V2,[2,4]),{2:$V3,7:$V4,9:$V5,15:17,21:$V6,24:24,25:18,29:$V7,33:20,34:21,35:22,36:26,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd,83:$Ve,84:$Vf,85:$Vg,86:$Vh},o($V2,[2,5]),{2:$Vi,7:$Vj,16:39,17:40,18:41,20:$Vk,24:45,29:$V7,83:$Ve,84:$Vf,85:$Vg,86:$Vh},{2:$V3,7:$V4,9:$V5,13:[1,46],21:$V6,24:24,25:47,29:$V7,33:20,34:21,35:22,36:26,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd,83:$Ve,84:$Vf,85:$Vg,86:$Vh},o($Vl,[2,18]),{20:[1,48],24:49,27:[1,50],29:$V7,83:$Ve,84:$Vf,85:$Vg,86:$Vh},{19:[1,51]},{19:[1,52]},{19:[1,53]},{13:[1,54]},{9:[1,56],49:55},o([19,63,64,65,66,67,72,73,74,75,76,77,78,79,80,81],$Vm,{21:[1,58],50:$Vn}),o($Vo,[2,47],{63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD}),o($VE,[2,90]),o($VE,[2,91]),o($VE,[2,92]),o($VE,[2,93]),o($VE,[2,94]),{9:$VF,21:$V6,36:74,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd},o($VG,[2,73]),o($VG,[2,74]),o($VG,[2,75]),o($VG,[2,76]),{9:$VF,21:$V6,36:76,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd},{9:$VF,21:$V6,36:77,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd},{2:$Vi,7:$Vj,13:[1,78],17:79,18:41,20:$Vk,24:45,29:$V7,83:$Ve,84:$Vf,85:$Vg,86:$Vh},o($VH,[2,10]),{19:[1,80]},{19:[1,81]},{20:[1,82],24:83,29:$V7,83:$Ve,84:$Vf,85:$Vg,86:$Vh},{9:[1,84]},{9:[1,85]},o($V2,[2,7]),o($Vl,[2,17]),{9:[1,86]},{9:[1,87]},{20:[1,88]},o($Vl,[2,22]),o($Vl,[2,23]),o($Vl,[2,24]),o($Vl,[2,25]),{19:[2,45],38:[1,89]},o($VI,[2,51],{50:[1,90]}),{9:$VF,21:$V6,36:91,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd},{9:$VF,21:$V6,23:[2,55],36:93,51:92,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd},{9:$VF,21:$V6,36:94,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd},{9:$VF,21:$V6,36:95,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd},{9:$VF,21:$V6,36:96,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd},{9:$VF,21:$V6,36:97,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd},{9:$VF,21:$V6,36:98,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd},{9:$VF,21:$V6,36:99,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd},{9:$VF,21:$V6,36:100,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd},{9:$VF,21:$V6,36:101,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd},{9:$VF,21:$V6,36:102,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd},{9:$VF,21:$V6,36:103,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd},{9:$VF,21:$V6,36:104,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd},{9:$VF,21:$V6,36:105,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd},{9:$VF,21:$V6,36:106,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd},o($VG,[2,86]),o($VG,[2,87]),o($VG,[2,72]),o($VG,$Vm),o($VG,[2,88]),{23:[1,107],63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD},o($V2,[2,8]),o($VH,[2,9]),o($VH,[2,11]),o($VH,[2,12]),{9:[1,108]},{9:[1,109]},{21:[1,110]},{21:[1,111]},{21:[1,112]},{21:[1,113]},{28:[1,114]},{9:[1,115]},{9:$VF,21:$V6,36:116,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd},o($Vo,[2,46],{63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD}),{23:[1,117]},{23:[2,54],38:[1,119],52:118,63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD},o($VJ,[2,67],{65:$Vr,66:$Vs,67:$Vt}),o($VJ,[2,68],{65:$Vr,66:$Vs,67:$Vt}),o($VK,[2,69],{67:$Vt}),o($VK,[2,70],{67:$Vt}),o($VG,[2,71]),o($VL,[2,78],{63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,74:$Vw,75:$Vx,76:$Vy,77:$Vz,80:$VC,81:$VD}),o($VL,[2,79],{63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,74:$Vw,75:$Vx,76:$Vy,77:$Vz,80:$VC,81:$VD}),o($VM,[2,80],{63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,80:$VC,81:$VD}),o($VM,[2,81],{63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,80:$VC,81:$VD}),o($VM,[2,82],{63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,80:$VC,81:$VD}),o($VM,[2,83],{63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,80:$VC,81:$VD}),o([19,23,38,78,79],[2,84],{63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,80:$VC,81:$VD}),o([19,23,38,79],[2,85],{63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,80:$VC,81:$VD}),o($VG,[2,89]),{21:[1,120]},{21:[1,121]},{22:122,23:$VN,24:123,29:$V7,83:$Ve,84:$Vf,85:$Vg,86:$Vh},{22:124,23:$VN,24:123,29:$V7,83:$Ve,84:$Vf,85:$Vg,86:$Vh},{22:125,23:$VN,24:123,29:$V7,83:$Ve,84:$Vf,85:$Vg,86:$Vh},{22:126,23:$VN,24:123,29:$V7,83:$Ve,84:$Vf,85:$Vg,86:$Vh},{21:[1,127]},o($VI,[2,48],{50:[1,128]}),o($VI,[2,50],{63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD}),{19:[2,52]},{23:[2,53],38:[1,129]},{9:$VF,21:$V6,36:130,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd},{22:131,23:$VN,24:123,29:$V7,83:$Ve,84:$Vf,85:$Vg,86:$Vh},{22:132,23:$VN,24:123,29:$V7,83:$Ve,84:$Vf,85:$Vg,86:$Vh},{23:[1,133]},{9:$VF,21:$V6,36:134,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd},{23:[1,135]},{23:[1,136]},{23:[1,137]},{29:[1,138]},{9:$VF,21:$V6,36:139,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd},{9:$VF,21:$V6,36:140,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd},o($VO,[2,57],{63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD}),{23:[1,141]},{23:[1,142]},{19:[2,14]},{23:[2,27],37:143,38:[1,144],63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD},{19:[2,16]},{14:$VP,26:145},{14:$VP,26:147},{30:[1,148]},o($VI,[2,49],{63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD}),o($VO,[2,56],{63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD}),{19:[2,13]},{19:[2,15]},{23:[2,26],38:[1,149]},{24:150,29:$V7,83:$Ve,84:$Vf,85:$Vg,86:$Vh},o($Vl,[2,19]),{2:$VQ,9:$V5,21:$V6,24:24,29:$V7,33:153,34:154,35:155,36:26,39:151,40:152,41:156,42:157,43:158,44:159,45:$VR,46:160,47:161,48:162,53:$VS,56:$VT,61:$VU,62:$VV,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd,83:$Ve,84:$Vf,85:$Vg,86:$Vh,87:$VW,88:$VX,89:$VY},o($Vl,[2,20]),{31:[1,172]},{24:173,29:$V7,83:$Ve,84:$Vf,85:$Vg,86:$Vh},{9:$VF,21:$V6,36:174,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd},{2:$VQ,9:$V5,13:[1,175],21:$V6,24:24,29:$V7,33:153,34:154,35:155,36:26,40:176,41:156,42:157,43:158,44:159,45:$VR,46:160,47:161,48:162,53:$VS,56:$VT,61:$VU,62:$VV,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd,83:$Ve,84:$Vf,85:$Vg,86:$Vh,87:$VW,88:$VX,89:$VY},o($VZ,[2,33]),{19:[1,177]},{19:[1,178]},{19:[1,179]},o($VZ,[2,37]),o($VZ,[2,38]),o($VZ,[2,39]),{45:[1,180]},{19:[1,181]},{19:[1,182]},{19:[1,183]},{19:[1,184]},{21:[1,185]},{21:[1,186]},{21:[1,187]},{14:$V_,54:188},{57:[1,190]},{9:$VF,19:[2,96],21:$V6,36:191,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd},{19:[2,97]},{19:[2,98]},{32:[1,192]},{9:$VF,21:$V6,36:193,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd},o($VO,[2,30],{63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD}),o($Vl,[2,31]),o($VZ,[2,32]),o($VZ,[2,34]),o($VZ,[2,35]),o($VZ,[2,36]),{21:[1,194]},o($VZ,[2,41]),o($VZ,[2,42]),o($VZ,[2,43]),o($VZ,[2,44]),{9:$VF,21:$V6,36:195,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd},{9:$VF,21:$V6,36:196,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd},{24:24,29:$V7,33:197,83:$Ve,84:$Vf,85:$Vg,86:$Vh},{45:[2,65]},{2:$VQ,9:$V5,21:$V6,24:24,29:$V7,33:153,34:154,35:155,36:26,39:198,40:152,41:156,42:157,43:158,44:159,45:$VR,46:160,47:161,48:162,53:$VS,56:$VT,61:$VU,62:$VV,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd,83:$Ve,84:$Vf,85:$Vg,86:$Vh,87:$VW,88:$VX,89:$VY},{58:[1,199]},{19:[2,95],63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD},{23:[1,200]},o($VO,[2,29],{63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD}),{9:$VF,21:$V6,36:201,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd},{23:[1,202],63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD},{23:[1,203],63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD},{19:[1,204]},{2:$VQ,9:$V5,13:[1,205],21:$V6,24:24,29:$V7,33:153,34:154,35:155,36:26,40:176,41:156,42:157,43:158,44:159,45:$VR,46:160,47:161,48:162,53:$VS,56:$VT,61:$VU,62:$VV,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd,83:$Ve,84:$Vf,85:$Vg,86:$Vh,87:$VW,88:$VX,89:$VY},{57:[1,206]},{14:$VP,26:207},{23:[1,208],63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD},{14:$V_,54:209},{14:$V_,54:210},{9:$VF,21:$V6,36:211,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd},o([2,9,13,21,29,45,53,55,56,61,62,64,68,69,70,71,82,83,84,85,86,87,88,89],[2,66]),{59:[1,212],60:[1,213]},o($Vl,[2,21]),{19:[1,214]},o($VZ,[2,58],{55:[1,215]}),o($VZ,[2,63]),{19:[1,216],63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD},{21:[1,217]},{21:[1,218]},o($VZ,[2,40]),{14:$V_,41:220,53:$VS,54:219},{9:[1,222],21:$V6,34:221,36:26,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd},{9:$VF,21:$V6,36:223,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd},{9:$VF,21:$V6,36:224,64:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,82:$Vd},o($VZ,[2,59]),o($VZ,[2,60]),{23:[1,225]},o([23,63,64,65,66,67,72,73,74,75,76,77,78,79,80,81],$Vm,{50:$Vn}),{23:[1,226],63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD},{23:[1,227],63:$Vp,64:$Vq,65:$Vr,66:$Vs,67:$Vt,72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD},{14:$V_,54:228},{19:[2,61]},{19:[2,62]},o($VZ,[2,64])],
defaultActions: {6:[2,1],117:[2,52],133:[2,14],135:[2,16],141:[2,13],142:[2,15],170:[2,97],171:[2,98],188:[2,65],226:[2,61],227:[2,62]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const Nodo = require('./AstTree');
	const Token = require('./Token');
	let Token_List = [];
	let Error_Array = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// comentario multiple líneas		
break;
case 1:// comentario simple línea
break;
case 2:	Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"public","tk_public",1));
						return 7;
break;
case 3:	Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"static","tk_static",2));
						return 27;
break;
case 4:	Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"class","tk_class",3));
						return 8;
break;
case 5:	Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"interface","tk_interface",4));
						return 11;
break;
case 6:	Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"void","tk_void",5));
						return 20;
break;
case 7:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"main","tk_main",6));
						return 28;
break;
case 8:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"args","tk_args",7));
						return 32;
break;
case 9:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"System","tk_System",8));
						return 56;
break;
case 10:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"out","tk_out",9));
						return 58;
break;
case 11:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"print","tk_print",10));
						return 60;
break;
case 12:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"println","tk_println",11));
						return 59;
break;
case 13:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"int","tk_int",12));
						return 83;
break;
case 14:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"double","tk_double",13));
						return 84;
break;
case 15:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"char","tk_char",14));
						return 86;
break;
case 16:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"boolean","tk_boolean",15));
						return 85;
break;
case 17:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"String","tk_String",16));
						return 29;
break;
case 18:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"for","tk_for",17));
						return 61;
break;
case 19:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"while","tk_while",18));
						return 45;
break;
case 20:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"do","tk_do",19));
						return 62;
break;
case 21:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"break","tk_break",20));
						return 88;
break;
case 22:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"return","tk_return",21));
						return 87;
break;
case 23:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"continue","tk_continue",22));
						return 89;
break;
case 24:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"if","tk_if",23));
						return 53;
break;
case 25:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"else","tk_else",24));
						return 55;
break;
case 26:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,";","",25));
						return 19; 
break;
case 27:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"(","parentesis_izq",26));
						return 21; 
break;
case 28:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,")","parentesis_der",27));
						return 23; 
break;
case 29:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"[","conrchete_izq",28));
						return 30; 
break;
case 30:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"]","corchete_der",29));
						return 31; 
break;
case 31:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"{","llave_izq",30));
						return 14
break;
case 32:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"}","llave_der",31));
						return 13
break;
case 33:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,",","coma",32));
						return 38; 
break;
case 34:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,".","punto",33));
						return 57; 
break;
case 35:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,">=","op_mayorigual",34));
						return 77;
break;
case 36:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"<=","op_menor_igual",35));
						return 76;
break;
case 37:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"&&","op_and",36));
						return 78;
break;
case 38:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"||","op_or",37));
						return 79;
break;
case 39:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"!=","op_not_igual",38));
						return 73;
break;
case 40:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"==","op_igual_igual",39));
						return 72;
break;
case 41:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"++","mas_mas",54));
					return 80;
break;
case 42:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"--","menos_menos",54));
					return 81;
break;
case 43:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"+","mas",40));
						return 63;
break;
case 44:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"-","menos",41));
						return 64;
break;
case 45:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"*","por",42));
						return 65;
break;
case 46:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"/","divido",43));
						return 66;
break;
case 47:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"^","op_xor",44));
						return 67;
break;
case 48:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,">","mayor",45));
						return 75;
break;
case 49:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"<","menor",46));
						return 74;
break;
case 50:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"=","igual",47));
						return 50; 
break;
case 51:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,"!","not",48));
						return 82;
break;
case 52: /*ignore */
break;
case 53:/*it will count */
break;
case 54:// se ignoran espacios en blanco
break;
case 55:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); 
						  Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,yy_.yytext,"Cadena",49));
						return 71; 
break;
case 56:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); 
						Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,yy_.yytext,"caracter",50));
						return 70; 
break;
case 57:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,yy_.yytext,"decimal",51));
						return 69; 
break;
case 58:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,yy_.yytext,"entero",52));
						return 68; 
break;
case 59:Token_List.push(new Token(yy_.yylloc.first_line,yy_.yylloc.first_column,yy_.yytext,"identificador",53));
						return 9; 
break;
case 60:return 5; 
break;
case 61: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
						  Error_Array.push('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);  
break;
}
},
rules: [/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\/\/.*)/i,/^(?:public\b)/i,/^(?:static\b)/i,/^(?:class\b)/i,/^(?:interface\b)/i,/^(?:void\b)/i,/^(?:main\b)/i,/^(?:args\b)/i,/^(?:System\b)/i,/^(?:out\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:String\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:return\b)/i,/^(?:continue\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\.)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:!)/i,/^(?:[ \r\t\f]+)/i,/^(?:\n)/i,/^(?:\s+)/i,/^(?:"[^\"]*")/i,/^(?:'[^']')/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}